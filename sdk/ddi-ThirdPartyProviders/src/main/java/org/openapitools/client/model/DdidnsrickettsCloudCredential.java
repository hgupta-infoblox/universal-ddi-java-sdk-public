/*
 * Third Party Providers Configuration API
 * ##### DEPRECATION NOTICE: This API is deprecated for AWS, GCP and Azure and will be removed by February 2024. Please use the V2 CloudDiscoveryProviders APIs instead.  ---   The Third Party Providers configuration is a BloxOne DDI service that provides cloud vendor provider configuration for accessing and syncing the DDI services    Base Paths:  1. provider_integation  :       **_/api/v1/_**  2. cloud_credential,cloud_credential_dynamic,gcp_service_accounts,azure_applications:       **_/api/iam/v1/_**  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CloudCredential information of third party cloud provider
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:32.968390+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class DdidnsrickettsCloudCredential {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String accountId;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREDENTIAL_DATA = "credential_data";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL_DATA)
  @javax.annotation.Nonnull
  private Map<String, Object> credentialData = new HashMap<>();

  public static final String SERIALIZED_NAME_CREDENTIAL_KEY_ID = "credential_key_id";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL_KEY_ID)
  @javax.annotation.Nullable
  private String credentialKeyId;

  public static final String SERIALIZED_NAME_CREDENTIAL_TYPE = "credential_type";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL_TYPE)
  @javax.annotation.Nonnull
  private String credentialType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_IDENTITY_ACCOUNT_ID = "identity_account_id";
  @SerializedName(SERIALIZED_NAME_IDENTITY_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String identityAccountId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private String status;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Map<String, Object> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  public DdidnsrickettsCloudCredential() {
  }

  public DdidnsrickettsCloudCredential(
     String accountId, 
     OffsetDateTime createdAt, 
     String credentialKeyId, 
     String id, 
     String identityAccountId, 
     String status, 
     OffsetDateTime updatedAt
  ) {
    this();
    this.accountId = accountId;
    this.createdAt = createdAt;
    this.credentialKeyId = credentialKeyId;
    this.id = id;
    this.identityAccountId = identityAccountId;
    this.status = status;
    this.updatedAt = updatedAt;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }



  /**
   * The timestamp when the object has been created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public DdidnsrickettsCloudCredential credentialData(@javax.annotation.Nonnull Map<String, Object> credentialData) {
    this.credentialData = credentialData;
    return this;
  }

  public DdidnsrickettsCloudCredential putCredentialDataItem(String key, Object credentialDataItem) {
    if (this.credentialData == null) {
      this.credentialData = new HashMap<>();
    }
    this.credentialData.put(key, credentialDataItem);
    return this;
  }

  /**
   * Get credentialData
   * @return credentialData
   */
  @javax.annotation.Nonnull
  public Map<String, Object> getCredentialData() {
    return credentialData;
  }

  public void setCredentialData(@javax.annotation.Nonnull Map<String, Object> credentialData) {
    this.credentialData = credentialData;
  }


  /**
   * Get credentialKeyId
   * @return credentialKeyId
   */
  @javax.annotation.Nullable
  public String getCredentialKeyId() {
    return credentialKeyId;
  }



  public DdidnsrickettsCloudCredential credentialType(@javax.annotation.Nonnull String credentialType) {
    this.credentialType = credentialType;
    return this;
  }

  /**
   * Get credentialType
   * @return credentialType
   */
  @javax.annotation.Nonnull
  public String getCredentialType() {
    return credentialType;
  }

  public void setCredentialType(@javax.annotation.Nonnull String credentialType) {
    this.credentialType = credentialType;
  }


  public DdidnsrickettsCloudCredential description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  /**
   * The auto-generated unique CloudCredential ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * Get identityAccountId
   * @return identityAccountId
   */
  @javax.annotation.Nullable
  public String getIdentityAccountId() {
    return identityAccountId;
  }



  public DdidnsrickettsCloudCredential name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }



  public DdidnsrickettsCloudCredential tags(@javax.annotation.Nullable Map<String, Object> tags) {
    this.tags = tags;
    return this;
  }

  public DdidnsrickettsCloudCredential putTagsItem(String key, Object tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Tagging specifics.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, Object> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Map<String, Object> tags) {
    this.tags = tags;
  }


  /**
   * The timestamp when the object has been updated. Equals to _created_at_ if not updated after creation.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DdidnsrickettsCloudCredential ddidnsrickettsCloudCredential = (DdidnsrickettsCloudCredential) o;
    return Objects.equals(this.accountId, ddidnsrickettsCloudCredential.accountId) &&
        Objects.equals(this.createdAt, ddidnsrickettsCloudCredential.createdAt) &&
        Objects.equals(this.credentialData, ddidnsrickettsCloudCredential.credentialData) &&
        Objects.equals(this.credentialKeyId, ddidnsrickettsCloudCredential.credentialKeyId) &&
        Objects.equals(this.credentialType, ddidnsrickettsCloudCredential.credentialType) &&
        Objects.equals(this.description, ddidnsrickettsCloudCredential.description) &&
        Objects.equals(this.id, ddidnsrickettsCloudCredential.id) &&
        Objects.equals(this.identityAccountId, ddidnsrickettsCloudCredential.identityAccountId) &&
        Objects.equals(this.name, ddidnsrickettsCloudCredential.name) &&
        Objects.equals(this.status, ddidnsrickettsCloudCredential.status) &&
        Objects.equals(this.tags, ddidnsrickettsCloudCredential.tags) &&
        Objects.equals(this.updatedAt, ddidnsrickettsCloudCredential.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, createdAt, credentialData, credentialKeyId, credentialType, description, id, identityAccountId, name, status, tags, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DdidnsrickettsCloudCredential {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    credentialData: ").append(toIndentedString(credentialData)).append("\n");
    sb.append("    credentialKeyId: ").append(toIndentedString(credentialKeyId)).append("\n");
    sb.append("    credentialType: ").append(toIndentedString(credentialType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identityAccountId: ").append(toIndentedString(identityAccountId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("created_at");
    openapiFields.add("credential_data");
    openapiFields.add("credential_key_id");
    openapiFields.add("credential_type");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("identity_account_id");
    openapiFields.add("name");
    openapiFields.add("status");
    openapiFields.add("tags");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("credential_data");
    openapiRequiredFields.add("credential_type");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DdidnsrickettsCloudCredential
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DdidnsrickettsCloudCredential.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DdidnsrickettsCloudCredential is not found in the empty JSON string", DdidnsrickettsCloudCredential.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DdidnsrickettsCloudCredential.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DdidnsrickettsCloudCredential` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DdidnsrickettsCloudCredential.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_id") != null && !jsonObj.get("account_id").isJsonNull()) && !jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if ((jsonObj.get("credential_key_id") != null && !jsonObj.get("credential_key_id").isJsonNull()) && !jsonObj.get("credential_key_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credential_key_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credential_key_id").toString()));
      }
      if (!jsonObj.get("credential_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credential_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credential_type").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("identity_account_id") != null && !jsonObj.get("identity_account_id").isJsonNull()) && !jsonObj.get("identity_account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identity_account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identity_account_id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DdidnsrickettsCloudCredential.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DdidnsrickettsCloudCredential' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DdidnsrickettsCloudCredential> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DdidnsrickettsCloudCredential.class));

       return (TypeAdapter<T>) new TypeAdapter<DdidnsrickettsCloudCredential>() {
           @Override
           public void write(JsonWriter out, DdidnsrickettsCloudCredential value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DdidnsrickettsCloudCredential read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DdidnsrickettsCloudCredential given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DdidnsrickettsCloudCredential
   * @throws IOException if the JSON string is invalid with respect to DdidnsrickettsCloudCredential
   */
  public static DdidnsrickettsCloudCredential fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DdidnsrickettsCloudCredential.class);
  }

  /**
   * Convert an instance of DdidnsrickettsCloudCredential to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

