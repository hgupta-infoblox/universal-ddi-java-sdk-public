/*
 * Third Party Providers Configuration API
 * ##### DEPRECATION NOTICE: This API is deprecated for AWS, GCP and Azure and will be removed by February 2024. Please use the V2 CloudDiscoveryProviders APIs instead.  ---   The Third Party Providers configuration is a BloxOne DDI service that provides cloud vendor provider configuration for accessing and syncing the DDI services    Base Paths:  1. provider_integation  :       **_/api/v1/_**  2. cloud_credential,cloud_credential_dynamic,gcp_service_accounts,azure_applications:       **_/api/iam/v1/_**  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The ConfigCheckResult object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:32.968390+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class TypesConfigCheckResult {
  public static final String SERIALIZED_NAME_ADDITIONAL_INFO = "additional_info";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFO)
  @javax.annotation.Nullable
  private String additionalInfo;

  public static final String SERIALIZED_NAME_CONFIG_CHECK_TYPE = "config_check_type";
  @SerializedName(SERIALIZED_NAME_CONFIG_CHECK_TYPE)
  @javax.annotation.Nullable
  private String configCheckType;

  public static final String SERIALIZED_NAME_RESOURCE_URI = "resource_uri";
  @SerializedName(SERIALIZED_NAME_RESOURCE_URI)
  @javax.annotation.Nullable
  private String resourceUri;

  public static final String SERIALIZED_NAME_RESULT_CODE = "result_code";
  @SerializedName(SERIALIZED_NAME_RESULT_CODE)
  @javax.annotation.Nullable
  private String resultCode;

  public TypesConfigCheckResult() {
  }

  public TypesConfigCheckResult additionalInfo(@javax.annotation.Nullable String additionalInfo) {
    this.additionalInfo = additionalInfo;
    return this;
  }

  /**
   * Provides more info about the potential problem.
   * @return additionalInfo
   */
  @javax.annotation.Nullable
  public String getAdditionalInfo() {
    return additionalInfo;
  }

  public void setAdditionalInfo(@javax.annotation.Nullable String additionalInfo) {
    this.additionalInfo = additionalInfo;
  }


  public TypesConfigCheckResult configCheckType(@javax.annotation.Nullable String configCheckType) {
    this.configCheckType = configCheckType;
    return this;
  }

  /**
   * Service check type.
   * @return configCheckType
   */
  @javax.annotation.Nullable
  public String getConfigCheckType() {
    return configCheckType;
  }

  public void setConfigCheckType(@javax.annotation.Nullable String configCheckType) {
    this.configCheckType = configCheckType;
  }


  public TypesConfigCheckResult resourceUri(@javax.annotation.Nullable String resourceUri) {
    this.resourceUri = resourceUri;
    return this;
  }

  /**
   * URI of the resource that was checked.
   * @return resourceUri
   */
  @javax.annotation.Nullable
  public String getResourceUri() {
    return resourceUri;
  }

  public void setResourceUri(@javax.annotation.Nullable String resourceUri) {
    this.resourceUri = resourceUri;
  }


  public TypesConfigCheckResult resultCode(@javax.annotation.Nullable String resultCode) {
    this.resultCode = resultCode;
    return this;
  }

  /**
   * The check result.
   * @return resultCode
   */
  @javax.annotation.Nullable
  public String getResultCode() {
    return resultCode;
  }

  public void setResultCode(@javax.annotation.Nullable String resultCode) {
    this.resultCode = resultCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TypesConfigCheckResult typesConfigCheckResult = (TypesConfigCheckResult) o;
    return Objects.equals(this.additionalInfo, typesConfigCheckResult.additionalInfo) &&
        Objects.equals(this.configCheckType, typesConfigCheckResult.configCheckType) &&
        Objects.equals(this.resourceUri, typesConfigCheckResult.resourceUri) &&
        Objects.equals(this.resultCode, typesConfigCheckResult.resultCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalInfo, configCheckType, resourceUri, resultCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TypesConfigCheckResult {\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("    configCheckType: ").append(toIndentedString(configCheckType)).append("\n");
    sb.append("    resourceUri: ").append(toIndentedString(resourceUri)).append("\n");
    sb.append("    resultCode: ").append(toIndentedString(resultCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_info");
    openapiFields.add("config_check_type");
    openapiFields.add("resource_uri");
    openapiFields.add("result_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TypesConfigCheckResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TypesConfigCheckResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TypesConfigCheckResult is not found in the empty JSON string", TypesConfigCheckResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TypesConfigCheckResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TypesConfigCheckResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additional_info") != null && !jsonObj.get("additional_info").isJsonNull()) && !jsonObj.get("additional_info").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additional_info` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additional_info").toString()));
      }
      if ((jsonObj.get("config_check_type") != null && !jsonObj.get("config_check_type").isJsonNull()) && !jsonObj.get("config_check_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `config_check_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("config_check_type").toString()));
      }
      if ((jsonObj.get("resource_uri") != null && !jsonObj.get("resource_uri").isJsonNull()) && !jsonObj.get("resource_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_uri").toString()));
      }
      if ((jsonObj.get("result_code") != null && !jsonObj.get("result_code").isJsonNull()) && !jsonObj.get("result_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TypesConfigCheckResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TypesConfigCheckResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TypesConfigCheckResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TypesConfigCheckResult.class));

       return (TypeAdapter<T>) new TypeAdapter<TypesConfigCheckResult>() {
           @Override
           public void write(JsonWriter out, TypesConfigCheckResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TypesConfigCheckResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TypesConfigCheckResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TypesConfigCheckResult
   * @throws IOException if the JSON string is invalid with respect to TypesConfigCheckResult
   */
  public static TypesConfigCheckResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TypesConfigCheckResult.class);
  }

  /**
   * Convert an instance of TypesConfigCheckResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

