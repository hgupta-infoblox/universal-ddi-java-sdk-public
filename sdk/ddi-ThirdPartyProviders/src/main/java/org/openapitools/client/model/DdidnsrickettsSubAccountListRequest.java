/*
 * Third Party Providers Configuration API
 * ##### DEPRECATION NOTICE: This API is deprecated for AWS, GCP and Azure and will be removed by February 2024. Please use the V2 CloudDiscoveryProviders APIs instead.  ---   The Third Party Providers configuration is a BloxOne DDI service that provides cloud vendor provider configuration for accessing and syncing the DDI services    Base Paths:  1. provider_integation  :       **_/api/v1/_**  2. cloud_credential,cloud_credential_dynamic,gcp_service_accounts,azure_applications:       **_/api/iam/v1/_**  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DdidnsrickettsSubAccountListRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:32.968390+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class DdidnsrickettsSubAccountListRequest {
  public static final String SERIALIZED_NAME_ACCESS_TYPE = "access_type";
  @SerializedName(SERIALIZED_NAME_ACCESS_TYPE)
  @javax.annotation.Nullable
  private String accessType;

  public static final String SERIALIZED_NAME_CREDENTIAL_ID = "credential_id";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL_ID)
  @javax.annotation.Nullable
  private String credentialId;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  @javax.annotation.Nullable
  private String fields;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  @javax.annotation.Nullable
  private String filter;

  public static final String SERIALIZED_NAME_ORDER_BY = "order_by";
  @SerializedName(SERIALIZED_NAME_ORDER_BY)
  @javax.annotation.Nullable
  private String orderBy;

  public static final String SERIALIZED_NAME_PAGING = "paging";
  @SerializedName(SERIALIZED_NAME_PAGING)
  @javax.annotation.Nullable
  private String paging;

  public static final String SERIALIZED_NAME_PROVIDER_CREDENTIALS_CONFIG = "provider_credentials_config";
  @SerializedName(SERIALIZED_NAME_PROVIDER_CREDENTIALS_CONFIG)
  @javax.annotation.Nullable
  private Map<String, Object> providerCredentialsConfig = new HashMap<>();

  public static final String SERIALIZED_NAME_PROVIDER_TYPE = "provider_type";
  @SerializedName(SERIALIZED_NAME_PROVIDER_TYPE)
  @javax.annotation.Nullable
  private String providerType;

  public DdidnsrickettsSubAccountListRequest() {
  }

  public DdidnsrickettsSubAccountListRequest accessType(@javax.annotation.Nullable String accessType) {
    this.accessType = accessType;
    return this;
  }

  /**
   * Get accessType
   * @return accessType
   */
  @javax.annotation.Nullable
  public String getAccessType() {
    return accessType;
  }

  public void setAccessType(@javax.annotation.Nullable String accessType) {
    this.accessType = accessType;
  }


  public DdidnsrickettsSubAccountListRequest credentialId(@javax.annotation.Nullable String credentialId) {
    this.credentialId = credentialId;
    return this;
  }

  /**
   * Get credentialId
   * @return credentialId
   */
  @javax.annotation.Nullable
  public String getCredentialId() {
    return credentialId;
  }

  public void setCredentialId(@javax.annotation.Nullable String credentialId) {
    this.credentialId = credentialId;
  }


  public DdidnsrickettsSubAccountListRequest fields(@javax.annotation.Nullable String fields) {
    this.fields = fields;
    return this;
  }

  /**
   * atlas.api.field_selection
   * @return fields
   */
  @javax.annotation.Nullable
  public String getFields() {
    return fields;
  }

  public void setFields(@javax.annotation.Nullable String fields) {
    this.fields = fields;
  }


  public DdidnsrickettsSubAccountListRequest filter(@javax.annotation.Nullable String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * atlas.api.filtering
   * @return filter
   */
  @javax.annotation.Nullable
  public String getFilter() {
    return filter;
  }

  public void setFilter(@javax.annotation.Nullable String filter) {
    this.filter = filter;
  }


  public DdidnsrickettsSubAccountListRequest orderBy(@javax.annotation.Nullable String orderBy) {
    this.orderBy = orderBy;
    return this;
  }

  /**
   * atlas.api.sorting
   * @return orderBy
   */
  @javax.annotation.Nullable
  public String getOrderBy() {
    return orderBy;
  }

  public void setOrderBy(@javax.annotation.Nullable String orderBy) {
    this.orderBy = orderBy;
  }


  public DdidnsrickettsSubAccountListRequest paging(@javax.annotation.Nullable String paging) {
    this.paging = paging;
    return this;
  }

  /**
   * atlas.api.paging
   * @return paging
   */
  @javax.annotation.Nullable
  public String getPaging() {
    return paging;
  }

  public void setPaging(@javax.annotation.Nullable String paging) {
    this.paging = paging;
  }


  public DdidnsrickettsSubAccountListRequest providerCredentialsConfig(@javax.annotation.Nullable Map<String, Object> providerCredentialsConfig) {
    this.providerCredentialsConfig = providerCredentialsConfig;
    return this;
  }

  public DdidnsrickettsSubAccountListRequest putProviderCredentialsConfigItem(String key, Object providerCredentialsConfigItem) {
    if (this.providerCredentialsConfig == null) {
      this.providerCredentialsConfig = new HashMap<>();
    }
    this.providerCredentialsConfig.put(key, providerCredentialsConfigItem);
    return this;
  }

  /**
   * Get providerCredentialsConfig
   * @return providerCredentialsConfig
   */
  @javax.annotation.Nullable
  public Map<String, Object> getProviderCredentialsConfig() {
    return providerCredentialsConfig;
  }

  public void setProviderCredentialsConfig(@javax.annotation.Nullable Map<String, Object> providerCredentialsConfig) {
    this.providerCredentialsConfig = providerCredentialsConfig;
  }


  public DdidnsrickettsSubAccountListRequest providerType(@javax.annotation.Nullable String providerType) {
    this.providerType = providerType;
    return this;
  }

  /**
   * Get providerType
   * @return providerType
   */
  @javax.annotation.Nullable
  public String getProviderType() {
    return providerType;
  }

  public void setProviderType(@javax.annotation.Nullable String providerType) {
    this.providerType = providerType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DdidnsrickettsSubAccountListRequest ddidnsrickettsSubAccountListRequest = (DdidnsrickettsSubAccountListRequest) o;
    return Objects.equals(this.accessType, ddidnsrickettsSubAccountListRequest.accessType) &&
        Objects.equals(this.credentialId, ddidnsrickettsSubAccountListRequest.credentialId) &&
        Objects.equals(this.fields, ddidnsrickettsSubAccountListRequest.fields) &&
        Objects.equals(this.filter, ddidnsrickettsSubAccountListRequest.filter) &&
        Objects.equals(this.orderBy, ddidnsrickettsSubAccountListRequest.orderBy) &&
        Objects.equals(this.paging, ddidnsrickettsSubAccountListRequest.paging) &&
        Objects.equals(this.providerCredentialsConfig, ddidnsrickettsSubAccountListRequest.providerCredentialsConfig) &&
        Objects.equals(this.providerType, ddidnsrickettsSubAccountListRequest.providerType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessType, credentialId, fields, filter, orderBy, paging, providerCredentialsConfig, providerType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DdidnsrickettsSubAccountListRequest {\n");
    sb.append("    accessType: ").append(toIndentedString(accessType)).append("\n");
    sb.append("    credentialId: ").append(toIndentedString(credentialId)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    orderBy: ").append(toIndentedString(orderBy)).append("\n");
    sb.append("    paging: ").append(toIndentedString(paging)).append("\n");
    sb.append("    providerCredentialsConfig: ").append(toIndentedString(providerCredentialsConfig)).append("\n");
    sb.append("    providerType: ").append(toIndentedString(providerType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access_type");
    openapiFields.add("credential_id");
    openapiFields.add("fields");
    openapiFields.add("filter");
    openapiFields.add("order_by");
    openapiFields.add("paging");
    openapiFields.add("provider_credentials_config");
    openapiFields.add("provider_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DdidnsrickettsSubAccountListRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DdidnsrickettsSubAccountListRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DdidnsrickettsSubAccountListRequest is not found in the empty JSON string", DdidnsrickettsSubAccountListRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DdidnsrickettsSubAccountListRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DdidnsrickettsSubAccountListRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("access_type") != null && !jsonObj.get("access_type").isJsonNull()) && !jsonObj.get("access_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_type").toString()));
      }
      if ((jsonObj.get("credential_id") != null && !jsonObj.get("credential_id").isJsonNull()) && !jsonObj.get("credential_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credential_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credential_id").toString()));
      }
      if ((jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull()) && !jsonObj.get("fields").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fields` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fields").toString()));
      }
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      if ((jsonObj.get("order_by") != null && !jsonObj.get("order_by").isJsonNull()) && !jsonObj.get("order_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_by").toString()));
      }
      if ((jsonObj.get("paging") != null && !jsonObj.get("paging").isJsonNull()) && !jsonObj.get("paging").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paging` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paging").toString()));
      }
      if ((jsonObj.get("provider_type") != null && !jsonObj.get("provider_type").isJsonNull()) && !jsonObj.get("provider_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DdidnsrickettsSubAccountListRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DdidnsrickettsSubAccountListRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DdidnsrickettsSubAccountListRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DdidnsrickettsSubAccountListRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DdidnsrickettsSubAccountListRequest>() {
           @Override
           public void write(JsonWriter out, DdidnsrickettsSubAccountListRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DdidnsrickettsSubAccountListRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DdidnsrickettsSubAccountListRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DdidnsrickettsSubAccountListRequest
   * @throws IOException if the JSON string is invalid with respect to DdidnsrickettsSubAccountListRequest
   */
  public static DdidnsrickettsSubAccountListRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DdidnsrickettsSubAccountListRequest.class);
  }

  /**
   * Convert an instance of DdidnsrickettsSubAccountListRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

