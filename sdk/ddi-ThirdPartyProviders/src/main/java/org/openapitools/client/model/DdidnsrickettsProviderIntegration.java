/*
 * Third Party Providers Configuration API
 * ##### DEPRECATION NOTICE: This API is deprecated for AWS, GCP and Azure and will be removed by February 2024. Please use the V2 CloudDiscoveryProviders APIs instead.  ---   The Third Party Providers configuration is a BloxOne DDI service that provides cloud vendor provider configuration for accessing and syncing the DDI services    Base Paths:  1. provider_integation  :       **_/api/v1/_**  2. cloud_credential,cloud_credential_dynamic,gcp_service_accounts,azure_applications:       **_/api/iam/v1/_**  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Third party provider with the provider configuration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:32.968390+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class DdidnsrickettsProviderIntegration {
  public static final String SERIALIZED_NAME_ACCESS_TYPE = "access_type";
  @SerializedName(SERIALIZED_NAME_ACCESS_TYPE)
  @javax.annotation.Nullable
  private String accessType;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String accountId;

  public static final String SERIALIZED_NAME_ADDITIONAL_CONFIG = "additional_config";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_CONFIG)
  @javax.annotation.Nullable
  private Map<String, Object> additionalConfig = new HashMap<>();

  public static final String SERIALIZED_NAME_AUTH_STATE = "auth_state";
  @SerializedName(SERIALIZED_NAME_AUTH_STATE)
  @javax.annotation.Nullable
  private String authState;

  public static final String SERIALIZED_NAME_CLOUD_CREDENTIAL_ID = "cloud_credential_id";
  @SerializedName(SERIALIZED_NAME_CLOUD_CREDENTIAL_ID)
  @javax.annotation.Nullable
  private String cloudCredentialId;

  public static final String SERIALIZED_NAME_CONSOLIDATE_ZONE_DATA_ENABLED = "consolidate_zone_data_enabled";
  @SerializedName(SERIALIZED_NAME_CONSOLIDATE_ZONE_DATA_ENABLED)
  @javax.annotation.Nullable
  private Boolean consolidateZoneDataEnabled;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_DHCP_SERVER = "dhcp_server";
  @SerializedName(SERIALIZED_NAME_DHCP_SERVER)
  @javax.annotation.Nullable
  private String dhcpServer;

  public static final String SERIALIZED_NAME_DISCOVER_MULTI_ACCOUNTS = "discover_multi_accounts";
  @SerializedName(SERIALIZED_NAME_DISCOVER_MULTI_ACCOUNTS)
  @javax.annotation.Nullable
  private Boolean discoverMultiAccounts;

  public static final String SERIALIZED_NAME_DNS_VIEW = "dns_view";
  @SerializedName(SERIALIZED_NAME_DNS_VIEW)
  @javax.annotation.Nullable
  private String dnsView;

  public static final String SERIALIZED_NAME_DNS_VIEW_NAME = "dns_view_name";
  @SerializedName(SERIALIZED_NAME_DNS_VIEW_NAME)
  @javax.annotation.Nullable
  private String dnsViewName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_INDIVIDUAL_STATUSES = "individual_statuses";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_STATUSES)
  @javax.annotation.Nullable
  private Map<String, Object> individualStatuses = new HashMap<>();

  public static final String SERIALIZED_NAME_IP_SPACE = "ip_space";
  @SerializedName(SERIALIZED_NAME_IP_SPACE)
  @javax.annotation.Nullable
  private String ipSpace;

  public static final String SERIALIZED_NAME_LAST_SYNC = "last_sync";
  @SerializedName(SERIALIZED_NAME_LAST_SYNC)
  @javax.annotation.Nullable
  private OffsetDateTime lastSync;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_PARENT_ID = "parent_id";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  @javax.annotation.Nullable
  private String parentId;

  public static final String SERIALIZED_NAME_PERCENT_COMPLETE = "percent_complete";
  @SerializedName(SERIALIZED_NAME_PERCENT_COMPLETE)
  @javax.annotation.Nullable
  private Integer percentComplete;

  public static final String SERIALIZED_NAME_PROVIDER_CREDENTIALS_CONFIG = "provider_credentials_config";
  @SerializedName(SERIALIZED_NAME_PROVIDER_CREDENTIALS_CONFIG)
  @javax.annotation.Nullable
  private Map<String, Object> providerCredentialsConfig = new HashMap<>();

  public static final String SERIALIZED_NAME_PROVIDER_TYPE = "provider_type";
  @SerializedName(SERIALIZED_NAME_PROVIDER_TYPE)
  @javax.annotation.Nullable
  private String providerType;

  public static final String SERIALIZED_NAME_SERVICE_TYPE = "service_type";
  @SerializedName(SERIALIZED_NAME_SERVICE_TYPE)
  @javax.annotation.Nullable
  private String serviceType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private String status;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "status_message";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  @javax.annotation.Nullable
  private String statusMessage;

  public static final String SERIALIZED_NAME_STATUS_SUMMARY = "status_summary";
  @SerializedName(SERIALIZED_NAME_STATUS_SUMMARY)
  @javax.annotation.Nullable
  private String statusSummary;

  public static final String SERIALIZED_NAME_SYNC_INTERVAL = "sync_interval";
  @SerializedName(SERIALIZED_NAME_SYNC_INTERVAL)
  @javax.annotation.Nullable
  private Integer syncInterval;

  public static final String SERIALIZED_NAME_SYNC_STATE = "sync_state";
  @SerializedName(SERIALIZED_NAME_SYNC_STATE)
  @javax.annotation.Nullable
  private String syncState;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Map<String, Object> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  public DdidnsrickettsProviderIntegration() {
  }

  public DdidnsrickettsProviderIntegration(
     String authState, 
     OffsetDateTime createdAt, 
     String dhcpServer, 
     String id, 
     String ipSpace, 
     OffsetDateTime lastSync, 
     OffsetDateTime updatedAt
  ) {
    this();
    this.authState = authState;
    this.createdAt = createdAt;
    this.dhcpServer = dhcpServer;
    this.id = id;
    this.ipSpace = ipSpace;
    this.lastSync = lastSync;
    this.updatedAt = updatedAt;
  }

  public DdidnsrickettsProviderIntegration accessType(@javax.annotation.Nullable String accessType) {
    this.accessType = accessType;
    return this;
  }

  /**
   * Get accessType
   * @return accessType
   */
  @javax.annotation.Nullable
  public String getAccessType() {
    return accessType;
  }

  public void setAccessType(@javax.annotation.Nullable String accessType) {
    this.accessType = accessType;
  }


  public DdidnsrickettsProviderIntegration accountId(@javax.annotation.Nullable String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(@javax.annotation.Nullable String accountId) {
    this.accountId = accountId;
  }


  public DdidnsrickettsProviderIntegration additionalConfig(@javax.annotation.Nullable Map<String, Object> additionalConfig) {
    this.additionalConfig = additionalConfig;
    return this;
  }

  public DdidnsrickettsProviderIntegration putAdditionalConfigItem(String key, Object additionalConfigItem) {
    if (this.additionalConfig == null) {
      this.additionalConfig = new HashMap<>();
    }
    this.additionalConfig.put(key, additionalConfigItem);
    return this;
  }

  /**
   * Get additionalConfig
   * @return additionalConfig
   */
  @javax.annotation.Nullable
  public Map<String, Object> getAdditionalConfig() {
    return additionalConfig;
  }

  public void setAdditionalConfig(@javax.annotation.Nullable Map<String, Object> additionalConfig) {
    this.additionalConfig = additionalConfig;
  }


  /**
   * Get authState
   * @return authState
   */
  @javax.annotation.Nullable
  public String getAuthState() {
    return authState;
  }



  public DdidnsrickettsProviderIntegration cloudCredentialId(@javax.annotation.Nullable String cloudCredentialId) {
    this.cloudCredentialId = cloudCredentialId;
    return this;
  }

  /**
   * Get cloudCredentialId
   * @return cloudCredentialId
   */
  @javax.annotation.Nullable
  public String getCloudCredentialId() {
    return cloudCredentialId;
  }

  public void setCloudCredentialId(@javax.annotation.Nullable String cloudCredentialId) {
    this.cloudCredentialId = cloudCredentialId;
  }


  public DdidnsrickettsProviderIntegration consolidateZoneDataEnabled(@javax.annotation.Nullable Boolean consolidateZoneDataEnabled) {
    this.consolidateZoneDataEnabled = consolidateZoneDataEnabled;
    return this;
  }

  /**
   * If Consolidate Zone Data Option is enabled then all synced zone data (public &amp; private) will sync to the view configured for the provider. This option cannot be true if a DNS view name has been provided.
   * @return consolidateZoneDataEnabled
   */
  @javax.annotation.Nullable
  public Boolean getConsolidateZoneDataEnabled() {
    return consolidateZoneDataEnabled;
  }

  public void setConsolidateZoneDataEnabled(@javax.annotation.Nullable Boolean consolidateZoneDataEnabled) {
    this.consolidateZoneDataEnabled = consolidateZoneDataEnabled;
  }


  /**
   * The timestamp when the object has been created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public DdidnsrickettsProviderIntegration description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  /**
   * dhcp host server created when creating a provider.
   * @return dhcpServer
   */
  @javax.annotation.Nullable
  public String getDhcpServer() {
    return dhcpServer;
  }



  public DdidnsrickettsProviderIntegration discoverMultiAccounts(@javax.annotation.Nullable Boolean discoverMultiAccounts) {
    this.discoverMultiAccounts = discoverMultiAccounts;
    return this;
  }

  /**
   * Get discoverMultiAccounts
   * @return discoverMultiAccounts
   */
  @javax.annotation.Nullable
  public Boolean getDiscoverMultiAccounts() {
    return discoverMultiAccounts;
  }

  public void setDiscoverMultiAccounts(@javax.annotation.Nullable Boolean discoverMultiAccounts) {
    this.discoverMultiAccounts = discoverMultiAccounts;
  }


  public DdidnsrickettsProviderIntegration dnsView(@javax.annotation.Nullable String dnsView) {
    this.dnsView = dnsView;
    return this;
  }

  /**
   * Get dnsView
   * @return dnsView
   */
  @javax.annotation.Nullable
  public String getDnsView() {
    return dnsView;
  }

  public void setDnsView(@javax.annotation.Nullable String dnsView) {
    this.dnsView = dnsView;
  }


  public DdidnsrickettsProviderIntegration dnsViewName(@javax.annotation.Nullable String dnsViewName) {
    this.dnsViewName = dnsViewName;
    return this;
  }

  /**
   * Get dnsViewName
   * @return dnsViewName
   */
  @javax.annotation.Nullable
  public String getDnsViewName() {
    return dnsViewName;
  }

  public void setDnsViewName(@javax.annotation.Nullable String dnsViewName) {
    this.dnsViewName = dnsViewName;
  }


  /**
   * The auto-generated unique ProviderIntegrationId ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public DdidnsrickettsProviderIntegration individualStatuses(@javax.annotation.Nullable Map<String, Object> individualStatuses) {
    this.individualStatuses = individualStatuses;
    return this;
  }

  public DdidnsrickettsProviderIntegration putIndividualStatusesItem(String key, Object individualStatusesItem) {
    if (this.individualStatuses == null) {
      this.individualStatuses = new HashMap<>();
    }
    this.individualStatuses.put(key, individualStatusesItem);
    return this;
  }

  /**
   * Get individualStatuses
   * @return individualStatuses
   */
  @javax.annotation.Nullable
  public Map<String, Object> getIndividualStatuses() {
    return individualStatuses;
  }

  public void setIndividualStatuses(@javax.annotation.Nullable Map<String, Object> individualStatuses) {
    this.individualStatuses = individualStatuses;
  }


  /**
   * Get ipSpace
   * @return ipSpace
   */
  @javax.annotation.Nullable
  public String getIpSpace() {
    return ipSpace;
  }



  /**
   * The timestamp when was the last sync happened.
   * @return lastSync
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSync() {
    return lastSync;
  }



  public DdidnsrickettsProviderIntegration name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public DdidnsrickettsProviderIntegration parentId(@javax.annotation.Nullable String parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * Get parentId
   * @return parentId
   */
  @javax.annotation.Nullable
  public String getParentId() {
    return parentId;
  }

  public void setParentId(@javax.annotation.Nullable String parentId) {
    this.parentId = parentId;
  }


  public DdidnsrickettsProviderIntegration percentComplete(@javax.annotation.Nullable Integer percentComplete) {
    this.percentComplete = percentComplete;
    return this;
  }

  /**
   * Get percentComplete
   * @return percentComplete
   */
  @javax.annotation.Nullable
  public Integer getPercentComplete() {
    return percentComplete;
  }

  public void setPercentComplete(@javax.annotation.Nullable Integer percentComplete) {
    this.percentComplete = percentComplete;
  }


  public DdidnsrickettsProviderIntegration providerCredentialsConfig(@javax.annotation.Nullable Map<String, Object> providerCredentialsConfig) {
    this.providerCredentialsConfig = providerCredentialsConfig;
    return this;
  }

  public DdidnsrickettsProviderIntegration putProviderCredentialsConfigItem(String key, Object providerCredentialsConfigItem) {
    if (this.providerCredentialsConfig == null) {
      this.providerCredentialsConfig = new HashMap<>();
    }
    this.providerCredentialsConfig.put(key, providerCredentialsConfigItem);
    return this;
  }

  /**
   * Get providerCredentialsConfig
   * @return providerCredentialsConfig
   */
  @javax.annotation.Nullable
  public Map<String, Object> getProviderCredentialsConfig() {
    return providerCredentialsConfig;
  }

  public void setProviderCredentialsConfig(@javax.annotation.Nullable Map<String, Object> providerCredentialsConfig) {
    this.providerCredentialsConfig = providerCredentialsConfig;
  }


  public DdidnsrickettsProviderIntegration providerType(@javax.annotation.Nullable String providerType) {
    this.providerType = providerType;
    return this;
  }

  /**
   * Get providerType
   * @return providerType
   */
  @javax.annotation.Nullable
  public String getProviderType() {
    return providerType;
  }

  public void setProviderType(@javax.annotation.Nullable String providerType) {
    this.providerType = providerType;
  }


  public DdidnsrickettsProviderIntegration serviceType(@javax.annotation.Nullable String serviceType) {
    this.serviceType = serviceType;
    return this;
  }

  /**
   * Get serviceType
   * @return serviceType
   */
  @javax.annotation.Nullable
  public String getServiceType() {
    return serviceType;
  }

  public void setServiceType(@javax.annotation.Nullable String serviceType) {
    this.serviceType = serviceType;
  }


  public DdidnsrickettsProviderIntegration status(@javax.annotation.Nullable String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable String status) {
    this.status = status;
  }


  public DdidnsrickettsProviderIntegration statusMessage(@javax.annotation.Nullable String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Get statusMessage
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(@javax.annotation.Nullable String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public DdidnsrickettsProviderIntegration statusSummary(@javax.annotation.Nullable String statusSummary) {
    this.statusSummary = statusSummary;
    return this;
  }

  /**
   * Get statusSummary
   * @return statusSummary
   */
  @javax.annotation.Nullable
  public String getStatusSummary() {
    return statusSummary;
  }

  public void setStatusSummary(@javax.annotation.Nullable String statusSummary) {
    this.statusSummary = statusSummary;
  }


  public DdidnsrickettsProviderIntegration syncInterval(@javax.annotation.Nullable Integer syncInterval) {
    this.syncInterval = syncInterval;
    return this;
  }

  /**
   * Get syncInterval
   * @return syncInterval
   */
  @javax.annotation.Nullable
  public Integer getSyncInterval() {
    return syncInterval;
  }

  public void setSyncInterval(@javax.annotation.Nullable Integer syncInterval) {
    this.syncInterval = syncInterval;
  }


  public DdidnsrickettsProviderIntegration syncState(@javax.annotation.Nullable String syncState) {
    this.syncState = syncState;
    return this;
  }

  /**
   * Get syncState
   * @return syncState
   */
  @javax.annotation.Nullable
  public String getSyncState() {
    return syncState;
  }

  public void setSyncState(@javax.annotation.Nullable String syncState) {
    this.syncState = syncState;
  }


  public DdidnsrickettsProviderIntegration tags(@javax.annotation.Nullable Map<String, Object> tags) {
    this.tags = tags;
    return this;
  }

  public DdidnsrickettsProviderIntegration putTagsItem(String key, Object tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Tagging specifics.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, Object> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Map<String, Object> tags) {
    this.tags = tags;
  }


  /**
   * The timestamp when the object has been updated. Equals to _created_at_ if not updated after creation.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DdidnsrickettsProviderIntegration ddidnsrickettsProviderIntegration = (DdidnsrickettsProviderIntegration) o;
    return Objects.equals(this.accessType, ddidnsrickettsProviderIntegration.accessType) &&
        Objects.equals(this.accountId, ddidnsrickettsProviderIntegration.accountId) &&
        Objects.equals(this.additionalConfig, ddidnsrickettsProviderIntegration.additionalConfig) &&
        Objects.equals(this.authState, ddidnsrickettsProviderIntegration.authState) &&
        Objects.equals(this.cloudCredentialId, ddidnsrickettsProviderIntegration.cloudCredentialId) &&
        Objects.equals(this.consolidateZoneDataEnabled, ddidnsrickettsProviderIntegration.consolidateZoneDataEnabled) &&
        Objects.equals(this.createdAt, ddidnsrickettsProviderIntegration.createdAt) &&
        Objects.equals(this.description, ddidnsrickettsProviderIntegration.description) &&
        Objects.equals(this.dhcpServer, ddidnsrickettsProviderIntegration.dhcpServer) &&
        Objects.equals(this.discoverMultiAccounts, ddidnsrickettsProviderIntegration.discoverMultiAccounts) &&
        Objects.equals(this.dnsView, ddidnsrickettsProviderIntegration.dnsView) &&
        Objects.equals(this.dnsViewName, ddidnsrickettsProviderIntegration.dnsViewName) &&
        Objects.equals(this.id, ddidnsrickettsProviderIntegration.id) &&
        Objects.equals(this.individualStatuses, ddidnsrickettsProviderIntegration.individualStatuses) &&
        Objects.equals(this.ipSpace, ddidnsrickettsProviderIntegration.ipSpace) &&
        Objects.equals(this.lastSync, ddidnsrickettsProviderIntegration.lastSync) &&
        Objects.equals(this.name, ddidnsrickettsProviderIntegration.name) &&
        Objects.equals(this.parentId, ddidnsrickettsProviderIntegration.parentId) &&
        Objects.equals(this.percentComplete, ddidnsrickettsProviderIntegration.percentComplete) &&
        Objects.equals(this.providerCredentialsConfig, ddidnsrickettsProviderIntegration.providerCredentialsConfig) &&
        Objects.equals(this.providerType, ddidnsrickettsProviderIntegration.providerType) &&
        Objects.equals(this.serviceType, ddidnsrickettsProviderIntegration.serviceType) &&
        Objects.equals(this.status, ddidnsrickettsProviderIntegration.status) &&
        Objects.equals(this.statusMessage, ddidnsrickettsProviderIntegration.statusMessage) &&
        Objects.equals(this.statusSummary, ddidnsrickettsProviderIntegration.statusSummary) &&
        Objects.equals(this.syncInterval, ddidnsrickettsProviderIntegration.syncInterval) &&
        Objects.equals(this.syncState, ddidnsrickettsProviderIntegration.syncState) &&
        Objects.equals(this.tags, ddidnsrickettsProviderIntegration.tags) &&
        Objects.equals(this.updatedAt, ddidnsrickettsProviderIntegration.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessType, accountId, additionalConfig, authState, cloudCredentialId, consolidateZoneDataEnabled, createdAt, description, dhcpServer, discoverMultiAccounts, dnsView, dnsViewName, id, individualStatuses, ipSpace, lastSync, name, parentId, percentComplete, providerCredentialsConfig, providerType, serviceType, status, statusMessage, statusSummary, syncInterval, syncState, tags, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DdidnsrickettsProviderIntegration {\n");
    sb.append("    accessType: ").append(toIndentedString(accessType)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    additionalConfig: ").append(toIndentedString(additionalConfig)).append("\n");
    sb.append("    authState: ").append(toIndentedString(authState)).append("\n");
    sb.append("    cloudCredentialId: ").append(toIndentedString(cloudCredentialId)).append("\n");
    sb.append("    consolidateZoneDataEnabled: ").append(toIndentedString(consolidateZoneDataEnabled)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dhcpServer: ").append(toIndentedString(dhcpServer)).append("\n");
    sb.append("    discoverMultiAccounts: ").append(toIndentedString(discoverMultiAccounts)).append("\n");
    sb.append("    dnsView: ").append(toIndentedString(dnsView)).append("\n");
    sb.append("    dnsViewName: ").append(toIndentedString(dnsViewName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    individualStatuses: ").append(toIndentedString(individualStatuses)).append("\n");
    sb.append("    ipSpace: ").append(toIndentedString(ipSpace)).append("\n");
    sb.append("    lastSync: ").append(toIndentedString(lastSync)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    percentComplete: ").append(toIndentedString(percentComplete)).append("\n");
    sb.append("    providerCredentialsConfig: ").append(toIndentedString(providerCredentialsConfig)).append("\n");
    sb.append("    providerType: ").append(toIndentedString(providerType)).append("\n");
    sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    statusSummary: ").append(toIndentedString(statusSummary)).append("\n");
    sb.append("    syncInterval: ").append(toIndentedString(syncInterval)).append("\n");
    sb.append("    syncState: ").append(toIndentedString(syncState)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access_type");
    openapiFields.add("account_id");
    openapiFields.add("additional_config");
    openapiFields.add("auth_state");
    openapiFields.add("cloud_credential_id");
    openapiFields.add("consolidate_zone_data_enabled");
    openapiFields.add("created_at");
    openapiFields.add("description");
    openapiFields.add("dhcp_server");
    openapiFields.add("discover_multi_accounts");
    openapiFields.add("dns_view");
    openapiFields.add("dns_view_name");
    openapiFields.add("id");
    openapiFields.add("individual_statuses");
    openapiFields.add("ip_space");
    openapiFields.add("last_sync");
    openapiFields.add("name");
    openapiFields.add("parent_id");
    openapiFields.add("percent_complete");
    openapiFields.add("provider_credentials_config");
    openapiFields.add("provider_type");
    openapiFields.add("service_type");
    openapiFields.add("status");
    openapiFields.add("status_message");
    openapiFields.add("status_summary");
    openapiFields.add("sync_interval");
    openapiFields.add("sync_state");
    openapiFields.add("tags");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DdidnsrickettsProviderIntegration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DdidnsrickettsProviderIntegration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DdidnsrickettsProviderIntegration is not found in the empty JSON string", DdidnsrickettsProviderIntegration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DdidnsrickettsProviderIntegration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DdidnsrickettsProviderIntegration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DdidnsrickettsProviderIntegration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("access_type") != null && !jsonObj.get("access_type").isJsonNull()) && !jsonObj.get("access_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_type").toString()));
      }
      if ((jsonObj.get("account_id") != null && !jsonObj.get("account_id").isJsonNull()) && !jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if ((jsonObj.get("auth_state") != null && !jsonObj.get("auth_state").isJsonNull()) && !jsonObj.get("auth_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_state").toString()));
      }
      if ((jsonObj.get("cloud_credential_id") != null && !jsonObj.get("cloud_credential_id").isJsonNull()) && !jsonObj.get("cloud_credential_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloud_credential_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloud_credential_id").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("dhcp_server") != null && !jsonObj.get("dhcp_server").isJsonNull()) && !jsonObj.get("dhcp_server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dhcp_server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dhcp_server").toString()));
      }
      if ((jsonObj.get("dns_view") != null && !jsonObj.get("dns_view").isJsonNull()) && !jsonObj.get("dns_view").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dns_view` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dns_view").toString()));
      }
      if ((jsonObj.get("dns_view_name") != null && !jsonObj.get("dns_view_name").isJsonNull()) && !jsonObj.get("dns_view_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dns_view_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dns_view_name").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("ip_space") != null && !jsonObj.get("ip_space").isJsonNull()) && !jsonObj.get("ip_space").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_space` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_space").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("parent_id") != null && !jsonObj.get("parent_id").isJsonNull()) && !jsonObj.get("parent_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_id").toString()));
      }
      if ((jsonObj.get("provider_type") != null && !jsonObj.get("provider_type").isJsonNull()) && !jsonObj.get("provider_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_type").toString()));
      }
      if ((jsonObj.get("service_type") != null && !jsonObj.get("service_type").isJsonNull()) && !jsonObj.get("service_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_type").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("status_message") != null && !jsonObj.get("status_message").isJsonNull()) && !jsonObj.get("status_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_message").toString()));
      }
      if ((jsonObj.get("status_summary") != null && !jsonObj.get("status_summary").isJsonNull()) && !jsonObj.get("status_summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_summary").toString()));
      }
      if ((jsonObj.get("sync_state") != null && !jsonObj.get("sync_state").isJsonNull()) && !jsonObj.get("sync_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sync_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sync_state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DdidnsrickettsProviderIntegration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DdidnsrickettsProviderIntegration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DdidnsrickettsProviderIntegration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DdidnsrickettsProviderIntegration.class));

       return (TypeAdapter<T>) new TypeAdapter<DdidnsrickettsProviderIntegration>() {
           @Override
           public void write(JsonWriter out, DdidnsrickettsProviderIntegration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DdidnsrickettsProviderIntegration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DdidnsrickettsProviderIntegration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DdidnsrickettsProviderIntegration
   * @throws IOException if the JSON string is invalid with respect to DdidnsrickettsProviderIntegration
   */
  public static DdidnsrickettsProviderIntegration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DdidnsrickettsProviderIntegration.class);
  }

  /**
   * Convert an instance of DdidnsrickettsProviderIntegration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

