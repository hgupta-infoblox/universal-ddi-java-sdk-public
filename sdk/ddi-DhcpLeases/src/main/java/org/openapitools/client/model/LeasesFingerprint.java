/*
 * DHCP Leases API
 * The DHCP Leases application is a BloxOne DDI service that stores information about leases. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network. Hosts are authoritative for their lease data. Changes to leases are periodically replicated to the cloud and stored by this service for display purposes. There is no lease history, so only current leases are available. In other words, every _dhcp/lease_ for that matter, represents a lease that is currently active. Note that fixed addresses do not have leases.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LeasesFingerprintInheritance;
import org.openapitools.client.model.LeasesFingerprintRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A __Fingerprint__ object (_dhcp/fingerprint_) specifies a name and a set of rules.  If a client matches any of the set of rules then it is assigned the name as its fingerprint.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:27.506035+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class LeasesFingerprint {
  public static final String SERIALIZED_NAME_PROPERTY_CLASS = "class";
  @SerializedName(SERIALIZED_NAME_PROPERTY_CLASS)
  @javax.annotation.Nonnull
  private String propertyClass;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DEFINED_BY = "defined_by";
  @SerializedName(SERIALIZED_NAME_DEFINED_BY)
  @javax.annotation.Nullable
  private String definedBy;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_INHERITANCE_SOURCES = "inheritance_sources";
  @SerializedName(SERIALIZED_NAME_INHERITANCE_SOURCES)
  @javax.annotation.Nullable
  private LeasesFingerprintInheritance inheritanceSources;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_PRECEDENCE = "precedence";
  @SerializedName(SERIALIZED_NAME_PRECEDENCE)
  @javax.annotation.Nullable
  private Long precedence;

  public static final String SERIALIZED_NAME_RULES = "rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  @javax.annotation.Nullable
  private List<LeasesFingerprintRule> rules = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHARE_FINGERPRINT = "share_fingerprint";
  @SerializedName(SERIALIZED_NAME_SHARE_FINGERPRINT)
  @javax.annotation.Nullable
  private Boolean shareFingerprint;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Object tags;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  public LeasesFingerprint() {
  }

  public LeasesFingerprint(
     OffsetDateTime createdAt, 
     String definedBy, 
     String id, 
     OffsetDateTime updatedAt
  ) {
    this();
    this.createdAt = createdAt;
    this.definedBy = definedBy;
    this.id = id;
    this.updatedAt = updatedAt;
  }

  public LeasesFingerprint propertyClass(@javax.annotation.Nonnull String propertyClass) {
    this.propertyClass = propertyClass;
    return this;
  }

  /**
   * The resource identifier.
   * @return propertyClass
   */
  @javax.annotation.Nonnull
  public String getPropertyClass() {
    return propertyClass;
  }

  public void setPropertyClass(@javax.annotation.Nonnull String propertyClass) {
    this.propertyClass = propertyClass;
  }


  public LeasesFingerprint comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * The description for the DHCP fingerprint. May contain 0 to 1024 characters. Can include UTF-8.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  /**
   * Time when the object has been created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  /**
   * Indicates if the DHCP fingerprint was defined by the user or if it was defined by Infoblox.  Valid values are: * _user_: Defined by the user.
   * @return definedBy
   */
  @javax.annotation.Nullable
  public String getDefinedBy() {
    return definedBy;
  }



  /**
   * The resource identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public LeasesFingerprint inheritanceSources(@javax.annotation.Nullable LeasesFingerprintInheritance inheritanceSources) {
    this.inheritanceSources = inheritanceSources;
    return this;
  }

  /**
   * Get inheritanceSources
   * @return inheritanceSources
   */
  @javax.annotation.Nullable
  public LeasesFingerprintInheritance getInheritanceSources() {
    return inheritanceSources;
  }

  public void setInheritanceSources(@javax.annotation.Nullable LeasesFingerprintInheritance inheritanceSources) {
    this.inheritanceSources = inheritanceSources;
  }


  public LeasesFingerprint name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the DHCP fingerprint. Must contain 1 to 256 characters. Can include UTF-8.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public LeasesFingerprint precedence(@javax.annotation.Nullable Long precedence) {
    this.precedence = precedence;
    return this;
  }

  /**
   * Integer (1-N) defining priority order of DHCP fingerprints; smaller means higher precedence.
   * maximum: 2147483647
   * @return precedence
   */
  @javax.annotation.Nullable
  public Long getPrecedence() {
    return precedence;
  }

  public void setPrecedence(@javax.annotation.Nullable Long precedence) {
    this.precedence = precedence;
  }


  public LeasesFingerprint rules(@javax.annotation.Nullable List<LeasesFingerprintRule> rules) {
    this.rules = rules;
    return this;
  }

  public LeasesFingerprint addRulesItem(LeasesFingerprintRule rulesItem) {
    if (this.rules == null) {
      this.rules = new ArrayList<>();
    }
    this.rules.add(rulesItem);
    return this;
  }

  /**
   * The collection of fingerprint rules for the DHCP fingerprint.
   * @return rules
   */
  @javax.annotation.Nullable
  public List<LeasesFingerprintRule> getRules() {
    return rules;
  }

  public void setRules(@javax.annotation.Nullable List<LeasesFingerprintRule> rules) {
    this.rules = rules;
  }


  public LeasesFingerprint shareFingerprint(@javax.annotation.Nullable Boolean shareFingerprint) {
    this.shareFingerprint = shareFingerprint;
    return this;
  }

  /**
   * Indicates if the DHCP fingerprint should be shared with Infoblox. This is only applicable for custom fingerprints.  Defaults to _true_ for custom fingerprints.
   * @return shareFingerprint
   */
  @javax.annotation.Nullable
  public Boolean getShareFingerprint() {
    return shareFingerprint;
  }

  public void setShareFingerprint(@javax.annotation.Nullable Boolean shareFingerprint) {
    this.shareFingerprint = shareFingerprint;
  }


  public LeasesFingerprint tags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
    return this;
  }

  /**
   * The tags for the DHCP fingerprint in JSON format.
   * @return tags
   */
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
  }


  /**
   * Time when the object has been updated. Equals to _created_at_ if not updated after creation.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LeasesFingerprint leasesFingerprint = (LeasesFingerprint) o;
    return Objects.equals(this.propertyClass, leasesFingerprint.propertyClass) &&
        Objects.equals(this.comment, leasesFingerprint.comment) &&
        Objects.equals(this.createdAt, leasesFingerprint.createdAt) &&
        Objects.equals(this.definedBy, leasesFingerprint.definedBy) &&
        Objects.equals(this.id, leasesFingerprint.id) &&
        Objects.equals(this.inheritanceSources, leasesFingerprint.inheritanceSources) &&
        Objects.equals(this.name, leasesFingerprint.name) &&
        Objects.equals(this.precedence, leasesFingerprint.precedence) &&
        Objects.equals(this.rules, leasesFingerprint.rules) &&
        Objects.equals(this.shareFingerprint, leasesFingerprint.shareFingerprint) &&
        Objects.equals(this.tags, leasesFingerprint.tags) &&
        Objects.equals(this.updatedAt, leasesFingerprint.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(propertyClass, comment, createdAt, definedBy, id, inheritanceSources, name, precedence, rules, shareFingerprint, tags, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LeasesFingerprint {\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    definedBy: ").append(toIndentedString(definedBy)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inheritanceSources: ").append(toIndentedString(inheritanceSources)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    precedence: ").append(toIndentedString(precedence)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("    shareFingerprint: ").append(toIndentedString(shareFingerprint)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("class");
    openapiFields.add("comment");
    openapiFields.add("created_at");
    openapiFields.add("defined_by");
    openapiFields.add("id");
    openapiFields.add("inheritance_sources");
    openapiFields.add("name");
    openapiFields.add("precedence");
    openapiFields.add("rules");
    openapiFields.add("share_fingerprint");
    openapiFields.add("tags");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("class");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LeasesFingerprint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LeasesFingerprint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LeasesFingerprint is not found in the empty JSON string", LeasesFingerprint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LeasesFingerprint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LeasesFingerprint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LeasesFingerprint.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("class").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("defined_by") != null && !jsonObj.get("defined_by").isJsonNull()) && !jsonObj.get("defined_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defined_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defined_by").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `inheritance_sources`
      if (jsonObj.get("inheritance_sources") != null && !jsonObj.get("inheritance_sources").isJsonNull()) {
        LeasesFingerprintInheritance.validateJsonElement(jsonObj.get("inheritance_sources"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("rules") != null && !jsonObj.get("rules").isJsonNull()) {
        JsonArray jsonArrayrules = jsonObj.getAsJsonArray("rules");
        if (jsonArrayrules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rules` to be an array in the JSON string but got `%s`", jsonObj.get("rules").toString()));
          }

          // validate the optional field `rules` (array)
          for (int i = 0; i < jsonArrayrules.size(); i++) {
            LeasesFingerprintRule.validateJsonElement(jsonArrayrules.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LeasesFingerprint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LeasesFingerprint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LeasesFingerprint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LeasesFingerprint.class));

       return (TypeAdapter<T>) new TypeAdapter<LeasesFingerprint>() {
           @Override
           public void write(JsonWriter out, LeasesFingerprint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LeasesFingerprint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LeasesFingerprint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LeasesFingerprint
   * @throws IOException if the JSON string is invalid with respect to LeasesFingerprint
   */
  public static LeasesFingerprint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LeasesFingerprint.class);
  }

  /**
   * Convert an instance of LeasesFingerprint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

