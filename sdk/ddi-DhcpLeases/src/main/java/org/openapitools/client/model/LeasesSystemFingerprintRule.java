/*
 * DHCP Leases API
 * The DHCP Leases application is a BloxOne DDI service that stores information about leases. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network. Hosts are authoritative for their lease data. Changes to leases are periodically replicated to the cloud and stored by this service for display purposes. There is no lease history, so only current leases are available. In other words, every _dhcp/lease_ for that matter, represents a lease that is currently active. Note that fixed addresses do not have leases.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A __SystemFingerprintRule__ object (_dhcp/system_fingerprint_rule_) represents a DHCP fingerprint rule defined by Infoblox. A lease matches a fingerprint rule if all of the sub-rules evaluate to true. If a sub-rule doesnâ€™t include a value (it has been left empty) it evaluates to true.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:27.506035+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class LeasesSystemFingerprintRule {
  public static final String SERIALIZED_NAME_PREFIX = "prefix";
  @SerializedName(SERIALIZED_NAME_PREFIX)
  @javax.annotation.Nullable
  private String prefix;

  public static final String SERIALIZED_NAME_PRL = "prl";
  @SerializedName(SERIALIZED_NAME_PRL)
  @javax.annotation.Nullable
  private List<String> prl = new ArrayList<>();

  public static final String SERIALIZED_NAME_VENDOR = "vendor";
  @SerializedName(SERIALIZED_NAME_VENDOR)
  @javax.annotation.Nullable
  private String vendor;

  public static final String SERIALIZED_NAME_VENDOR_COMPARE = "vendor_compare";
  @SerializedName(SERIALIZED_NAME_VENDOR_COMPARE)
  @javax.annotation.Nullable
  private String vendorCompare;

  public LeasesSystemFingerprintRule() {
  }

  public LeasesSystemFingerprintRule prefix(@javax.annotation.Nullable String prefix) {
    this.prefix = prefix;
    return this;
  }

  /**
   * The value to use to match the first three bytes of the hardware address.
   * @return prefix
   */
  @javax.annotation.Nullable
  public String getPrefix() {
    return prefix;
  }

  public void setPrefix(@javax.annotation.Nullable String prefix) {
    this.prefix = prefix;
  }


  public LeasesSystemFingerprintRule prl(@javax.annotation.Nullable List<String> prl) {
    this.prl = prl;
    return this;
  }

  public LeasesSystemFingerprintRule addPrlItem(String prlItem) {
    if (this.prl == null) {
      this.prl = new ArrayList<>();
    }
    this.prl.add(prlItem);
    return this;
  }

  /**
   * The value to use to match the parameter request list option (option 55).
   * @return prl
   */
  @javax.annotation.Nullable
  public List<String> getPrl() {
    return prl;
  }

  public void setPrl(@javax.annotation.Nullable List<String> prl) {
    this.prl = prl;
  }


  public LeasesSystemFingerprintRule vendor(@javax.annotation.Nullable String vendor) {
    this.vendor = vendor;
    return this;
  }

  /**
   * The value to use to match the vendor class ID option (option 60).
   * @return vendor
   */
  @javax.annotation.Nullable
  public String getVendor() {
    return vendor;
  }

  public void setVendor(@javax.annotation.Nullable String vendor) {
    this.vendor = vendor;
  }


  public LeasesSystemFingerprintRule vendorCompare(@javax.annotation.Nullable String vendorCompare) {
    this.vendorCompare = vendorCompare;
    return this;
  }

  /**
   * The operation to use when matching the vendor class ID.  Valid values are: * _equals_ * _not_equals_ * _contains_ * _begins_with_  Defaults to _equals_.
   * @return vendorCompare
   */
  @javax.annotation.Nullable
  public String getVendorCompare() {
    return vendorCompare;
  }

  public void setVendorCompare(@javax.annotation.Nullable String vendorCompare) {
    this.vendorCompare = vendorCompare;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LeasesSystemFingerprintRule leasesSystemFingerprintRule = (LeasesSystemFingerprintRule) o;
    return Objects.equals(this.prefix, leasesSystemFingerprintRule.prefix) &&
        Objects.equals(this.prl, leasesSystemFingerprintRule.prl) &&
        Objects.equals(this.vendor, leasesSystemFingerprintRule.vendor) &&
        Objects.equals(this.vendorCompare, leasesSystemFingerprintRule.vendorCompare);
  }

  @Override
  public int hashCode() {
    return Objects.hash(prefix, prl, vendor, vendorCompare);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LeasesSystemFingerprintRule {\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    prl: ").append(toIndentedString(prl)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("    vendorCompare: ").append(toIndentedString(vendorCompare)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("prefix");
    openapiFields.add("prl");
    openapiFields.add("vendor");
    openapiFields.add("vendor_compare");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LeasesSystemFingerprintRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LeasesSystemFingerprintRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LeasesSystemFingerprintRule is not found in the empty JSON string", LeasesSystemFingerprintRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LeasesSystemFingerprintRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LeasesSystemFingerprintRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("prefix") != null && !jsonObj.get("prefix").isJsonNull()) && !jsonObj.get("prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefix").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("prl") != null && !jsonObj.get("prl").isJsonNull() && !jsonObj.get("prl").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `prl` to be an array in the JSON string but got `%s`", jsonObj.get("prl").toString()));
      }
      if ((jsonObj.get("vendor") != null && !jsonObj.get("vendor").isJsonNull()) && !jsonObj.get("vendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor").toString()));
      }
      if ((jsonObj.get("vendor_compare") != null && !jsonObj.get("vendor_compare").isJsonNull()) && !jsonObj.get("vendor_compare").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor_compare` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor_compare").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LeasesSystemFingerprintRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LeasesSystemFingerprintRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LeasesSystemFingerprintRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LeasesSystemFingerprintRule.class));

       return (TypeAdapter<T>) new TypeAdapter<LeasesSystemFingerprintRule>() {
           @Override
           public void write(JsonWriter out, LeasesSystemFingerprintRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LeasesSystemFingerprintRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LeasesSystemFingerprintRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LeasesSystemFingerprintRule
   * @throws IOException if the JSON string is invalid with respect to LeasesSystemFingerprintRule
   */
  public static LeasesSystemFingerprintRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LeasesSystemFingerprintRule.class);
  }

  /**
   * Convert an instance of LeasesSystemFingerprintRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

