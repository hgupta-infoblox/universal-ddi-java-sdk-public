/*
 * DHCP Leases API
 * The DHCP Leases application is a BloxOne DDI service that stores information about leases. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network. Hosts are authoritative for their lease data. Changes to leases are periodically replicated to the cloud and stored by this service for display purposes. There is no lease history, so only current leases are available. In other words, every _dhcp/lease_ for that matter, represents a lease that is currently active. Note that fixed addresses do not have leases.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for LeasesLease
 */
public class LeasesLeaseTest {
    private final LeasesLease model = new LeasesLease();

    /**
     * Model tests for LeasesLease
     */
    @Test
    public void testLeasesLease() {
        // TODO: test LeasesLease
    }

    /**
     * Test the property 'address'
     */
    @Test
    public void addressTest() {
        // TODO: test address
    }

    /**
     * Test the property 'clientId'
     */
    @Test
    public void clientIdTest() {
        // TODO: test clientId
    }

    /**
     * Test the property 'ends'
     */
    @Test
    public void endsTest() {
        // TODO: test ends
    }

    /**
     * Test the property 'fingerprint'
     */
    @Test
    public void fingerprintTest() {
        // TODO: test fingerprint
    }

    /**
     * Test the property 'fingerprintProcessed'
     */
    @Test
    public void fingerprintProcessedTest() {
        // TODO: test fingerprintProcessed
    }

    /**
     * Test the property 'haGroup'
     */
    @Test
    public void haGroupTest() {
        // TODO: test haGroup
    }

    /**
     * Test the property 'hardware'
     */
    @Test
    public void hardwareTest() {
        // TODO: test hardware
    }

    /**
     * Test the property 'host'
     */
    @Test
    public void hostTest() {
        // TODO: test host
    }

    /**
     * Test the property 'hostname'
     */
    @Test
    public void hostnameTest() {
        // TODO: test hostname
    }

    /**
     * Test the property 'iaid'
     */
    @Test
    public void iaidTest() {
        // TODO: test iaid
    }

    /**
     * Test the property 'lastUpdated'
     */
    @Test
    public void lastUpdatedTest() {
        // TODO: test lastUpdated
    }

    /**
     * Test the property 'options'
     */
    @Test
    public void optionsTest() {
        // TODO: test options
    }

    /**
     * Test the property 'preferredLifetime'
     */
    @Test
    public void preferredLifetimeTest() {
        // TODO: test preferredLifetime
    }

    /**
     * Test the property 'protocol'
     */
    @Test
    public void protocolTest() {
        // TODO: test protocol
    }

    /**
     * Test the property 'space'
     */
    @Test
    public void spaceTest() {
        // TODO: test space
    }

    /**
     * Test the property 'starts'
     */
    @Test
    public void startsTest() {
        // TODO: test starts
    }

    /**
     * Test the property 'state'
     */
    @Test
    public void stateTest() {
        // TODO: test state
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

}
