/*
 * IP Address Management Web API
 * The WAPI Portal provides access to the IPAM/DHCP Application, a BloxOne DDI service providing IP address management and DHCP protocol features
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.V3FederatedRealm;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A __NetworkView__ object (_networkview_) is a single routing domain with its own networks. A network view can contain both IPv4 and IPv6 networks. All networks must belong to a network view.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:33.825954+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class V3NetworkView {
  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_FEDERATED_REALMS = "federated_realms";
  @SerializedName(SERIALIZED_NAME_FEDERATED_REALMS)
  @javax.annotation.Nullable
  private List<V3FederatedRealm> federatedRealms = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_DEFAULT = "is_default";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  @javax.annotation.Nullable
  private Boolean isDefault;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_REF = "ref";
  @SerializedName(SERIALIZED_NAME_REF)
  @javax.annotation.Nullable
  private String ref;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Object tags;

  public V3NetworkView() {
  }

  public V3NetworkView(
     Boolean isDefault
  ) {
    this();
    this.isDefault = isDefault;
  }

  public V3NetworkView comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Comment for the network view; maximum 1024 characters.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  public V3NetworkView federatedRealms(@javax.annotation.Nullable List<V3FederatedRealm> federatedRealms) {
    this.federatedRealms = federatedRealms;
    return this;
  }

  public V3NetworkView addFederatedRealmsItem(V3FederatedRealm federatedRealmsItem) {
    if (this.federatedRealms == null) {
      this.federatedRealms = new ArrayList<>();
    }
    this.federatedRealms.add(federatedRealmsItem);
    return this;
  }

  /**
   * The federated realms that are associated with this network view.
   * @return federatedRealms
   */
  @javax.annotation.Nullable
  public List<V3FederatedRealm> getFederatedRealms() {
    return federatedRealms;
  }

  public void setFederatedRealms(@javax.annotation.Nullable List<V3FederatedRealm> federatedRealms) {
    this.federatedRealms = federatedRealms;
  }


  /**
   * Indicates whether the network view is the default network view.
   * @return isDefault
   */
  @javax.annotation.Nullable
  public Boolean getIsDefault() {
    return isDefault;
  }



  public V3NetworkView name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the network view.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public V3NetworkView ref(@javax.annotation.Nullable String ref) {
    this.ref = ref;
    return this;
  }

  /**
   * infoblox.ddi.wapi.objectref
   * @return ref
   */
  @javax.annotation.Nullable
  public String getRef() {
    return ref;
  }

  public void setRef(@javax.annotation.Nullable String ref) {
    this.ref = ref;
  }


  public V3NetworkView tags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
    return this;
  }

  /**
   * The tags for the network view in JSON format.
   * @return tags
   */
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V3NetworkView v3NetworkView = (V3NetworkView) o;
    return Objects.equals(this.comment, v3NetworkView.comment) &&
        Objects.equals(this.federatedRealms, v3NetworkView.federatedRealms) &&
        Objects.equals(this.isDefault, v3NetworkView.isDefault) &&
        Objects.equals(this.name, v3NetworkView.name) &&
        Objects.equals(this.ref, v3NetworkView.ref) &&
        Objects.equals(this.tags, v3NetworkView.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comment, federatedRealms, isDefault, name, ref, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V3NetworkView {\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    federatedRealms: ").append(toIndentedString(federatedRealms)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comment");
    openapiFields.add("federated_realms");
    openapiFields.add("is_default");
    openapiFields.add("name");
    openapiFields.add("ref");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V3NetworkView
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V3NetworkView.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V3NetworkView is not found in the empty JSON string", V3NetworkView.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V3NetworkView.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V3NetworkView` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V3NetworkView.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if (jsonObj.get("federated_realms") != null && !jsonObj.get("federated_realms").isJsonNull()) {
        JsonArray jsonArrayfederatedRealms = jsonObj.getAsJsonArray("federated_realms");
        if (jsonArrayfederatedRealms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("federated_realms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `federated_realms` to be an array in the JSON string but got `%s`", jsonObj.get("federated_realms").toString()));
          }

          // validate the optional field `federated_realms` (array)
          for (int i = 0; i < jsonArrayfederatedRealms.size(); i++) {
            V3FederatedRealm.validateJsonElement(jsonArrayfederatedRealms.get(i));
          };
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("ref") != null && !jsonObj.get("ref").isJsonNull()) && !jsonObj.get("ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V3NetworkView.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V3NetworkView' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V3NetworkView> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V3NetworkView.class));

       return (TypeAdapter<T>) new TypeAdapter<V3NetworkView>() {
           @Override
           public void write(JsonWriter out, V3NetworkView value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V3NetworkView read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V3NetworkView given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V3NetworkView
   * @throws IOException if the JSON string is invalid with respect to V3NetworkView
   */
  public static V3NetworkView fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V3NetworkView.class);
  }

  /**
   * Convert an instance of V3NetworkView to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

