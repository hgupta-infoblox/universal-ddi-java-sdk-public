/*
 * IP Address Management Web API
 * The WAPI Portal provides access to the IPAM/DHCP Application, a BloxOne DDI service providing IP address management and DHCP protocol features
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An __IPv6FixedAddress__ object (_ipv6fixedaddress_) reserves an IPv6 address for a specific client. It must have a _match_client_ and a valid corresponding match value so it can match that client.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:33.825954+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class V3IPv6FixedAddress {
  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_DISABLE = "disable";
  @SerializedName(SERIALIZED_NAME_DISABLE)
  @javax.annotation.Nullable
  private Boolean disable;

  public static final String SERIALIZED_NAME_DUID = "duid";
  @SerializedName(SERIALIZED_NAME_DUID)
  @javax.annotation.Nonnull
  private String duid;

  public static final String SERIALIZED_NAME_IPV6ADDR = "ipv6addr";
  @SerializedName(SERIALIZED_NAME_IPV6ADDR)
  @javax.annotation.Nonnull
  private String ipv6addr;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  @javax.annotation.Nullable
  private String network;

  public static final String SERIALIZED_NAME_NETWORK_VIEW = "network_view";
  @SerializedName(SERIALIZED_NAME_NETWORK_VIEW)
  @javax.annotation.Nonnull
  private String networkView;

  public static final String SERIALIZED_NAME_REF = "ref";
  @SerializedName(SERIALIZED_NAME_REF)
  @javax.annotation.Nullable
  private String ref;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Object tags;

  public V3IPv6FixedAddress() {
  }

  public V3IPv6FixedAddress(
     String network
  ) {
    this();
    this.network = network;
  }

  public V3IPv6FixedAddress comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Comment for the fixed address; maximum 1024 characters.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  public V3IPv6FixedAddress disable(@javax.annotation.Nullable Boolean disable) {
    this.disable = disable;
    return this;
  }

  /**
   * Determines whether the IPv6 fixed address is disabled or not.
   * @return disable
   */
  @javax.annotation.Nullable
  public Boolean getDisable() {
    return disable;
  }

  public void setDisable(@javax.annotation.Nullable Boolean disable) {
    this.disable = disable;
  }


  public V3IPv6FixedAddress duid(@javax.annotation.Nonnull String duid) {
    this.duid = duid;
    return this;
  }

  /**
   * The DUID value for this IPv6 fixed address.
   * @return duid
   */
  @javax.annotation.Nonnull
  public String getDuid() {
    return duid;
  }

  public void setDuid(@javax.annotation.Nonnull String duid) {
    this.duid = duid;
  }


  public V3IPv6FixedAddress ipv6addr(@javax.annotation.Nonnull String ipv6addr) {
    this.ipv6addr = ipv6addr;
    return this;
  }

  /**
   * The IPv6 Address of the DHCP IPv6 fixed address.
   * @return ipv6addr
   */
  @javax.annotation.Nonnull
  public String getIpv6addr() {
    return ipv6addr;
  }

  public void setIpv6addr(@javax.annotation.Nonnull String ipv6addr) {
    this.ipv6addr = ipv6addr;
  }


  public V3IPv6FixedAddress name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of this IPv6 fixed address. May contain 1 to 256 characters. Can include UTF-8.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  /**
   * The network to which this IPv6 fixed address belongs, in IPv6 Address/CIDR format.
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }



  public V3IPv6FixedAddress networkView(@javax.annotation.Nonnull String networkView) {
    this.networkView = networkView;
    return this;
  }

  /**
   * The name of the network view in which this IPv6 fixed address resides.
   * @return networkView
   */
  @javax.annotation.Nonnull
  public String getNetworkView() {
    return networkView;
  }

  public void setNetworkView(@javax.annotation.Nonnull String networkView) {
    this.networkView = networkView;
  }


  public V3IPv6FixedAddress ref(@javax.annotation.Nullable String ref) {
    this.ref = ref;
    return this;
  }

  /**
   * infoblox.ddi.wapi.objectref
   * @return ref
   */
  @javax.annotation.Nullable
  public String getRef() {
    return ref;
  }

  public void setRef(@javax.annotation.Nullable String ref) {
    this.ref = ref;
  }


  public V3IPv6FixedAddress tags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
    return this;
  }

  /**
   * The tags for the fixed address in JSON format.
   * @return tags
   */
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V3IPv6FixedAddress v3IPv6FixedAddress = (V3IPv6FixedAddress) o;
    return Objects.equals(this.comment, v3IPv6FixedAddress.comment) &&
        Objects.equals(this.disable, v3IPv6FixedAddress.disable) &&
        Objects.equals(this.duid, v3IPv6FixedAddress.duid) &&
        Objects.equals(this.ipv6addr, v3IPv6FixedAddress.ipv6addr) &&
        Objects.equals(this.name, v3IPv6FixedAddress.name) &&
        Objects.equals(this.network, v3IPv6FixedAddress.network) &&
        Objects.equals(this.networkView, v3IPv6FixedAddress.networkView) &&
        Objects.equals(this.ref, v3IPv6FixedAddress.ref) &&
        Objects.equals(this.tags, v3IPv6FixedAddress.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comment, disable, duid, ipv6addr, name, network, networkView, ref, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V3IPv6FixedAddress {\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    disable: ").append(toIndentedString(disable)).append("\n");
    sb.append("    duid: ").append(toIndentedString(duid)).append("\n");
    sb.append("    ipv6addr: ").append(toIndentedString(ipv6addr)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    networkView: ").append(toIndentedString(networkView)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comment");
    openapiFields.add("disable");
    openapiFields.add("duid");
    openapiFields.add("ipv6addr");
    openapiFields.add("name");
    openapiFields.add("network");
    openapiFields.add("network_view");
    openapiFields.add("ref");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("duid");
    openapiRequiredFields.add("ipv6addr");
    openapiRequiredFields.add("network_view");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V3IPv6FixedAddress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V3IPv6FixedAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V3IPv6FixedAddress is not found in the empty JSON string", V3IPv6FixedAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V3IPv6FixedAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V3IPv6FixedAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V3IPv6FixedAddress.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if (!jsonObj.get("duid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duid").toString()));
      }
      if (!jsonObj.get("ipv6addr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipv6addr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipv6addr").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if (!jsonObj.get("network_view").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network_view` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network_view").toString()));
      }
      if ((jsonObj.get("ref") != null && !jsonObj.get("ref").isJsonNull()) && !jsonObj.get("ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V3IPv6FixedAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V3IPv6FixedAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V3IPv6FixedAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V3IPv6FixedAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<V3IPv6FixedAddress>() {
           @Override
           public void write(JsonWriter out, V3IPv6FixedAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V3IPv6FixedAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V3IPv6FixedAddress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V3IPv6FixedAddress
   * @throws IOException if the JSON string is invalid with respect to V3IPv6FixedAddress
   */
  public static V3IPv6FixedAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V3IPv6FixedAddress.class);
  }

  /**
   * Convert an instance of V3IPv6FixedAddress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

