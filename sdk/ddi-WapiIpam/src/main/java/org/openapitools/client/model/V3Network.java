/*
 * IP Address Management Web API
 * The WAPI Portal provides access to the IPAM/DHCP Application, a BloxOne DDI service providing IP address management and DHCP protocol features
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.V3FederatedRealm;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A __Network__ object (_network_) is a set of contiguous IPv4 addresses in the same IP space with no gap, expressed as an address and CIDR values. It represents a set of addresses from which addresses are assigned to network equipment interfaces.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:33.825954+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class V3Network {
  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_DISABLE = "disable";
  @SerializedName(SERIALIZED_NAME_DISABLE)
  @javax.annotation.Nullable
  private Boolean disable;

  public static final String SERIALIZED_NAME_FEDERATED_REALMS = "federated_realms";
  @SerializedName(SERIALIZED_NAME_FEDERATED_REALMS)
  @javax.annotation.Nullable
  private List<V3FederatedRealm> federatedRealms = new ArrayList<>();

  public static final String SERIALIZED_NAME_IPV4ADDR = "ipv4addr";
  @SerializedName(SERIALIZED_NAME_IPV4ADDR)
  @javax.annotation.Nullable
  private String ipv4addr;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  @javax.annotation.Nonnull
  private String network;

  public static final String SERIALIZED_NAME_NETWORK_CONTAINER = "network_container";
  @SerializedName(SERIALIZED_NAME_NETWORK_CONTAINER)
  @javax.annotation.Nullable
  private String networkContainer;

  public static final String SERIALIZED_NAME_NETWORK_VIEW = "network_view";
  @SerializedName(SERIALIZED_NAME_NETWORK_VIEW)
  @javax.annotation.Nonnull
  private String networkView;

  public static final String SERIALIZED_NAME_REF = "ref";
  @SerializedName(SERIALIZED_NAME_REF)
  @javax.annotation.Nullable
  private String ref;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Object tags;

  public static final String SERIALIZED_NAME_UTILIZATION = "utilization";
  @SerializedName(SERIALIZED_NAME_UTILIZATION)
  @javax.annotation.Nullable
  private Long utilization;

  public V3Network() {
  }

  public V3Network(
     String networkContainer, 
     Long utilization
  ) {
    this();
    this.networkContainer = networkContainer;
    this.utilization = utilization;
  }

  public V3Network comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Comment for the network, maximum 1024 characters.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  public V3Network disable(@javax.annotation.Nullable Boolean disable) {
    this.disable = disable;
    return this;
  }

  /**
   * Determines whether a network is disabled or not.
   * @return disable
   */
  @javax.annotation.Nullable
  public Boolean getDisable() {
    return disable;
  }

  public void setDisable(@javax.annotation.Nullable Boolean disable) {
    this.disable = disable;
  }


  public V3Network federatedRealms(@javax.annotation.Nullable List<V3FederatedRealm> federatedRealms) {
    this.federatedRealms = federatedRealms;
    return this;
  }

  public V3Network addFederatedRealmsItem(V3FederatedRealm federatedRealmsItem) {
    if (this.federatedRealms == null) {
      this.federatedRealms = new ArrayList<>();
    }
    this.federatedRealms.add(federatedRealmsItem);
    return this;
  }

  /**
   * The federated realms that are associated with this network.
   * @return federatedRealms
   */
  @javax.annotation.Nullable
  public List<V3FederatedRealm> getFederatedRealms() {
    return federatedRealms;
  }

  public void setFederatedRealms(@javax.annotation.Nullable List<V3FederatedRealm> federatedRealms) {
    this.federatedRealms = federatedRealms;
  }


  public V3Network ipv4addr(@javax.annotation.Nullable String ipv4addr) {
    this.ipv4addr = ipv4addr;
    return this;
  }

  /**
   * The IPv4 Address of the network.
   * @return ipv4addr
   */
  @javax.annotation.Nullable
  public String getIpv4addr() {
    return ipv4addr;
  }

  public void setIpv4addr(@javax.annotation.Nullable String ipv4addr) {
    this.ipv4addr = ipv4addr;
  }


  public V3Network network(@javax.annotation.Nonnull String network) {
    this.network = network;
    return this;
  }

  /**
   * The network address in IPv4 Address/CIDR format.
   * @return network
   */
  @javax.annotation.Nonnull
  public String getNetwork() {
    return network;
  }

  public void setNetwork(@javax.annotation.Nonnull String network) {
    this.network = network;
  }


  /**
   * The network container to which this network belongs, if any.
   * @return networkContainer
   */
  @javax.annotation.Nullable
  public String getNetworkContainer() {
    return networkContainer;
  }



  public V3Network networkView(@javax.annotation.Nonnull String networkView) {
    this.networkView = networkView;
    return this;
  }

  /**
   * The name of the network view in which this network resides.
   * @return networkView
   */
  @javax.annotation.Nonnull
  public String getNetworkView() {
    return networkView;
  }

  public void setNetworkView(@javax.annotation.Nonnull String networkView) {
    this.networkView = networkView;
  }


  public V3Network ref(@javax.annotation.Nullable String ref) {
    this.ref = ref;
    return this;
  }

  /**
   * infoblox.ddi.wapi.objectref
   * @return ref
   */
  @javax.annotation.Nullable
  public String getRef() {
    return ref;
  }

  public void setRef(@javax.annotation.Nullable String ref) {
    this.ref = ref;
  }


  public V3Network tags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
    return this;
  }

  /**
   * The tags for the network in JSON format.
   * @return tags
   */
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
  }


  /**
   * The network utilization in percentage.
   * maximum: 100
   * @return utilization
   */
  @javax.annotation.Nullable
  public Long getUtilization() {
    return utilization;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V3Network v3Network = (V3Network) o;
    return Objects.equals(this.comment, v3Network.comment) &&
        Objects.equals(this.disable, v3Network.disable) &&
        Objects.equals(this.federatedRealms, v3Network.federatedRealms) &&
        Objects.equals(this.ipv4addr, v3Network.ipv4addr) &&
        Objects.equals(this.network, v3Network.network) &&
        Objects.equals(this.networkContainer, v3Network.networkContainer) &&
        Objects.equals(this.networkView, v3Network.networkView) &&
        Objects.equals(this.ref, v3Network.ref) &&
        Objects.equals(this.tags, v3Network.tags) &&
        Objects.equals(this.utilization, v3Network.utilization);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comment, disable, federatedRealms, ipv4addr, network, networkContainer, networkView, ref, tags, utilization);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V3Network {\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    disable: ").append(toIndentedString(disable)).append("\n");
    sb.append("    federatedRealms: ").append(toIndentedString(federatedRealms)).append("\n");
    sb.append("    ipv4addr: ").append(toIndentedString(ipv4addr)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    networkContainer: ").append(toIndentedString(networkContainer)).append("\n");
    sb.append("    networkView: ").append(toIndentedString(networkView)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    utilization: ").append(toIndentedString(utilization)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comment");
    openapiFields.add("disable");
    openapiFields.add("federated_realms");
    openapiFields.add("ipv4addr");
    openapiFields.add("network");
    openapiFields.add("network_container");
    openapiFields.add("network_view");
    openapiFields.add("ref");
    openapiFields.add("tags");
    openapiFields.add("utilization");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("network");
    openapiRequiredFields.add("network_view");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V3Network
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V3Network.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V3Network is not found in the empty JSON string", V3Network.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V3Network.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V3Network` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V3Network.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if (jsonObj.get("federated_realms") != null && !jsonObj.get("federated_realms").isJsonNull()) {
        JsonArray jsonArrayfederatedRealms = jsonObj.getAsJsonArray("federated_realms");
        if (jsonArrayfederatedRealms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("federated_realms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `federated_realms` to be an array in the JSON string but got `%s`", jsonObj.get("federated_realms").toString()));
          }

          // validate the optional field `federated_realms` (array)
          for (int i = 0; i < jsonArrayfederatedRealms.size(); i++) {
            V3FederatedRealm.validateJsonElement(jsonArrayfederatedRealms.get(i));
          };
        }
      }
      if ((jsonObj.get("ipv4addr") != null && !jsonObj.get("ipv4addr").isJsonNull()) && !jsonObj.get("ipv4addr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipv4addr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipv4addr").toString()));
      }
      if (!jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if ((jsonObj.get("network_container") != null && !jsonObj.get("network_container").isJsonNull()) && !jsonObj.get("network_container").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network_container` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network_container").toString()));
      }
      if (!jsonObj.get("network_view").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network_view` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network_view").toString()));
      }
      if ((jsonObj.get("ref") != null && !jsonObj.get("ref").isJsonNull()) && !jsonObj.get("ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V3Network.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V3Network' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V3Network> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V3Network.class));

       return (TypeAdapter<T>) new TypeAdapter<V3Network>() {
           @Override
           public void write(JsonWriter out, V3Network value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V3Network read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V3Network given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V3Network
   * @throws IOException if the JSON string is invalid with respect to V3Network
   */
  public static V3Network fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V3Network.class);
  }

  /**
   * Convert an instance of V3Network to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

