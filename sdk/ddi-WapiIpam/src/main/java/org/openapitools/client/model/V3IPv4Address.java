/*
 * IP Address Management Web API
 * The WAPI Portal provides access to the IPAM/DHCP Application, a BloxOne DDI service providing IP address management and DHCP protocol features
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An __IPv4Address__ object (_ipv4address_) represents any single IPv4 address within a given network view.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:33.825954+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class V3IPv4Address {
  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_DHCP_CLIENT_IDENTIFIER = "dhcp_client_identifier";
  @SerializedName(SERIALIZED_NAME_DHCP_CLIENT_IDENTIFIER)
  @javax.annotation.Nullable
  private String dhcpClientIdentifier;

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  @javax.annotation.Nullable
  private String fingerprint;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ip_address";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  @javax.annotation.Nonnull
  private String ipAddress;

  public static final String SERIALIZED_NAME_LEASE_STATE = "lease_state";
  @SerializedName(SERIALIZED_NAME_LEASE_STATE)
  @javax.annotation.Nullable
  private String leaseState;

  public static final String SERIALIZED_NAME_MAC_ADDRESS = "mac_address";
  @SerializedName(SERIALIZED_NAME_MAC_ADDRESS)
  @javax.annotation.Nullable
  private String macAddress;

  public static final String SERIALIZED_NAME_NAMES = "names";
  @SerializedName(SERIALIZED_NAME_NAMES)
  @javax.annotation.Nullable
  private List<String> names = new ArrayList<>();

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  @javax.annotation.Nullable
  private String network;

  public static final String SERIALIZED_NAME_NETWORK_VIEW = "network_view";
  @SerializedName(SERIALIZED_NAME_NETWORK_VIEW)
  @javax.annotation.Nonnull
  private String networkView;

  public static final String SERIALIZED_NAME_REF = "ref";
  @SerializedName(SERIALIZED_NAME_REF)
  @javax.annotation.Nullable
  private String ref;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private String status;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Object tags;

  public static final String SERIALIZED_NAME_USAGE = "usage";
  @SerializedName(SERIALIZED_NAME_USAGE)
  @javax.annotation.Nullable
  private List<String> usage = new ArrayList<>();

  public V3IPv4Address() {
  }

  public V3IPv4Address(
     String dhcpClientIdentifier, 
     String fingerprint, 
     String leaseState, 
     String macAddress, 
     String network, 
     String status, 
     List<String> usage
  ) {
    this();
    this.dhcpClientIdentifier = dhcpClientIdentifier;
    this.fingerprint = fingerprint;
    this.leaseState = leaseState;
    this.macAddress = macAddress;
    this.network = network;
    this.status = status;
    this.usage = usage;
  }

  public V3IPv4Address comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Comment for the address; maximum 1024 characters.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  /**
   * The DHCP client unique identifier.
   * @return dhcpClientIdentifier
   */
  @javax.annotation.Nullable
  public String getDhcpClientIdentifier() {
    return dhcpClientIdentifier;
  }



  /**
   * The DHCP fingerprint for the address.
   * @return fingerprint
   */
  @javax.annotation.Nullable
  public String getFingerprint() {
    return fingerprint;
  }



  public V3IPv4Address ipAddress(@javax.annotation.Nonnull String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * The IPv4 Address of the address.
   * @return ipAddress
   */
  @javax.annotation.Nonnull
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(@javax.annotation.Nonnull String ipAddress) {
    this.ipAddress = ipAddress;
  }


  /**
   * The lease state of the address:   * _none_: Address is not under DHCP control.   * _free_: Address is under DHCP control but has no lease currently assigned.   * _leased_: Address is under DHCP control and has a lease currently assigned.   * _fixed_: Address is under DHCP control and a fixed address exists for the lease.   * _abandoned_:  Address was leased by a DHCP server and then declined by the client.
   * @return leaseState
   */
  @javax.annotation.Nullable
  public String getLeaseState() {
    return leaseState;
  }



  /**
   * The MAC address value for this address.
   * @return macAddress
   */
  @javax.annotation.Nullable
  public String getMacAddress() {
    return macAddress;
  }



  public V3IPv4Address names(@javax.annotation.Nullable List<String> names) {
    this.names = names;
    return this;
  }

  public V3IPv4Address addNamesItem(String namesItem) {
    if (this.names == null) {
      this.names = new ArrayList<>();
    }
    this.names.add(namesItem);
    return this;
  }

  /**
   * The DNS names. For example, if the address belongs to a host record, this field contains the hostname.
   * @return names
   */
  @javax.annotation.Nullable
  public List<String> getNames() {
    return names;
  }

  public void setNames(@javax.annotation.Nullable List<String> names) {
    this.names = names;
  }


  /**
   * The network to which this address belongs, in IPv4 Address/CIDR format.
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }



  public V3IPv4Address networkView(@javax.annotation.Nonnull String networkView) {
    this.networkView = networkView;
    return this;
  }

  /**
   * The name of the network view in which this address resides.
   * @return networkView
   */
  @javax.annotation.Nonnull
  public String getNetworkView() {
    return networkView;
  }

  public void setNetworkView(@javax.annotation.Nonnull String networkView) {
    this.networkView = networkView;
  }


  public V3IPv4Address ref(@javax.annotation.Nullable String ref) {
    this.ref = ref;
    return this;
  }

  /**
   * infoblox.ddi.wapi.objectref
   * @return ref
   */
  @javax.annotation.Nullable
  public String getRef() {
    return ref;
  }

  public void setRef(@javax.annotation.Nullable String ref) {
    this.ref = ref;
  }


  /**
   * The current status of the address (_UNUSED_ or _USED_).
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }



  public V3IPv4Address tags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
    return this;
  }

  /**
   * The tags for the address in JSON format.
   * @return tags
   */
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
  }


  /**
   * The usage is a combination of indicators, each tracking a specific associated use. Listed below are usage indicators with their meaning:  usage indicator        | description  ---------------------- | --------------------------------  _IPAM_                 |  Address was created by the IPAM component.  _IPAM_, _RESERVED_     |  Address was created by the API call _wapi/v3/ipv4address_.  _IPAM_, _NETWORK_      |  Address was automatically created by the IPAM component and is the network address of the parent network.  _IPAM_, _BROADCAST_    |  Address was automatically created by the IPAM component and is the broadcast address of the parent network.  _DHCP_                 |  Address was created by the DHCP component.  _DHCP_, _FIXEDADDRESS_ |  Address was created by the API call _wapi/v3/fixedaddress_.  _DHCP_, _LEASED_       |  An active lease for that address was issued by a DHCP server.  _DHCP_, _DISABLED_     |  Address is disabled.  _DNS_                  |  Address is used by one or more DNS records.  _DISCOVERED_           |  Address is discovered by some network discovery probe like Network Insight or NetMRI in NIOS.
   * @return usage
   */
  @javax.annotation.Nullable
  public List<String> getUsage() {
    return usage;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V3IPv4Address v3IPv4Address = (V3IPv4Address) o;
    return Objects.equals(this.comment, v3IPv4Address.comment) &&
        Objects.equals(this.dhcpClientIdentifier, v3IPv4Address.dhcpClientIdentifier) &&
        Objects.equals(this.fingerprint, v3IPv4Address.fingerprint) &&
        Objects.equals(this.ipAddress, v3IPv4Address.ipAddress) &&
        Objects.equals(this.leaseState, v3IPv4Address.leaseState) &&
        Objects.equals(this.macAddress, v3IPv4Address.macAddress) &&
        Objects.equals(this.names, v3IPv4Address.names) &&
        Objects.equals(this.network, v3IPv4Address.network) &&
        Objects.equals(this.networkView, v3IPv4Address.networkView) &&
        Objects.equals(this.ref, v3IPv4Address.ref) &&
        Objects.equals(this.status, v3IPv4Address.status) &&
        Objects.equals(this.tags, v3IPv4Address.tags) &&
        Objects.equals(this.usage, v3IPv4Address.usage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comment, dhcpClientIdentifier, fingerprint, ipAddress, leaseState, macAddress, names, network, networkView, ref, status, tags, usage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V3IPv4Address {\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    dhcpClientIdentifier: ").append(toIndentedString(dhcpClientIdentifier)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    leaseState: ").append(toIndentedString(leaseState)).append("\n");
    sb.append("    macAddress: ").append(toIndentedString(macAddress)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    networkView: ").append(toIndentedString(networkView)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comment");
    openapiFields.add("dhcp_client_identifier");
    openapiFields.add("fingerprint");
    openapiFields.add("ip_address");
    openapiFields.add("lease_state");
    openapiFields.add("mac_address");
    openapiFields.add("names");
    openapiFields.add("network");
    openapiFields.add("network_view");
    openapiFields.add("ref");
    openapiFields.add("status");
    openapiFields.add("tags");
    openapiFields.add("usage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ip_address");
    openapiRequiredFields.add("network_view");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V3IPv4Address
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V3IPv4Address.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V3IPv4Address is not found in the empty JSON string", V3IPv4Address.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V3IPv4Address.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V3IPv4Address` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V3IPv4Address.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("dhcp_client_identifier") != null && !jsonObj.get("dhcp_client_identifier").isJsonNull()) && !jsonObj.get("dhcp_client_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dhcp_client_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dhcp_client_identifier").toString()));
      }
      if ((jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull()) && !jsonObj.get("fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
      if (!jsonObj.get("ip_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_address").toString()));
      }
      if ((jsonObj.get("lease_state") != null && !jsonObj.get("lease_state").isJsonNull()) && !jsonObj.get("lease_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lease_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lease_state").toString()));
      }
      if ((jsonObj.get("mac_address") != null && !jsonObj.get("mac_address").isJsonNull()) && !jsonObj.get("mac_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mac_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mac_address").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("names") != null && !jsonObj.get("names").isJsonNull() && !jsonObj.get("names").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `names` to be an array in the JSON string but got `%s`", jsonObj.get("names").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if (!jsonObj.get("network_view").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network_view` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network_view").toString()));
      }
      if ((jsonObj.get("ref") != null && !jsonObj.get("ref").isJsonNull()) && !jsonObj.get("ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("usage") != null && !jsonObj.get("usage").isJsonNull() && !jsonObj.get("usage").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `usage` to be an array in the JSON string but got `%s`", jsonObj.get("usage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V3IPv4Address.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V3IPv4Address' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V3IPv4Address> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V3IPv4Address.class));

       return (TypeAdapter<T>) new TypeAdapter<V3IPv4Address>() {
           @Override
           public void write(JsonWriter out, V3IPv4Address value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V3IPv4Address read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V3IPv4Address given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V3IPv4Address
   * @throws IOException if the JSON string is invalid with respect to V3IPv4Address
   */
  public static V3IPv4Address fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V3IPv4Address.class);
  }

  /**
   * Convert an instance of V3IPv4Address to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

