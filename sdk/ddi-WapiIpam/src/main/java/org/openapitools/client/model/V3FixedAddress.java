/*
 * IP Address Management Web API
 * The WAPI Portal provides access to the IPAM/DHCP Application, a BloxOne DDI service providing IP address management and DHCP protocol features
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A __FixedAddress__ object (_fixedaddress_) reserves an IPv4 address for a specific client. It must have a _match_client_ and a valid corresponding match value so it can match that client.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:33.825954+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class V3FixedAddress {
  public static final String SERIALIZED_NAME_AGENT_CIRCUIT_ID = "agent_circuit_id";
  @SerializedName(SERIALIZED_NAME_AGENT_CIRCUIT_ID)
  @javax.annotation.Nullable
  private String agentCircuitId;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_DHCP_CLIENT_IDENTIFIER = "dhcp_client_identifier";
  @SerializedName(SERIALIZED_NAME_DHCP_CLIENT_IDENTIFIER)
  @javax.annotation.Nullable
  private String dhcpClientIdentifier;

  public static final String SERIALIZED_NAME_DISABLE = "disable";
  @SerializedName(SERIALIZED_NAME_DISABLE)
  @javax.annotation.Nullable
  private Boolean disable;

  public static final String SERIALIZED_NAME_IPV4ADDR = "ipv4addr";
  @SerializedName(SERIALIZED_NAME_IPV4ADDR)
  @javax.annotation.Nonnull
  private String ipv4addr;

  public static final String SERIALIZED_NAME_MAC = "mac";
  @SerializedName(SERIALIZED_NAME_MAC)
  @javax.annotation.Nullable
  private String mac;

  public static final String SERIALIZED_NAME_MATCH_CLIENT = "match_client";
  @SerializedName(SERIALIZED_NAME_MATCH_CLIENT)
  @javax.annotation.Nullable
  private String matchClient;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  @javax.annotation.Nullable
  private String network;

  public static final String SERIALIZED_NAME_NETWORK_VIEW = "network_view";
  @SerializedName(SERIALIZED_NAME_NETWORK_VIEW)
  @javax.annotation.Nonnull
  private String networkView;

  public static final String SERIALIZED_NAME_REF = "ref";
  @SerializedName(SERIALIZED_NAME_REF)
  @javax.annotation.Nullable
  private String ref;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Object tags;

  public V3FixedAddress() {
  }

  public V3FixedAddress(
     String network
  ) {
    this();
    this.network = network;
  }

  public V3FixedAddress agentCircuitId(@javax.annotation.Nullable String agentCircuitId) {
    this.agentCircuitId = agentCircuitId;
    return this;
  }

  /**
   * The agent circuit ID for the fixed address. The field is required only when _match_client_ is set to _CIRCUIT_ID_.
   * @return agentCircuitId
   */
  @javax.annotation.Nullable
  public String getAgentCircuitId() {
    return agentCircuitId;
  }

  public void setAgentCircuitId(@javax.annotation.Nullable String agentCircuitId) {
    this.agentCircuitId = agentCircuitId;
  }


  public V3FixedAddress comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Comment for the fixed address; maximum 1024 characters.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  public V3FixedAddress dhcpClientIdentifier(@javax.annotation.Nullable String dhcpClientIdentifier) {
    this.dhcpClientIdentifier = dhcpClientIdentifier;
    return this;
  }

  /**
   * The DHCP client ID for the fixed address. The field is required only when _match_client_ is set to _CLIENT_ID_.
   * @return dhcpClientIdentifier
   */
  @javax.annotation.Nullable
  public String getDhcpClientIdentifier() {
    return dhcpClientIdentifier;
  }

  public void setDhcpClientIdentifier(@javax.annotation.Nullable String dhcpClientIdentifier) {
    this.dhcpClientIdentifier = dhcpClientIdentifier;
  }


  public V3FixedAddress disable(@javax.annotation.Nullable Boolean disable) {
    this.disable = disable;
    return this;
  }

  /**
   * Determines whether a fixed address is disabled or not.
   * @return disable
   */
  @javax.annotation.Nullable
  public Boolean getDisable() {
    return disable;
  }

  public void setDisable(@javax.annotation.Nullable Boolean disable) {
    this.disable = disable;
  }


  public V3FixedAddress ipv4addr(@javax.annotation.Nonnull String ipv4addr) {
    this.ipv4addr = ipv4addr;
    return this;
  }

  /**
   * The IPv4 Address of the fixed address.
   * @return ipv4addr
   */
  @javax.annotation.Nonnull
  public String getIpv4addr() {
    return ipv4addr;
  }

  public void setIpv4addr(@javax.annotation.Nonnull String ipv4addr) {
    this.ipv4addr = ipv4addr;
  }


  public V3FixedAddress mac(@javax.annotation.Nullable String mac) {
    this.mac = mac;
    return this;
  }

  /**
   * The MAC address value for this fixed address. The field is required only when _match_client_ is set to _MAC_ADDRESS_.
   * @return mac
   */
  @javax.annotation.Nullable
  public String getMac() {
    return mac;
  }

  public void setMac(@javax.annotation.Nullable String mac) {
    this.mac = mac;
  }


  public V3FixedAddress matchClient(@javax.annotation.Nullable String matchClient) {
    this.matchClient = matchClient;
    return this;
  }

  /**
   * Get matchClient
   * @return matchClient
   */
  @javax.annotation.Nullable
  public String getMatchClient() {
    return matchClient;
  }

  public void setMatchClient(@javax.annotation.Nullable String matchClient) {
    this.matchClient = matchClient;
  }


  public V3FixedAddress name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the fixed address.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  /**
   * The network to which this fixed address belongs, in IPv4 Address/CIDR format.
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }



  public V3FixedAddress networkView(@javax.annotation.Nonnull String networkView) {
    this.networkView = networkView;
    return this;
  }

  /**
   * The name of the network view in which this fixed address resides.
   * @return networkView
   */
  @javax.annotation.Nonnull
  public String getNetworkView() {
    return networkView;
  }

  public void setNetworkView(@javax.annotation.Nonnull String networkView) {
    this.networkView = networkView;
  }


  public V3FixedAddress ref(@javax.annotation.Nullable String ref) {
    this.ref = ref;
    return this;
  }

  /**
   * infoblox.ddi.wapi.objectref
   * @return ref
   */
  @javax.annotation.Nullable
  public String getRef() {
    return ref;
  }

  public void setRef(@javax.annotation.Nullable String ref) {
    this.ref = ref;
  }


  public V3FixedAddress tags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
    return this;
  }

  /**
   * The tags for the fixed address in JSON format.
   * @return tags
   */
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V3FixedAddress v3FixedAddress = (V3FixedAddress) o;
    return Objects.equals(this.agentCircuitId, v3FixedAddress.agentCircuitId) &&
        Objects.equals(this.comment, v3FixedAddress.comment) &&
        Objects.equals(this.dhcpClientIdentifier, v3FixedAddress.dhcpClientIdentifier) &&
        Objects.equals(this.disable, v3FixedAddress.disable) &&
        Objects.equals(this.ipv4addr, v3FixedAddress.ipv4addr) &&
        Objects.equals(this.mac, v3FixedAddress.mac) &&
        Objects.equals(this.matchClient, v3FixedAddress.matchClient) &&
        Objects.equals(this.name, v3FixedAddress.name) &&
        Objects.equals(this.network, v3FixedAddress.network) &&
        Objects.equals(this.networkView, v3FixedAddress.networkView) &&
        Objects.equals(this.ref, v3FixedAddress.ref) &&
        Objects.equals(this.tags, v3FixedAddress.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentCircuitId, comment, dhcpClientIdentifier, disable, ipv4addr, mac, matchClient, name, network, networkView, ref, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V3FixedAddress {\n");
    sb.append("    agentCircuitId: ").append(toIndentedString(agentCircuitId)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    dhcpClientIdentifier: ").append(toIndentedString(dhcpClientIdentifier)).append("\n");
    sb.append("    disable: ").append(toIndentedString(disable)).append("\n");
    sb.append("    ipv4addr: ").append(toIndentedString(ipv4addr)).append("\n");
    sb.append("    mac: ").append(toIndentedString(mac)).append("\n");
    sb.append("    matchClient: ").append(toIndentedString(matchClient)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    networkView: ").append(toIndentedString(networkView)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agent_circuit_id");
    openapiFields.add("comment");
    openapiFields.add("dhcp_client_identifier");
    openapiFields.add("disable");
    openapiFields.add("ipv4addr");
    openapiFields.add("mac");
    openapiFields.add("match_client");
    openapiFields.add("name");
    openapiFields.add("network");
    openapiFields.add("network_view");
    openapiFields.add("ref");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ipv4addr");
    openapiRequiredFields.add("network_view");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V3FixedAddress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V3FixedAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V3FixedAddress is not found in the empty JSON string", V3FixedAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V3FixedAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V3FixedAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V3FixedAddress.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("agent_circuit_id") != null && !jsonObj.get("agent_circuit_id").isJsonNull()) && !jsonObj.get("agent_circuit_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agent_circuit_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agent_circuit_id").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("dhcp_client_identifier") != null && !jsonObj.get("dhcp_client_identifier").isJsonNull()) && !jsonObj.get("dhcp_client_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dhcp_client_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dhcp_client_identifier").toString()));
      }
      if (!jsonObj.get("ipv4addr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipv4addr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipv4addr").toString()));
      }
      if ((jsonObj.get("mac") != null && !jsonObj.get("mac").isJsonNull()) && !jsonObj.get("mac").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mac` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mac").toString()));
      }
      if ((jsonObj.get("match_client") != null && !jsonObj.get("match_client").isJsonNull()) && !jsonObj.get("match_client").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `match_client` to be a primitive type in the JSON string but got `%s`", jsonObj.get("match_client").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if (!jsonObj.get("network_view").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network_view` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network_view").toString()));
      }
      if ((jsonObj.get("ref") != null && !jsonObj.get("ref").isJsonNull()) && !jsonObj.get("ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V3FixedAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V3FixedAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V3FixedAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V3FixedAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<V3FixedAddress>() {
           @Override
           public void write(JsonWriter out, V3FixedAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V3FixedAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V3FixedAddress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V3FixedAddress
   * @throws IOException if the JSON string is invalid with respect to V3FixedAddress
   */
  public static V3FixedAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V3FixedAddress.class);
  }

  /**
   * Convert an instance of V3FixedAddress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

