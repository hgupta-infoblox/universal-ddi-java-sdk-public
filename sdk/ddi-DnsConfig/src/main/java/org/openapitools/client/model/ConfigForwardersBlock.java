/*
 * DNS Configuration API
 * The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConfigForwarder;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Block for fields: _forwarders_, _forwarders_only_, _use_root_forwarders_for_local_resolution_with_b1td_.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:28.384903+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class ConfigForwardersBlock {
  public static final String SERIALIZED_NAME_FORWARDERS = "forwarders";
  @SerializedName(SERIALIZED_NAME_FORWARDERS)
  @javax.annotation.Nullable
  private List<ConfigForwarder> forwarders = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORWARDERS_ONLY = "forwarders_only";
  @SerializedName(SERIALIZED_NAME_FORWARDERS_ONLY)
  @javax.annotation.Nullable
  private Boolean forwardersOnly;

  public static final String SERIALIZED_NAME_USE_ROOT_FORWARDERS_FOR_LOCAL_RESOLUTION_WITH_B1TD = "use_root_forwarders_for_local_resolution_with_b1td";
  @SerializedName(SERIALIZED_NAME_USE_ROOT_FORWARDERS_FOR_LOCAL_RESOLUTION_WITH_B1TD)
  @javax.annotation.Nullable
  private Boolean useRootForwardersForLocalResolutionWithB1td;

  public ConfigForwardersBlock() {
  }

  public ConfigForwardersBlock forwarders(@javax.annotation.Nullable List<ConfigForwarder> forwarders) {
    this.forwarders = forwarders;
    return this;
  }

  public ConfigForwardersBlock addForwardersItem(ConfigForwarder forwardersItem) {
    if (this.forwarders == null) {
      this.forwarders = new ArrayList<>();
    }
    this.forwarders.add(forwardersItem);
    return this;
  }

  /**
   * Optional. Field configuration for _forwarders_ field.
   * @return forwarders
   */
  @javax.annotation.Nullable
  public List<ConfigForwarder> getForwarders() {
    return forwarders;
  }

  public void setForwarders(@javax.annotation.Nullable List<ConfigForwarder> forwarders) {
    this.forwarders = forwarders;
  }


  public ConfigForwardersBlock forwardersOnly(@javax.annotation.Nullable Boolean forwardersOnly) {
    this.forwardersOnly = forwardersOnly;
    return this;
  }

  /**
   * Optional. Field configuration for _forwarders_only_ field.
   * @return forwardersOnly
   */
  @javax.annotation.Nullable
  public Boolean getForwardersOnly() {
    return forwardersOnly;
  }

  public void setForwardersOnly(@javax.annotation.Nullable Boolean forwardersOnly) {
    this.forwardersOnly = forwardersOnly;
  }


  public ConfigForwardersBlock useRootForwardersForLocalResolutionWithB1td(@javax.annotation.Nullable Boolean useRootForwardersForLocalResolutionWithB1td) {
    this.useRootForwardersForLocalResolutionWithB1td = useRootForwardersForLocalResolutionWithB1td;
    return this;
  }

  /**
   * Optional. Field configuration for _use_root_forwarders_for_local_resolution_with_b1td_ field.
   * @return useRootForwardersForLocalResolutionWithB1td
   */
  @javax.annotation.Nullable
  public Boolean getUseRootForwardersForLocalResolutionWithB1td() {
    return useRootForwardersForLocalResolutionWithB1td;
  }

  public void setUseRootForwardersForLocalResolutionWithB1td(@javax.annotation.Nullable Boolean useRootForwardersForLocalResolutionWithB1td) {
    this.useRootForwardersForLocalResolutionWithB1td = useRootForwardersForLocalResolutionWithB1td;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigForwardersBlock configForwardersBlock = (ConfigForwardersBlock) o;
    return Objects.equals(this.forwarders, configForwardersBlock.forwarders) &&
        Objects.equals(this.forwardersOnly, configForwardersBlock.forwardersOnly) &&
        Objects.equals(this.useRootForwardersForLocalResolutionWithB1td, configForwardersBlock.useRootForwardersForLocalResolutionWithB1td);
  }

  @Override
  public int hashCode() {
    return Objects.hash(forwarders, forwardersOnly, useRootForwardersForLocalResolutionWithB1td);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigForwardersBlock {\n");
    sb.append("    forwarders: ").append(toIndentedString(forwarders)).append("\n");
    sb.append("    forwardersOnly: ").append(toIndentedString(forwardersOnly)).append("\n");
    sb.append("    useRootForwardersForLocalResolutionWithB1td: ").append(toIndentedString(useRootForwardersForLocalResolutionWithB1td)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("forwarders");
    openapiFields.add("forwarders_only");
    openapiFields.add("use_root_forwarders_for_local_resolution_with_b1td");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigForwardersBlock
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigForwardersBlock.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigForwardersBlock is not found in the empty JSON string", ConfigForwardersBlock.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigForwardersBlock.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigForwardersBlock` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("forwarders") != null && !jsonObj.get("forwarders").isJsonNull()) {
        JsonArray jsonArrayforwarders = jsonObj.getAsJsonArray("forwarders");
        if (jsonArrayforwarders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("forwarders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `forwarders` to be an array in the JSON string but got `%s`", jsonObj.get("forwarders").toString()));
          }

          // validate the optional field `forwarders` (array)
          for (int i = 0; i < jsonArrayforwarders.size(); i++) {
            ConfigForwarder.validateJsonElement(jsonArrayforwarders.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigForwardersBlock.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigForwardersBlock' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigForwardersBlock> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigForwardersBlock.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigForwardersBlock>() {
           @Override
           public void write(JsonWriter out, ConfigForwardersBlock value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigForwardersBlock read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigForwardersBlock given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigForwardersBlock
   * @throws IOException if the JSON string is invalid with respect to ConfigForwardersBlock
   */
  public static ConfigForwardersBlock fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigForwardersBlock.class);
  }

  /**
   * Convert an instance of ConfigForwardersBlock to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

