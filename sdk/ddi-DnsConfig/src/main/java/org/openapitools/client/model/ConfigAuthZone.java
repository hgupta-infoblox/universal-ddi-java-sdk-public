/*
 * DNS Configuration API
 * The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConfigACLItem;
import org.openapitools.client.model.ConfigAuthZoneInheritance;
import org.openapitools.client.model.ConfigExternalPrimary;
import org.openapitools.client.model.ConfigExternalProvider;
import org.openapitools.client.model.ConfigExternalSecondary;
import org.openapitools.client.model.ConfigInternalSecondary;
import org.openapitools.client.model.ConfigMemberServer;
import org.openapitools.client.model.ConfigWarning;
import org.openapitools.client.model.ConfigZoneAuthority;
import org.openapitools.client.model.Inheritance2AssignedHost;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Authoritative zone.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:28.384903+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class ConfigAuthZone {
  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_COMPARTMENT_ID = "compartment_id";
  @SerializedName(SERIALIZED_NAME_COMPARTMENT_ID)
  @javax.annotation.Nullable
  private String compartmentId;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  @javax.annotation.Nullable
  private Boolean disabled;

  public static final String SERIALIZED_NAME_EXTERNAL_PRIMARIES = "external_primaries";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_PRIMARIES)
  @javax.annotation.Nullable
  private List<ConfigExternalPrimary> externalPrimaries = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTERNAL_PROVIDERS = "external_providers";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_PROVIDERS)
  @javax.annotation.Nullable
  private List<ConfigExternalProvider> externalProviders = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTERNAL_PROVIDERS_METADATA = "external_providers_metadata";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_PROVIDERS_METADATA)
  @javax.annotation.Nullable
  private Object externalProvidersMetadata;

  public static final String SERIALIZED_NAME_EXTERNAL_SECONDARIES = "external_secondaries";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_SECONDARIES)
  @javax.annotation.Nullable
  private List<ConfigExternalSecondary> externalSecondaries = new ArrayList<>();

  public static final String SERIALIZED_NAME_FQDN = "fqdn";
  @SerializedName(SERIALIZED_NAME_FQDN)
  @javax.annotation.Nonnull
  private String fqdn;

  public static final String SERIALIZED_NAME_GRID_PRIMARIES = "grid_primaries";
  @SerializedName(SERIALIZED_NAME_GRID_PRIMARIES)
  @javax.annotation.Nullable
  private List<ConfigMemberServer> gridPrimaries = new ArrayList<>();

  public static final String SERIALIZED_NAME_GRID_SECONDARIES = "grid_secondaries";
  @SerializedName(SERIALIZED_NAME_GRID_SECONDARIES)
  @javax.annotation.Nullable
  private List<ConfigMemberServer> gridSecondaries = new ArrayList<>();

  public static final String SERIALIZED_NAME_GSS_TSIG_ENABLED = "gss_tsig_enabled";
  @SerializedName(SERIALIZED_NAME_GSS_TSIG_ENABLED)
  @javax.annotation.Nullable
  private Boolean gssTsigEnabled;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_INHERITANCE_ASSIGNED_HOSTS = "inheritance_assigned_hosts";
  @SerializedName(SERIALIZED_NAME_INHERITANCE_ASSIGNED_HOSTS)
  @javax.annotation.Nullable
  private List<Inheritance2AssignedHost> inheritanceAssignedHosts = new ArrayList<>();

  public static final String SERIALIZED_NAME_INHERITANCE_SOURCES = "inheritance_sources";
  @SerializedName(SERIALIZED_NAME_INHERITANCE_SOURCES)
  @javax.annotation.Nullable
  private ConfigAuthZoneInheritance inheritanceSources;

  public static final String SERIALIZED_NAME_INITIAL_SOA_SERIAL = "initial_soa_serial";
  @SerializedName(SERIALIZED_NAME_INITIAL_SOA_SERIAL)
  @javax.annotation.Nullable
  private Long initialSoaSerial;

  public static final String SERIALIZED_NAME_INTERNAL_SECONDARIES = "internal_secondaries";
  @SerializedName(SERIALIZED_NAME_INTERNAL_SECONDARIES)
  @javax.annotation.Nullable
  private List<ConfigInternalSecondary> internalSecondaries = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAPPED_SUBNET = "mapped_subnet";
  @SerializedName(SERIALIZED_NAME_MAPPED_SUBNET)
  @javax.annotation.Nullable
  private String mappedSubnet;

  public static final String SERIALIZED_NAME_MAPPING = "mapping";
  @SerializedName(SERIALIZED_NAME_MAPPING)
  @javax.annotation.Nullable
  private String mapping;

  public static final String SERIALIZED_NAME_MAX_RECORDS_PER_TYPE = "max_records_per_type";
  @SerializedName(SERIALIZED_NAME_MAX_RECORDS_PER_TYPE)
  @javax.annotation.Nullable
  private Long maxRecordsPerType;

  public static final String SERIALIZED_NAME_MAX_TYPES_PER_NAME = "max_types_per_name";
  @SerializedName(SERIALIZED_NAME_MAX_TYPES_PER_NAME)
  @javax.annotation.Nullable
  private Long maxTypesPerName;

  public static final String SERIALIZED_NAME_NIOS_GRIDS_METADATA = "nios_grids_metadata";
  @SerializedName(SERIALIZED_NAME_NIOS_GRIDS_METADATA)
  @javax.annotation.Nullable
  private Object niosGridsMetadata;

  public static final String SERIALIZED_NAME_NOTIFY = "notify";
  @SerializedName(SERIALIZED_NAME_NOTIFY)
  @javax.annotation.Nullable
  private Boolean notify;

  public static final String SERIALIZED_NAME_NSGS = "nsgs";
  @SerializedName(SERIALIZED_NAME_NSGS)
  @javax.annotation.Nullable
  private List<String> nsgs = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  @javax.annotation.Nullable
  private String parent;

  public static final String SERIALIZED_NAME_PRIMARY_TYPE = "primary_type";
  @SerializedName(SERIALIZED_NAME_PRIMARY_TYPE)
  @javax.annotation.Nonnull
  private String primaryType;

  public static final String SERIALIZED_NAME_PROTOCOL_FQDN = "protocol_fqdn";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_FQDN)
  @javax.annotation.Nullable
  private String protocolFqdn;

  public static final String SERIALIZED_NAME_QUERY_ACL = "query_acl";
  @SerializedName(SERIALIZED_NAME_QUERY_ACL)
  @javax.annotation.Nullable
  private List<ConfigACLItem> queryAcl = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Object tags;

  public static final String SERIALIZED_NAME_TRANSFER_ACL = "transfer_acl";
  @SerializedName(SERIALIZED_NAME_TRANSFER_ACL)
  @javax.annotation.Nullable
  private List<ConfigACLItem> transferAcl = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATE_ACL = "update_acl";
  @SerializedName(SERIALIZED_NAME_UPDATE_ACL)
  @javax.annotation.Nullable
  private List<ConfigACLItem> updateAcl = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_USE_FORWARDERS_FOR_SUBZONES = "use_forwarders_for_subzones";
  @SerializedName(SERIALIZED_NAME_USE_FORWARDERS_FOR_SUBZONES)
  @javax.annotation.Nullable
  private Boolean useForwardersForSubzones;

  public static final String SERIALIZED_NAME_VIEW = "view";
  @SerializedName(SERIALIZED_NAME_VIEW)
  @javax.annotation.Nullable
  private String view;

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  @javax.annotation.Nullable
  private List<ConfigWarning> warnings = new ArrayList<>();

  public static final String SERIALIZED_NAME_ZONE_AUTHORITY = "zone_authority";
  @SerializedName(SERIALIZED_NAME_ZONE_AUTHORITY)
  @javax.annotation.Nullable
  private ConfigZoneAuthority zoneAuthority;

  public ConfigAuthZone() {
  }

  public ConfigAuthZone(
     OffsetDateTime createdAt, 
     List<ConfigExternalProvider> externalProviders, 
     String id, 
     List<Inheritance2AssignedHost> inheritanceAssignedHosts, 
     String mappedSubnet, 
     String mapping, 
     String protocolFqdn, 
     OffsetDateTime updatedAt, 
     List<ConfigWarning> warnings
  ) {
    this();
    this.createdAt = createdAt;
    this.externalProviders = externalProviders;
    this.id = id;
    this.inheritanceAssignedHosts = inheritanceAssignedHosts;
    this.mappedSubnet = mappedSubnet;
    this.mapping = mapping;
    this.protocolFqdn = protocolFqdn;
    this.updatedAt = updatedAt;
    this.warnings = warnings;
  }

  public ConfigAuthZone comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Optional. Comment for zone configuration.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  public ConfigAuthZone compartmentId(@javax.annotation.Nullable String compartmentId) {
    this.compartmentId = compartmentId;
    return this;
  }

  /**
   * The access view associated with the object. If no access view is associated with the object, the value defaults to empty.
   * @return compartmentId
   */
  @javax.annotation.Nullable
  public String getCompartmentId() {
    return compartmentId;
  }

  public void setCompartmentId(@javax.annotation.Nullable String compartmentId) {
    this.compartmentId = compartmentId;
  }


  /**
   * Time when the object has been created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public ConfigAuthZone disabled(@javax.annotation.Nullable Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Optional. _true_ to disable object. A disabled object is effectively non-existent when generating configuration.
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(@javax.annotation.Nullable Boolean disabled) {
    this.disabled = disabled;
  }


  public ConfigAuthZone externalPrimaries(@javax.annotation.Nullable List<ConfigExternalPrimary> externalPrimaries) {
    this.externalPrimaries = externalPrimaries;
    return this;
  }

  public ConfigAuthZone addExternalPrimariesItem(ConfigExternalPrimary externalPrimariesItem) {
    if (this.externalPrimaries == null) {
      this.externalPrimaries = new ArrayList<>();
    }
    this.externalPrimaries.add(externalPrimariesItem);
    return this;
  }

  /**
   * Optional. DNS primaries external to BloxOne DDI. Order is not significant.
   * @return externalPrimaries
   */
  @javax.annotation.Nullable
  public List<ConfigExternalPrimary> getExternalPrimaries() {
    return externalPrimaries;
  }

  public void setExternalPrimaries(@javax.annotation.Nullable List<ConfigExternalPrimary> externalPrimaries) {
    this.externalPrimaries = externalPrimaries;
  }


  /**
   * list of external providers for the auth zone.
   * @return externalProviders
   */
  @javax.annotation.Nullable
  public List<ConfigExternalProvider> getExternalProviders() {
    return externalProviders;
  }



  public ConfigAuthZone externalProvidersMetadata(@javax.annotation.Nullable Object externalProvidersMetadata) {
    this.externalProvidersMetadata = externalProvidersMetadata;
    return this;
  }

  /**
   * External DNS providers metadata.
   * @return externalProvidersMetadata
   */
  @javax.annotation.Nullable
  public Object getExternalProvidersMetadata() {
    return externalProvidersMetadata;
  }

  public void setExternalProvidersMetadata(@javax.annotation.Nullable Object externalProvidersMetadata) {
    this.externalProvidersMetadata = externalProvidersMetadata;
  }


  public ConfigAuthZone externalSecondaries(@javax.annotation.Nullable List<ConfigExternalSecondary> externalSecondaries) {
    this.externalSecondaries = externalSecondaries;
    return this;
  }

  public ConfigAuthZone addExternalSecondariesItem(ConfigExternalSecondary externalSecondariesItem) {
    if (this.externalSecondaries == null) {
      this.externalSecondaries = new ArrayList<>();
    }
    this.externalSecondaries.add(externalSecondariesItem);
    return this;
  }

  /**
   * DNS secondaries external to BloxOne DDI. Order is not significant.
   * @return externalSecondaries
   */
  @javax.annotation.Nullable
  public List<ConfigExternalSecondary> getExternalSecondaries() {
    return externalSecondaries;
  }

  public void setExternalSecondaries(@javax.annotation.Nullable List<ConfigExternalSecondary> externalSecondaries) {
    this.externalSecondaries = externalSecondaries;
  }


  public ConfigAuthZone fqdn(@javax.annotation.Nonnull String fqdn) {
    this.fqdn = fqdn;
    return this;
  }

  /**
   * Zone FQDN. The FQDN supplied at creation will be converted to canonical form.  Read-only after creation.
   * @return fqdn
   */
  @javax.annotation.Nonnull
  public String getFqdn() {
    return fqdn;
  }

  public void setFqdn(@javax.annotation.Nonnull String fqdn) {
    this.fqdn = fqdn;
  }


  public ConfigAuthZone gridPrimaries(@javax.annotation.Nullable List<ConfigMemberServer> gridPrimaries) {
    this.gridPrimaries = gridPrimaries;
    return this;
  }

  public ConfigAuthZone addGridPrimariesItem(ConfigMemberServer gridPrimariesItem) {
    if (this.gridPrimaries == null) {
      this.gridPrimaries = new ArrayList<>();
    }
    this.gridPrimaries.add(gridPrimariesItem);
    return this;
  }

  /**
   * Optional. The list of the NIOS Grid Primaries assigned to an AuthZone, only applicable for the NIOS Zones.
   * @return gridPrimaries
   */
  @javax.annotation.Nullable
  public List<ConfigMemberServer> getGridPrimaries() {
    return gridPrimaries;
  }

  public void setGridPrimaries(@javax.annotation.Nullable List<ConfigMemberServer> gridPrimaries) {
    this.gridPrimaries = gridPrimaries;
  }


  public ConfigAuthZone gridSecondaries(@javax.annotation.Nullable List<ConfigMemberServer> gridSecondaries) {
    this.gridSecondaries = gridSecondaries;
    return this;
  }

  public ConfigAuthZone addGridSecondariesItem(ConfigMemberServer gridSecondariesItem) {
    if (this.gridSecondaries == null) {
      this.gridSecondaries = new ArrayList<>();
    }
    this.gridSecondaries.add(gridSecondariesItem);
    return this;
  }

  /**
   * Optional. The list of the NIOS Grid Secondaries assigned to an AuthZone, only applicable for the NIOS Zones.
   * @return gridSecondaries
   */
  @javax.annotation.Nullable
  public List<ConfigMemberServer> getGridSecondaries() {
    return gridSecondaries;
  }

  public void setGridSecondaries(@javax.annotation.Nullable List<ConfigMemberServer> gridSecondaries) {
    this.gridSecondaries = gridSecondaries;
  }


  public ConfigAuthZone gssTsigEnabled(@javax.annotation.Nullable Boolean gssTsigEnabled) {
    this.gssTsigEnabled = gssTsigEnabled;
    return this;
  }

  /**
   * _gss_tsig_enabled_ enables/disables GSS-TSIG signed dynamic updates.  Defaults to _false_.
   * @return gssTsigEnabled
   */
  @javax.annotation.Nullable
  public Boolean getGssTsigEnabled() {
    return gssTsigEnabled;
  }

  public void setGssTsigEnabled(@javax.annotation.Nullable Boolean gssTsigEnabled) {
    this.gssTsigEnabled = gssTsigEnabled;
  }


  /**
   * The resource identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * The list of the inheritance assigned hosts of the object.
   * @return inheritanceAssignedHosts
   */
  @javax.annotation.Nullable
  public List<Inheritance2AssignedHost> getInheritanceAssignedHosts() {
    return inheritanceAssignedHosts;
  }



  public ConfigAuthZone inheritanceSources(@javax.annotation.Nullable ConfigAuthZoneInheritance inheritanceSources) {
    this.inheritanceSources = inheritanceSources;
    return this;
  }

  /**
   * Get inheritanceSources
   * @return inheritanceSources
   */
  @javax.annotation.Nullable
  public ConfigAuthZoneInheritance getInheritanceSources() {
    return inheritanceSources;
  }

  public void setInheritanceSources(@javax.annotation.Nullable ConfigAuthZoneInheritance inheritanceSources) {
    this.inheritanceSources = inheritanceSources;
  }


  public ConfigAuthZone initialSoaSerial(@javax.annotation.Nullable Long initialSoaSerial) {
    this.initialSoaSerial = initialSoaSerial;
    return this;
  }

  /**
   * On-create-only. SOA serial is allowed to be set when the authoritative zone is created.
   * @return initialSoaSerial
   */
  @javax.annotation.Nullable
  public Long getInitialSoaSerial() {
    return initialSoaSerial;
  }

  public void setInitialSoaSerial(@javax.annotation.Nullable Long initialSoaSerial) {
    this.initialSoaSerial = initialSoaSerial;
  }


  public ConfigAuthZone internalSecondaries(@javax.annotation.Nullable List<ConfigInternalSecondary> internalSecondaries) {
    this.internalSecondaries = internalSecondaries;
    return this;
  }

  public ConfigAuthZone addInternalSecondariesItem(ConfigInternalSecondary internalSecondariesItem) {
    if (this.internalSecondaries == null) {
      this.internalSecondaries = new ArrayList<>();
    }
    this.internalSecondaries.add(internalSecondariesItem);
    return this;
  }

  /**
   * Optional. BloxOne DDI hosts acting as internal secondaries. Order is not significant.
   * @return internalSecondaries
   */
  @javax.annotation.Nullable
  public List<ConfigInternalSecondary> getInternalSecondaries() {
    return internalSecondaries;
  }

  public void setInternalSecondaries(@javax.annotation.Nullable List<ConfigInternalSecondary> internalSecondaries) {
    this.internalSecondaries = internalSecondaries;
  }


  /**
   * Reverse zone network address in the following format: \&quot;ip-address/cidr\&quot;. Defaults to empty.
   * @return mappedSubnet
   */
  @javax.annotation.Nullable
  public String getMappedSubnet() {
    return mappedSubnet;
  }



  /**
   * Zone mapping type. Allowed values:  * _forward_,  * _ipv4_reverse_.  * _ipv6_reverse_.  Defaults to forward.
   * @return mapping
   */
  @javax.annotation.Nullable
  public String getMapping() {
    return mapping;
  }



  public ConfigAuthZone maxRecordsPerType(@javax.annotation.Nullable Long maxRecordsPerType) {
    this.maxRecordsPerType = maxRecordsPerType;
    return this;
  }

  /**
   * The maximum number of records that can be stored in an RRset (records of same name and type), to prevent a slowdown in query processing due to an excessive number of those RRsets. The limit is enforced when serving the zone on-prem, not at the time of record creation or update. Exceeding the limit will result in the zone failing to load or to be updated. If 0, it means there is no limit. Defauts to _2000_.
   * @return maxRecordsPerType
   */
  @javax.annotation.Nullable
  public Long getMaxRecordsPerType() {
    return maxRecordsPerType;
  }

  public void setMaxRecordsPerType(@javax.annotation.Nullable Long maxRecordsPerType) {
    this.maxRecordsPerType = maxRecordsPerType;
  }


  public ConfigAuthZone maxTypesPerName(@javax.annotation.Nullable Long maxTypesPerName) {
    this.maxTypesPerName = maxTypesPerName;
    return this;
  }

  /**
   * The maximum number of record types that can be stored for an owner name, to prevent a slowdown in query processing due to an excessive number of those records. The limit is enforced when serving the zone on-prem, not at the time of record creation or update. Exceeding the limit will result in the zone failing to load or to be updated. If 0, it means there is no limit. Defauts to _100_.
   * @return maxTypesPerName
   */
  @javax.annotation.Nullable
  public Long getMaxTypesPerName() {
    return maxTypesPerName;
  }

  public void setMaxTypesPerName(@javax.annotation.Nullable Long maxTypesPerName) {
    this.maxTypesPerName = maxTypesPerName;
  }


  public ConfigAuthZone niosGridsMetadata(@javax.annotation.Nullable Object niosGridsMetadata) {
    this.niosGridsMetadata = niosGridsMetadata;
    return this;
  }

  /**
   * NIOS Grids Metadata holds multiple NIOS grids data.
   * @return niosGridsMetadata
   */
  @javax.annotation.Nullable
  public Object getNiosGridsMetadata() {
    return niosGridsMetadata;
  }

  public void setNiosGridsMetadata(@javax.annotation.Nullable Object niosGridsMetadata) {
    this.niosGridsMetadata = niosGridsMetadata;
  }


  public ConfigAuthZone notify(@javax.annotation.Nullable Boolean notify) {
    this.notify = notify;
    return this;
  }

  /**
   * Also notify all external secondary DNS servers if enabled.  Defaults to _false_.
   * @return notify
   */
  @javax.annotation.Nullable
  public Boolean getNotify() {
    return notify;
  }

  public void setNotify(@javax.annotation.Nullable Boolean notify) {
    this.notify = notify;
  }


  public ConfigAuthZone nsgs(@javax.annotation.Nullable List<String> nsgs) {
    this.nsgs = nsgs;
    return this;
  }

  public ConfigAuthZone addNsgsItem(String nsgsItem) {
    if (this.nsgs == null) {
      this.nsgs = new ArrayList<>();
    }
    this.nsgs.add(nsgsItem);
    return this;
  }

  /**
   * The resource identifier.
   * @return nsgs
   */
  @javax.annotation.Nullable
  public List<String> getNsgs() {
    return nsgs;
  }

  public void setNsgs(@javax.annotation.Nullable List<String> nsgs) {
    this.nsgs = nsgs;
  }


  public ConfigAuthZone parent(@javax.annotation.Nullable String parent) {
    this.parent = parent;
    return this;
  }

  /**
   * The resource identifier.
   * @return parent
   */
  @javax.annotation.Nullable
  public String getParent() {
    return parent;
  }

  public void setParent(@javax.annotation.Nullable String parent) {
    this.parent = parent;
  }


  public ConfigAuthZone primaryType(@javax.annotation.Nonnull String primaryType) {
    this.primaryType = primaryType;
    return this;
  }

  /**
   * Primary type for an authoritative zone. Read only after creation. Allowed values:  * _external_: zone data owned by an external nameserver,  * _cloud_: zone data is owned by a BloxOne DDI host.
   * @return primaryType
   */
  @javax.annotation.Nonnull
  public String getPrimaryType() {
    return primaryType;
  }

  public void setPrimaryType(@javax.annotation.Nonnull String primaryType) {
    this.primaryType = primaryType;
  }


  /**
   * Zone FQDN in punycode.
   * @return protocolFqdn
   */
  @javax.annotation.Nullable
  public String getProtocolFqdn() {
    return protocolFqdn;
  }



  public ConfigAuthZone queryAcl(@javax.annotation.Nullable List<ConfigACLItem> queryAcl) {
    this.queryAcl = queryAcl;
    return this;
  }

  public ConfigAuthZone addQueryAclItem(ConfigACLItem queryAclItem) {
    if (this.queryAcl == null) {
      this.queryAcl = new ArrayList<>();
    }
    this.queryAcl.add(queryAclItem);
    return this;
  }

  /**
   * Optional. Clients must match this ACL to make authoritative queries. Also used for recursive queries if that ACL is unset.  Defaults to empty.
   * @return queryAcl
   */
  @javax.annotation.Nullable
  public List<ConfigACLItem> getQueryAcl() {
    return queryAcl;
  }

  public void setQueryAcl(@javax.annotation.Nullable List<ConfigACLItem> queryAcl) {
    this.queryAcl = queryAcl;
  }


  public ConfigAuthZone tags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Tagging specifics.
   * @return tags
   */
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
  }


  public ConfigAuthZone transferAcl(@javax.annotation.Nullable List<ConfigACLItem> transferAcl) {
    this.transferAcl = transferAcl;
    return this;
  }

  public ConfigAuthZone addTransferAclItem(ConfigACLItem transferAclItem) {
    if (this.transferAcl == null) {
      this.transferAcl = new ArrayList<>();
    }
    this.transferAcl.add(transferAclItem);
    return this;
  }

  /**
   * Optional. Clients must match this ACL to receive zone transfers.
   * @return transferAcl
   */
  @javax.annotation.Nullable
  public List<ConfigACLItem> getTransferAcl() {
    return transferAcl;
  }

  public void setTransferAcl(@javax.annotation.Nullable List<ConfigACLItem> transferAcl) {
    this.transferAcl = transferAcl;
  }


  public ConfigAuthZone updateAcl(@javax.annotation.Nullable List<ConfigACLItem> updateAcl) {
    this.updateAcl = updateAcl;
    return this;
  }

  public ConfigAuthZone addUpdateAclItem(ConfigACLItem updateAclItem) {
    if (this.updateAcl == null) {
      this.updateAcl = new ArrayList<>();
    }
    this.updateAcl.add(updateAclItem);
    return this;
  }

  /**
   * Optional. Specifies which hosts are allowed to submit Dynamic DNS updates for authoritative zones of _primary_type_ _cloud_.  Defaults to empty.
   * @return updateAcl
   */
  @javax.annotation.Nullable
  public List<ConfigACLItem> getUpdateAcl() {
    return updateAcl;
  }

  public void setUpdateAcl(@javax.annotation.Nullable List<ConfigACLItem> updateAcl) {
    this.updateAcl = updateAcl;
  }


  /**
   * Time when the object has been updated. Equals to _created_at_ if not updated after creation.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }



  public ConfigAuthZone useForwardersForSubzones(@javax.annotation.Nullable Boolean useForwardersForSubzones) {
    this.useForwardersForSubzones = useForwardersForSubzones;
    return this;
  }

  /**
   * Optional. Use default forwarders to resolve queries for subzones.  Defaults to _true_.
   * @return useForwardersForSubzones
   */
  @javax.annotation.Nullable
  public Boolean getUseForwardersForSubzones() {
    return useForwardersForSubzones;
  }

  public void setUseForwardersForSubzones(@javax.annotation.Nullable Boolean useForwardersForSubzones) {
    this.useForwardersForSubzones = useForwardersForSubzones;
  }


  public ConfigAuthZone view(@javax.annotation.Nullable String view) {
    this.view = view;
    return this;
  }

  /**
   * The resource identifier.
   * @return view
   */
  @javax.annotation.Nullable
  public String getView() {
    return view;
  }

  public void setView(@javax.annotation.Nullable String view) {
    this.view = view;
  }


  /**
   * The list of an auth zone warnings.
   * @return warnings
   */
  @javax.annotation.Nullable
  public List<ConfigWarning> getWarnings() {
    return warnings;
  }



  public ConfigAuthZone zoneAuthority(@javax.annotation.Nullable ConfigZoneAuthority zoneAuthority) {
    this.zoneAuthority = zoneAuthority;
    return this;
  }

  /**
   * Get zoneAuthority
   * @return zoneAuthority
   */
  @javax.annotation.Nullable
  public ConfigZoneAuthority getZoneAuthority() {
    return zoneAuthority;
  }

  public void setZoneAuthority(@javax.annotation.Nullable ConfigZoneAuthority zoneAuthority) {
    this.zoneAuthority = zoneAuthority;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigAuthZone configAuthZone = (ConfigAuthZone) o;
    return Objects.equals(this.comment, configAuthZone.comment) &&
        Objects.equals(this.compartmentId, configAuthZone.compartmentId) &&
        Objects.equals(this.createdAt, configAuthZone.createdAt) &&
        Objects.equals(this.disabled, configAuthZone.disabled) &&
        Objects.equals(this.externalPrimaries, configAuthZone.externalPrimaries) &&
        Objects.equals(this.externalProviders, configAuthZone.externalProviders) &&
        Objects.equals(this.externalProvidersMetadata, configAuthZone.externalProvidersMetadata) &&
        Objects.equals(this.externalSecondaries, configAuthZone.externalSecondaries) &&
        Objects.equals(this.fqdn, configAuthZone.fqdn) &&
        Objects.equals(this.gridPrimaries, configAuthZone.gridPrimaries) &&
        Objects.equals(this.gridSecondaries, configAuthZone.gridSecondaries) &&
        Objects.equals(this.gssTsigEnabled, configAuthZone.gssTsigEnabled) &&
        Objects.equals(this.id, configAuthZone.id) &&
        Objects.equals(this.inheritanceAssignedHosts, configAuthZone.inheritanceAssignedHosts) &&
        Objects.equals(this.inheritanceSources, configAuthZone.inheritanceSources) &&
        Objects.equals(this.initialSoaSerial, configAuthZone.initialSoaSerial) &&
        Objects.equals(this.internalSecondaries, configAuthZone.internalSecondaries) &&
        Objects.equals(this.mappedSubnet, configAuthZone.mappedSubnet) &&
        Objects.equals(this.mapping, configAuthZone.mapping) &&
        Objects.equals(this.maxRecordsPerType, configAuthZone.maxRecordsPerType) &&
        Objects.equals(this.maxTypesPerName, configAuthZone.maxTypesPerName) &&
        Objects.equals(this.niosGridsMetadata, configAuthZone.niosGridsMetadata) &&
        Objects.equals(this.notify, configAuthZone.notify) &&
        Objects.equals(this.nsgs, configAuthZone.nsgs) &&
        Objects.equals(this.parent, configAuthZone.parent) &&
        Objects.equals(this.primaryType, configAuthZone.primaryType) &&
        Objects.equals(this.protocolFqdn, configAuthZone.protocolFqdn) &&
        Objects.equals(this.queryAcl, configAuthZone.queryAcl) &&
        Objects.equals(this.tags, configAuthZone.tags) &&
        Objects.equals(this.transferAcl, configAuthZone.transferAcl) &&
        Objects.equals(this.updateAcl, configAuthZone.updateAcl) &&
        Objects.equals(this.updatedAt, configAuthZone.updatedAt) &&
        Objects.equals(this.useForwardersForSubzones, configAuthZone.useForwardersForSubzones) &&
        Objects.equals(this.view, configAuthZone.view) &&
        Objects.equals(this.warnings, configAuthZone.warnings) &&
        Objects.equals(this.zoneAuthority, configAuthZone.zoneAuthority);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comment, compartmentId, createdAt, disabled, externalPrimaries, externalProviders, externalProvidersMetadata, externalSecondaries, fqdn, gridPrimaries, gridSecondaries, gssTsigEnabled, id, inheritanceAssignedHosts, inheritanceSources, initialSoaSerial, internalSecondaries, mappedSubnet, mapping, maxRecordsPerType, maxTypesPerName, niosGridsMetadata, notify, nsgs, parent, primaryType, protocolFqdn, queryAcl, tags, transferAcl, updateAcl, updatedAt, useForwardersForSubzones, view, warnings, zoneAuthority);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigAuthZone {\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    compartmentId: ").append(toIndentedString(compartmentId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    externalPrimaries: ").append(toIndentedString(externalPrimaries)).append("\n");
    sb.append("    externalProviders: ").append(toIndentedString(externalProviders)).append("\n");
    sb.append("    externalProvidersMetadata: ").append(toIndentedString(externalProvidersMetadata)).append("\n");
    sb.append("    externalSecondaries: ").append(toIndentedString(externalSecondaries)).append("\n");
    sb.append("    fqdn: ").append(toIndentedString(fqdn)).append("\n");
    sb.append("    gridPrimaries: ").append(toIndentedString(gridPrimaries)).append("\n");
    sb.append("    gridSecondaries: ").append(toIndentedString(gridSecondaries)).append("\n");
    sb.append("    gssTsigEnabled: ").append(toIndentedString(gssTsigEnabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inheritanceAssignedHosts: ").append(toIndentedString(inheritanceAssignedHosts)).append("\n");
    sb.append("    inheritanceSources: ").append(toIndentedString(inheritanceSources)).append("\n");
    sb.append("    initialSoaSerial: ").append(toIndentedString(initialSoaSerial)).append("\n");
    sb.append("    internalSecondaries: ").append(toIndentedString(internalSecondaries)).append("\n");
    sb.append("    mappedSubnet: ").append(toIndentedString(mappedSubnet)).append("\n");
    sb.append("    mapping: ").append(toIndentedString(mapping)).append("\n");
    sb.append("    maxRecordsPerType: ").append(toIndentedString(maxRecordsPerType)).append("\n");
    sb.append("    maxTypesPerName: ").append(toIndentedString(maxTypesPerName)).append("\n");
    sb.append("    niosGridsMetadata: ").append(toIndentedString(niosGridsMetadata)).append("\n");
    sb.append("    notify: ").append(toIndentedString(notify)).append("\n");
    sb.append("    nsgs: ").append(toIndentedString(nsgs)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    primaryType: ").append(toIndentedString(primaryType)).append("\n");
    sb.append("    protocolFqdn: ").append(toIndentedString(protocolFqdn)).append("\n");
    sb.append("    queryAcl: ").append(toIndentedString(queryAcl)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    transferAcl: ").append(toIndentedString(transferAcl)).append("\n");
    sb.append("    updateAcl: ").append(toIndentedString(updateAcl)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    useForwardersForSubzones: ").append(toIndentedString(useForwardersForSubzones)).append("\n");
    sb.append("    view: ").append(toIndentedString(view)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("    zoneAuthority: ").append(toIndentedString(zoneAuthority)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comment");
    openapiFields.add("compartment_id");
    openapiFields.add("created_at");
    openapiFields.add("disabled");
    openapiFields.add("external_primaries");
    openapiFields.add("external_providers");
    openapiFields.add("external_providers_metadata");
    openapiFields.add("external_secondaries");
    openapiFields.add("fqdn");
    openapiFields.add("grid_primaries");
    openapiFields.add("grid_secondaries");
    openapiFields.add("gss_tsig_enabled");
    openapiFields.add("id");
    openapiFields.add("inheritance_assigned_hosts");
    openapiFields.add("inheritance_sources");
    openapiFields.add("initial_soa_serial");
    openapiFields.add("internal_secondaries");
    openapiFields.add("mapped_subnet");
    openapiFields.add("mapping");
    openapiFields.add("max_records_per_type");
    openapiFields.add("max_types_per_name");
    openapiFields.add("nios_grids_metadata");
    openapiFields.add("notify");
    openapiFields.add("nsgs");
    openapiFields.add("parent");
    openapiFields.add("primary_type");
    openapiFields.add("protocol_fqdn");
    openapiFields.add("query_acl");
    openapiFields.add("tags");
    openapiFields.add("transfer_acl");
    openapiFields.add("update_acl");
    openapiFields.add("updated_at");
    openapiFields.add("use_forwarders_for_subzones");
    openapiFields.add("view");
    openapiFields.add("warnings");
    openapiFields.add("zone_authority");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fqdn");
    openapiRequiredFields.add("primary_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigAuthZone
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigAuthZone.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigAuthZone is not found in the empty JSON string", ConfigAuthZone.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigAuthZone.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigAuthZone` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConfigAuthZone.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("compartment_id") != null && !jsonObj.get("compartment_id").isJsonNull()) && !jsonObj.get("compartment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compartment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compartment_id").toString()));
      }
      if (jsonObj.get("external_primaries") != null && !jsonObj.get("external_primaries").isJsonNull()) {
        JsonArray jsonArrayexternalPrimaries = jsonObj.getAsJsonArray("external_primaries");
        if (jsonArrayexternalPrimaries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("external_primaries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `external_primaries` to be an array in the JSON string but got `%s`", jsonObj.get("external_primaries").toString()));
          }

          // validate the optional field `external_primaries` (array)
          for (int i = 0; i < jsonArrayexternalPrimaries.size(); i++) {
            ConfigExternalPrimary.validateJsonElement(jsonArrayexternalPrimaries.get(i));
          };
        }
      }
      if (jsonObj.get("external_providers") != null && !jsonObj.get("external_providers").isJsonNull()) {
        JsonArray jsonArrayexternalProviders = jsonObj.getAsJsonArray("external_providers");
        if (jsonArrayexternalProviders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("external_providers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `external_providers` to be an array in the JSON string but got `%s`", jsonObj.get("external_providers").toString()));
          }

          // validate the optional field `external_providers` (array)
          for (int i = 0; i < jsonArrayexternalProviders.size(); i++) {
            ConfigExternalProvider.validateJsonElement(jsonArrayexternalProviders.get(i));
          };
        }
      }
      if (jsonObj.get("external_secondaries") != null && !jsonObj.get("external_secondaries").isJsonNull()) {
        JsonArray jsonArrayexternalSecondaries = jsonObj.getAsJsonArray("external_secondaries");
        if (jsonArrayexternalSecondaries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("external_secondaries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `external_secondaries` to be an array in the JSON string but got `%s`", jsonObj.get("external_secondaries").toString()));
          }

          // validate the optional field `external_secondaries` (array)
          for (int i = 0; i < jsonArrayexternalSecondaries.size(); i++) {
            ConfigExternalSecondary.validateJsonElement(jsonArrayexternalSecondaries.get(i));
          };
        }
      }
      if (!jsonObj.get("fqdn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fqdn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fqdn").toString()));
      }
      if (jsonObj.get("grid_primaries") != null && !jsonObj.get("grid_primaries").isJsonNull()) {
        JsonArray jsonArraygridPrimaries = jsonObj.getAsJsonArray("grid_primaries");
        if (jsonArraygridPrimaries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("grid_primaries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `grid_primaries` to be an array in the JSON string but got `%s`", jsonObj.get("grid_primaries").toString()));
          }

          // validate the optional field `grid_primaries` (array)
          for (int i = 0; i < jsonArraygridPrimaries.size(); i++) {
            ConfigMemberServer.validateJsonElement(jsonArraygridPrimaries.get(i));
          };
        }
      }
      if (jsonObj.get("grid_secondaries") != null && !jsonObj.get("grid_secondaries").isJsonNull()) {
        JsonArray jsonArraygridSecondaries = jsonObj.getAsJsonArray("grid_secondaries");
        if (jsonArraygridSecondaries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("grid_secondaries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `grid_secondaries` to be an array in the JSON string but got `%s`", jsonObj.get("grid_secondaries").toString()));
          }

          // validate the optional field `grid_secondaries` (array)
          for (int i = 0; i < jsonArraygridSecondaries.size(); i++) {
            ConfigMemberServer.validateJsonElement(jsonArraygridSecondaries.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("inheritance_assigned_hosts") != null && !jsonObj.get("inheritance_assigned_hosts").isJsonNull()) {
        JsonArray jsonArrayinheritanceAssignedHosts = jsonObj.getAsJsonArray("inheritance_assigned_hosts");
        if (jsonArrayinheritanceAssignedHosts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inheritance_assigned_hosts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inheritance_assigned_hosts` to be an array in the JSON string but got `%s`", jsonObj.get("inheritance_assigned_hosts").toString()));
          }

          // validate the optional field `inheritance_assigned_hosts` (array)
          for (int i = 0; i < jsonArrayinheritanceAssignedHosts.size(); i++) {
            Inheritance2AssignedHost.validateJsonElement(jsonArrayinheritanceAssignedHosts.get(i));
          };
        }
      }
      // validate the optional field `inheritance_sources`
      if (jsonObj.get("inheritance_sources") != null && !jsonObj.get("inheritance_sources").isJsonNull()) {
        ConfigAuthZoneInheritance.validateJsonElement(jsonObj.get("inheritance_sources"));
      }
      if (jsonObj.get("internal_secondaries") != null && !jsonObj.get("internal_secondaries").isJsonNull()) {
        JsonArray jsonArrayinternalSecondaries = jsonObj.getAsJsonArray("internal_secondaries");
        if (jsonArrayinternalSecondaries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("internal_secondaries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `internal_secondaries` to be an array in the JSON string but got `%s`", jsonObj.get("internal_secondaries").toString()));
          }

          // validate the optional field `internal_secondaries` (array)
          for (int i = 0; i < jsonArrayinternalSecondaries.size(); i++) {
            ConfigInternalSecondary.validateJsonElement(jsonArrayinternalSecondaries.get(i));
          };
        }
      }
      if ((jsonObj.get("mapped_subnet") != null && !jsonObj.get("mapped_subnet").isJsonNull()) && !jsonObj.get("mapped_subnet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mapped_subnet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mapped_subnet").toString()));
      }
      if ((jsonObj.get("mapping") != null && !jsonObj.get("mapping").isJsonNull()) && !jsonObj.get("mapping").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mapping` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mapping").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("nsgs") != null && !jsonObj.get("nsgs").isJsonNull() && !jsonObj.get("nsgs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nsgs` to be an array in the JSON string but got `%s`", jsonObj.get("nsgs").toString()));
      }
      if ((jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) && !jsonObj.get("parent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent").toString()));
      }
      if (!jsonObj.get("primary_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_type").toString()));
      }
      if ((jsonObj.get("protocol_fqdn") != null && !jsonObj.get("protocol_fqdn").isJsonNull()) && !jsonObj.get("protocol_fqdn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol_fqdn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol_fqdn").toString()));
      }
      if (jsonObj.get("query_acl") != null && !jsonObj.get("query_acl").isJsonNull()) {
        JsonArray jsonArrayqueryAcl = jsonObj.getAsJsonArray("query_acl");
        if (jsonArrayqueryAcl != null) {
          // ensure the json data is an array
          if (!jsonObj.get("query_acl").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `query_acl` to be an array in the JSON string but got `%s`", jsonObj.get("query_acl").toString()));
          }

          // validate the optional field `query_acl` (array)
          for (int i = 0; i < jsonArrayqueryAcl.size(); i++) {
            ConfigACLItem.validateJsonElement(jsonArrayqueryAcl.get(i));
          };
        }
      }
      if (jsonObj.get("transfer_acl") != null && !jsonObj.get("transfer_acl").isJsonNull()) {
        JsonArray jsonArraytransferAcl = jsonObj.getAsJsonArray("transfer_acl");
        if (jsonArraytransferAcl != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transfer_acl").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transfer_acl` to be an array in the JSON string but got `%s`", jsonObj.get("transfer_acl").toString()));
          }

          // validate the optional field `transfer_acl` (array)
          for (int i = 0; i < jsonArraytransferAcl.size(); i++) {
            ConfigACLItem.validateJsonElement(jsonArraytransferAcl.get(i));
          };
        }
      }
      if (jsonObj.get("update_acl") != null && !jsonObj.get("update_acl").isJsonNull()) {
        JsonArray jsonArrayupdateAcl = jsonObj.getAsJsonArray("update_acl");
        if (jsonArrayupdateAcl != null) {
          // ensure the json data is an array
          if (!jsonObj.get("update_acl").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `update_acl` to be an array in the JSON string but got `%s`", jsonObj.get("update_acl").toString()));
          }

          // validate the optional field `update_acl` (array)
          for (int i = 0; i < jsonArrayupdateAcl.size(); i++) {
            ConfigACLItem.validateJsonElement(jsonArrayupdateAcl.get(i));
          };
        }
      }
      if ((jsonObj.get("view") != null && !jsonObj.get("view").isJsonNull()) && !jsonObj.get("view").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `view` to be a primitive type in the JSON string but got `%s`", jsonObj.get("view").toString()));
      }
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
          }

          // validate the optional field `warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            ConfigWarning.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
      // validate the optional field `zone_authority`
      if (jsonObj.get("zone_authority") != null && !jsonObj.get("zone_authority").isJsonNull()) {
        ConfigZoneAuthority.validateJsonElement(jsonObj.get("zone_authority"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigAuthZone.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigAuthZone' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigAuthZone> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigAuthZone.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigAuthZone>() {
           @Override
           public void write(JsonWriter out, ConfigAuthZone value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigAuthZone read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigAuthZone given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigAuthZone
   * @throws IOException if the JSON string is invalid with respect to ConfigAuthZone
   */
  public static ConfigAuthZone fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigAuthZone.class);
  }

  /**
   * Convert an instance of ConfigAuthZone to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

