/*
 * DNS Configuration API
 * The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for Fault Tolerant Caching (FTC).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:28.384903+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class ConfigFTCConfig {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  @javax.annotation.Nullable
  private Boolean enabled;

  public static final String SERIALIZED_NAME_EXPIRED_RECORD_TIMEOUT = "expired_record_timeout";
  @SerializedName(SERIALIZED_NAME_EXPIRED_RECORD_TIMEOUT)
  @javax.annotation.Nullable
  private Long expiredRecordTimeout;

  public static final String SERIALIZED_NAME_EXPIRED_RECORD_TTL = "expired_record_ttl";
  @SerializedName(SERIALIZED_NAME_EXPIRED_RECORD_TTL)
  @javax.annotation.Nullable
  private Long expiredRecordTtl;

  public ConfigFTCConfig() {
  }

  public ConfigFTCConfig enabled(@javax.annotation.Nullable Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * _enabled_ enables the returning of “stale” cached answers when the name servers for a zone are not answering.  Defaults to _false_.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(@javax.annotation.Nullable Boolean enabled) {
    this.enabled = enabled;
  }


  public ConfigFTCConfig expiredRecordTimeout(@javax.annotation.Nullable Long expiredRecordTimeout) {
    this.expiredRecordTimeout = expiredRecordTimeout;
    return this;
  }

  /**
   * _expired_record_timeout_ specifies the maximum time that the server retains records past their normal expiry, to return them as stale records Ignored if _enabled_ is _false_.  Defaults to 86400 (1 day).
   * @return expiredRecordTimeout
   */
  @javax.annotation.Nullable
  public Long getExpiredRecordTimeout() {
    return expiredRecordTimeout;
  }

  public void setExpiredRecordTimeout(@javax.annotation.Nullable Long expiredRecordTimeout) {
    this.expiredRecordTimeout = expiredRecordTimeout;
  }


  public ConfigFTCConfig expiredRecordTtl(@javax.annotation.Nullable Long expiredRecordTtl) {
    this.expiredRecordTtl = expiredRecordTtl;
    return this;
  }

  /**
   * _expired_record_ttl_ specifies the time to live (TTL) to be returned on stale answers, in seconds. Ignored if _enabled_ is _false_.  Defaults to 5.
   * @return expiredRecordTtl
   */
  @javax.annotation.Nullable
  public Long getExpiredRecordTtl() {
    return expiredRecordTtl;
  }

  public void setExpiredRecordTtl(@javax.annotation.Nullable Long expiredRecordTtl) {
    this.expiredRecordTtl = expiredRecordTtl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigFTCConfig configFTCConfig = (ConfigFTCConfig) o;
    return Objects.equals(this.enabled, configFTCConfig.enabled) &&
        Objects.equals(this.expiredRecordTimeout, configFTCConfig.expiredRecordTimeout) &&
        Objects.equals(this.expiredRecordTtl, configFTCConfig.expiredRecordTtl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, expiredRecordTimeout, expiredRecordTtl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigFTCConfig {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    expiredRecordTimeout: ").append(toIndentedString(expiredRecordTimeout)).append("\n");
    sb.append("    expiredRecordTtl: ").append(toIndentedString(expiredRecordTtl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("expired_record_timeout");
    openapiFields.add("expired_record_ttl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigFTCConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigFTCConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigFTCConfig is not found in the empty JSON string", ConfigFTCConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigFTCConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigFTCConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigFTCConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigFTCConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigFTCConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigFTCConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigFTCConfig>() {
           @Override
           public void write(JsonWriter out, ConfigFTCConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigFTCConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigFTCConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigFTCConfig
   * @throws IOException if the JSON string is invalid with respect to ConfigFTCConfig
   */
  public static ConfigFTCConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigFTCConfig.class);
  }

  /**
   * Convert an instance of ConfigFTCConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

