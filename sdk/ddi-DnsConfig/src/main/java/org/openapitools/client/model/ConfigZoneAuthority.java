/*
 * DNS Configuration API
 * The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Construct for fields: _refresh_, _retry_, _expire_, _default_ttl_, _negative_ttl_, _rname_, _protocol_rname_, _mname_, _protocol_mname_, _use_default_mname_.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:28.384903+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class ConfigZoneAuthority {
  public static final String SERIALIZED_NAME_DEFAULT_TTL = "default_ttl";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TTL)
  @javax.annotation.Nullable
  private Long defaultTtl;

  public static final String SERIALIZED_NAME_EXPIRE = "expire";
  @SerializedName(SERIALIZED_NAME_EXPIRE)
  @javax.annotation.Nullable
  private Long expire;

  public static final String SERIALIZED_NAME_MNAME = "mname";
  @SerializedName(SERIALIZED_NAME_MNAME)
  @javax.annotation.Nullable
  private String mname;

  public static final String SERIALIZED_NAME_NEGATIVE_TTL = "negative_ttl";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_TTL)
  @javax.annotation.Nullable
  private Long negativeTtl;

  public static final String SERIALIZED_NAME_PROTOCOL_MNAME = "protocol_mname";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_MNAME)
  @javax.annotation.Nullable
  private String protocolMname;

  public static final String SERIALIZED_NAME_PROTOCOL_RNAME = "protocol_rname";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_RNAME)
  @javax.annotation.Nullable
  private String protocolRname;

  public static final String SERIALIZED_NAME_REFRESH = "refresh";
  @SerializedName(SERIALIZED_NAME_REFRESH)
  @javax.annotation.Nullable
  private Long refresh;

  public static final String SERIALIZED_NAME_RETRY = "retry";
  @SerializedName(SERIALIZED_NAME_RETRY)
  @javax.annotation.Nullable
  private Long retry;

  public static final String SERIALIZED_NAME_RNAME = "rname";
  @SerializedName(SERIALIZED_NAME_RNAME)
  @javax.annotation.Nullable
  private String rname;

  public static final String SERIALIZED_NAME_USE_DEFAULT_MNAME = "use_default_mname";
  @SerializedName(SERIALIZED_NAME_USE_DEFAULT_MNAME)
  @javax.annotation.Nullable
  private Boolean useDefaultMname;

  public ConfigZoneAuthority() {
  }

  public ConfigZoneAuthority(
     String protocolMname, 
     String protocolRname
  ) {
    this();
    this.protocolMname = protocolMname;
    this.protocolRname = protocolRname;
  }

  public ConfigZoneAuthority defaultTtl(@javax.annotation.Nullable Long defaultTtl) {
    this.defaultTtl = defaultTtl;
    return this;
  }

  /**
   * Optional. ZoneAuthority default ttl for resource records in zone (value in seconds).  Defaults to 28800.
   * @return defaultTtl
   */
  @javax.annotation.Nullable
  public Long getDefaultTtl() {
    return defaultTtl;
  }

  public void setDefaultTtl(@javax.annotation.Nullable Long defaultTtl) {
    this.defaultTtl = defaultTtl;
  }


  public ConfigZoneAuthority expire(@javax.annotation.Nullable Long expire) {
    this.expire = expire;
    return this;
  }

  /**
   * Optional. ZoneAuthority expire time in seconds.  Defaults to 2419200.
   * @return expire
   */
  @javax.annotation.Nullable
  public Long getExpire() {
    return expire;
  }

  public void setExpire(@javax.annotation.Nullable Long expire) {
    this.expire = expire;
  }


  public ConfigZoneAuthority mname(@javax.annotation.Nullable String mname) {
    this.mname = mname;
    return this;
  }

  /**
   * Defaults to empty.
   * @return mname
   */
  @javax.annotation.Nullable
  public String getMname() {
    return mname;
  }

  public void setMname(@javax.annotation.Nullable String mname) {
    this.mname = mname;
  }


  public ConfigZoneAuthority negativeTtl(@javax.annotation.Nullable Long negativeTtl) {
    this.negativeTtl = negativeTtl;
    return this;
  }

  /**
   * Optional. ZoneAuthority negative caching (minimum) ttl in seconds.  Defaults to 900.
   * @return negativeTtl
   */
  @javax.annotation.Nullable
  public Long getNegativeTtl() {
    return negativeTtl;
  }

  public void setNegativeTtl(@javax.annotation.Nullable Long negativeTtl) {
    this.negativeTtl = negativeTtl;
  }


  /**
   * Optional. ZoneAuthority master name server in punycode.  Defaults to empty.
   * @return protocolMname
   */
  @javax.annotation.Nullable
  public String getProtocolMname() {
    return protocolMname;
  }



  /**
   * Optional. A domain name which specifies the mailbox of the person responsible for this zone.  Defaults to empty.
   * @return protocolRname
   */
  @javax.annotation.Nullable
  public String getProtocolRname() {
    return protocolRname;
  }



  public ConfigZoneAuthority refresh(@javax.annotation.Nullable Long refresh) {
    this.refresh = refresh;
    return this;
  }

  /**
   * Optional. ZoneAuthority refresh.  Defaults to 10800.
   * @return refresh
   */
  @javax.annotation.Nullable
  public Long getRefresh() {
    return refresh;
  }

  public void setRefresh(@javax.annotation.Nullable Long refresh) {
    this.refresh = refresh;
  }


  public ConfigZoneAuthority retry(@javax.annotation.Nullable Long retry) {
    this.retry = retry;
    return this;
  }

  /**
   * Optional. ZoneAuthority retry.  Defaults to 3600.
   * @return retry
   */
  @javax.annotation.Nullable
  public Long getRetry() {
    return retry;
  }

  public void setRetry(@javax.annotation.Nullable Long retry) {
    this.retry = retry;
  }


  public ConfigZoneAuthority rname(@javax.annotation.Nullable String rname) {
    this.rname = rname;
    return this;
  }

  /**
   * Optional. ZoneAuthority rname.  Defaults to empty.
   * @return rname
   */
  @javax.annotation.Nullable
  public String getRname() {
    return rname;
  }

  public void setRname(@javax.annotation.Nullable String rname) {
    this.rname = rname;
  }


  public ConfigZoneAuthority useDefaultMname(@javax.annotation.Nullable Boolean useDefaultMname) {
    this.useDefaultMname = useDefaultMname;
    return this;
  }

  /**
   * Optional. Use default value for master name server.  Defaults to true.
   * @return useDefaultMname
   */
  @javax.annotation.Nullable
  public Boolean getUseDefaultMname() {
    return useDefaultMname;
  }

  public void setUseDefaultMname(@javax.annotation.Nullable Boolean useDefaultMname) {
    this.useDefaultMname = useDefaultMname;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigZoneAuthority configZoneAuthority = (ConfigZoneAuthority) o;
    return Objects.equals(this.defaultTtl, configZoneAuthority.defaultTtl) &&
        Objects.equals(this.expire, configZoneAuthority.expire) &&
        Objects.equals(this.mname, configZoneAuthority.mname) &&
        Objects.equals(this.negativeTtl, configZoneAuthority.negativeTtl) &&
        Objects.equals(this.protocolMname, configZoneAuthority.protocolMname) &&
        Objects.equals(this.protocolRname, configZoneAuthority.protocolRname) &&
        Objects.equals(this.refresh, configZoneAuthority.refresh) &&
        Objects.equals(this.retry, configZoneAuthority.retry) &&
        Objects.equals(this.rname, configZoneAuthority.rname) &&
        Objects.equals(this.useDefaultMname, configZoneAuthority.useDefaultMname);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultTtl, expire, mname, negativeTtl, protocolMname, protocolRname, refresh, retry, rname, useDefaultMname);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigZoneAuthority {\n");
    sb.append("    defaultTtl: ").append(toIndentedString(defaultTtl)).append("\n");
    sb.append("    expire: ").append(toIndentedString(expire)).append("\n");
    sb.append("    mname: ").append(toIndentedString(mname)).append("\n");
    sb.append("    negativeTtl: ").append(toIndentedString(negativeTtl)).append("\n");
    sb.append("    protocolMname: ").append(toIndentedString(protocolMname)).append("\n");
    sb.append("    protocolRname: ").append(toIndentedString(protocolRname)).append("\n");
    sb.append("    refresh: ").append(toIndentedString(refresh)).append("\n");
    sb.append("    retry: ").append(toIndentedString(retry)).append("\n");
    sb.append("    rname: ").append(toIndentedString(rname)).append("\n");
    sb.append("    useDefaultMname: ").append(toIndentedString(useDefaultMname)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("default_ttl");
    openapiFields.add("expire");
    openapiFields.add("mname");
    openapiFields.add("negative_ttl");
    openapiFields.add("protocol_mname");
    openapiFields.add("protocol_rname");
    openapiFields.add("refresh");
    openapiFields.add("retry");
    openapiFields.add("rname");
    openapiFields.add("use_default_mname");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigZoneAuthority
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigZoneAuthority.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigZoneAuthority is not found in the empty JSON string", ConfigZoneAuthority.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigZoneAuthority.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigZoneAuthority` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("mname") != null && !jsonObj.get("mname").isJsonNull()) && !jsonObj.get("mname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mname").toString()));
      }
      if ((jsonObj.get("protocol_mname") != null && !jsonObj.get("protocol_mname").isJsonNull()) && !jsonObj.get("protocol_mname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol_mname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol_mname").toString()));
      }
      if ((jsonObj.get("protocol_rname") != null && !jsonObj.get("protocol_rname").isJsonNull()) && !jsonObj.get("protocol_rname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol_rname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol_rname").toString()));
      }
      if ((jsonObj.get("rname") != null && !jsonObj.get("rname").isJsonNull()) && !jsonObj.get("rname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rname").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigZoneAuthority.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigZoneAuthority' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigZoneAuthority> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigZoneAuthority.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigZoneAuthority>() {
           @Override
           public void write(JsonWriter out, ConfigZoneAuthority value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigZoneAuthority read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigZoneAuthority given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigZoneAuthority
   * @throws IOException if the JSON string is invalid with respect to ConfigZoneAuthority
   */
  public static ConfigZoneAuthority fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigZoneAuthority.class);
  }

  /**
   * Convert an instance of ConfigZoneAuthority to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

