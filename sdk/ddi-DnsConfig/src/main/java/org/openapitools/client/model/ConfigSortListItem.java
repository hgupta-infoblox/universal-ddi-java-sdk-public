/*
 * DNS Configuration API
 * The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Element in a SortList.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:28.384903+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class ConfigSortListItem {
  public static final String SERIALIZED_NAME_ACL = "acl";
  @SerializedName(SERIALIZED_NAME_ACL)
  @javax.annotation.Nullable
  private String acl;

  public static final String SERIALIZED_NAME_ELEMENT = "element";
  @SerializedName(SERIALIZED_NAME_ELEMENT)
  @javax.annotation.Nonnull
  private String element;

  public static final String SERIALIZED_NAME_PRIORITIZED_NETWORKS = "prioritized_networks";
  @SerializedName(SERIALIZED_NAME_PRIORITIZED_NETWORKS)
  @javax.annotation.Nullable
  private List<String> prioritizedNetworks = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  @javax.annotation.Nullable
  private String source;

  public ConfigSortListItem() {
  }

  public ConfigSortListItem acl(@javax.annotation.Nullable String acl) {
    this.acl = acl;
    return this;
  }

  /**
   * The resource identifier.
   * @return acl
   */
  @javax.annotation.Nullable
  public String getAcl() {
    return acl;
  }

  public void setAcl(@javax.annotation.Nullable String acl) {
    this.acl = acl;
  }


  public ConfigSortListItem element(@javax.annotation.Nonnull String element) {
    this.element = element;
    return this;
  }

  /**
   * Type of SortList item.  Allowed values:  * _any_,  * _ip_,  * _acl_,
   * @return element
   */
  @javax.annotation.Nonnull
  public String getElement() {
    return element;
  }

  public void setElement(@javax.annotation.Nonnull String element) {
    this.element = element;
  }


  public ConfigSortListItem prioritizedNetworks(@javax.annotation.Nullable List<String> prioritizedNetworks) {
    this.prioritizedNetworks = prioritizedNetworks;
    return this;
  }

  public ConfigSortListItem addPrioritizedNetworksItem(String prioritizedNetworksItem) {
    if (this.prioritizedNetworks == null) {
      this.prioritizedNetworks = new ArrayList<>();
    }
    this.prioritizedNetworks.add(prioritizedNetworksItem);
    return this;
  }

  /**
   * Optional. The prioritized networks. If empty, the value of _source_ or networks from _acl_ is used.
   * @return prioritizedNetworks
   */
  @javax.annotation.Nullable
  public List<String> getPrioritizedNetworks() {
    return prioritizedNetworks;
  }

  public void setPrioritizedNetworks(@javax.annotation.Nullable List<String> prioritizedNetworks) {
    this.prioritizedNetworks = prioritizedNetworks;
  }


  public ConfigSortListItem source(@javax.annotation.Nullable String source) {
    this.source = source;
    return this;
  }

  /**
   * Must be empty if _element_ is not _ip_.
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(@javax.annotation.Nullable String source) {
    this.source = source;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigSortListItem configSortListItem = (ConfigSortListItem) o;
    return Objects.equals(this.acl, configSortListItem.acl) &&
        Objects.equals(this.element, configSortListItem.element) &&
        Objects.equals(this.prioritizedNetworks, configSortListItem.prioritizedNetworks) &&
        Objects.equals(this.source, configSortListItem.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acl, element, prioritizedNetworks, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigSortListItem {\n");
    sb.append("    acl: ").append(toIndentedString(acl)).append("\n");
    sb.append("    element: ").append(toIndentedString(element)).append("\n");
    sb.append("    prioritizedNetworks: ").append(toIndentedString(prioritizedNetworks)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acl");
    openapiFields.add("element");
    openapiFields.add("prioritized_networks");
    openapiFields.add("source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("element");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigSortListItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigSortListItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigSortListItem is not found in the empty JSON string", ConfigSortListItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigSortListItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigSortListItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConfigSortListItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acl") != null && !jsonObj.get("acl").isJsonNull()) && !jsonObj.get("acl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acl").toString()));
      }
      if (!jsonObj.get("element").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `element` to be a primitive type in the JSON string but got `%s`", jsonObj.get("element").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("prioritized_networks") != null && !jsonObj.get("prioritized_networks").isJsonNull() && !jsonObj.get("prioritized_networks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `prioritized_networks` to be an array in the JSON string but got `%s`", jsonObj.get("prioritized_networks").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigSortListItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigSortListItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigSortListItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigSortListItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigSortListItem>() {
           @Override
           public void write(JsonWriter out, ConfigSortListItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigSortListItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigSortListItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigSortListItem
   * @throws IOException if the JSON string is invalid with respect to ConfigSortListItem
   */
  public static ConfigSortListItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigSortListItem.class);
  }

  /**
   * Convert an instance of ConfigSortListItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

