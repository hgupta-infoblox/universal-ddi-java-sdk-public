/*
 * DNS Configuration API
 * The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConfigHostInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConfigAssociatedHost
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:28.384903+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class ConfigAssociatedHost {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nullable
  private String address;

  public static final String SERIALIZED_NAME_DFP_SERVICE = "dfp_service";
  @SerializedName(SERIALIZED_NAME_DFP_SERVICE)
  @javax.annotation.Nullable
  private String dfpService;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_INTERFACES = "interfaces";
  @SerializedName(SERIALIZED_NAME_INTERFACES)
  @javax.annotation.Nullable
  private List<ConfigHostInterface> interfaces = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_OPHID = "ophid";
  @SerializedName(SERIALIZED_NAME_OPHID)
  @javax.annotation.Nullable
  private String ophid;

  public ConfigAssociatedHost() {
  }

  public ConfigAssociatedHost(
     String address, 
     String dfpService, 
     String id, 
     List<ConfigHostInterface> interfaces, 
     String name, 
     String ophid
  ) {
    this();
    this.address = address;
    this.dfpService = dfpService;
    this.id = id;
    this.interfaces = interfaces;
    this.name = name;
    this.ophid = ophid;
  }

  /**
   * Host&#39;s primary IP Address.
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }



  /**
   * DFP service indicates whether or not BloxOne DDI DNS and BloxOne TD DFP are both active on the host. If so, BloxOne DDI DNS will augment recursive queries and forward them to BloxOne TD DFP. Allowed values:  * _unavailable_: BloxOne TD DFP application is not available,  * _enabled_: BloxOne TD DFP application is available and enabled,  * _disabled_: BloxOne TD DFP application is available but disabled.
   * @return dfpService
   */
  @javax.annotation.Nullable
  public String getDfpService() {
    return dfpService;
  }



  /**
   * The resource identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * Host Interfaces. The host interfaces associated with the host.
   * @return interfaces
   */
  @javax.annotation.Nullable
  public List<ConfigHostInterface> getInterfaces() {
    return interfaces;
  }



  /**
   * Host display name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * On-Prem Host ID.
   * @return ophid
   */
  @javax.annotation.Nullable
  public String getOphid() {
    return ophid;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigAssociatedHost configAssociatedHost = (ConfigAssociatedHost) o;
    return Objects.equals(this.address, configAssociatedHost.address) &&
        Objects.equals(this.dfpService, configAssociatedHost.dfpService) &&
        Objects.equals(this.id, configAssociatedHost.id) &&
        Objects.equals(this.interfaces, configAssociatedHost.interfaces) &&
        Objects.equals(this.name, configAssociatedHost.name) &&
        Objects.equals(this.ophid, configAssociatedHost.ophid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, dfpService, id, interfaces, name, ophid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigAssociatedHost {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    dfpService: ").append(toIndentedString(dfpService)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    interfaces: ").append(toIndentedString(interfaces)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ophid: ").append(toIndentedString(ophid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("dfp_service");
    openapiFields.add("id");
    openapiFields.add("interfaces");
    openapiFields.add("name");
    openapiFields.add("ophid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigAssociatedHost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigAssociatedHost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigAssociatedHost is not found in the empty JSON string", ConfigAssociatedHost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigAssociatedHost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigAssociatedHost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("dfp_service") != null && !jsonObj.get("dfp_service").isJsonNull()) && !jsonObj.get("dfp_service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dfp_service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dfp_service").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("interfaces") != null && !jsonObj.get("interfaces").isJsonNull()) {
        JsonArray jsonArrayinterfaces = jsonObj.getAsJsonArray("interfaces");
        if (jsonArrayinterfaces != null) {
          // ensure the json data is an array
          if (!jsonObj.get("interfaces").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `interfaces` to be an array in the JSON string but got `%s`", jsonObj.get("interfaces").toString()));
          }

          // validate the optional field `interfaces` (array)
          for (int i = 0; i < jsonArrayinterfaces.size(); i++) {
            ConfigHostInterface.validateJsonElement(jsonArrayinterfaces.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("ophid") != null && !jsonObj.get("ophid").isJsonNull()) && !jsonObj.get("ophid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ophid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ophid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigAssociatedHost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigAssociatedHost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigAssociatedHost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigAssociatedHost.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigAssociatedHost>() {
           @Override
           public void write(JsonWriter out, ConfigAssociatedHost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigAssociatedHost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigAssociatedHost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigAssociatedHost
   * @throws IOException if the JSON string is invalid with respect to ConfigAssociatedHost
   */
  public static ConfigAssociatedHost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigAssociatedHost.class);
  }

  /**
   * Convert an instance of ConfigAssociatedHost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

