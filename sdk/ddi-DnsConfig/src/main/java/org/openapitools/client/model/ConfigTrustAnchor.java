/*
 * DNS Configuration API
 * The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DNSSEC trust anchor.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:28.384903+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class ConfigTrustAnchor {
  public static final String SERIALIZED_NAME_ALGORITHM = "algorithm";
  @SerializedName(SERIALIZED_NAME_ALGORITHM)
  @javax.annotation.Nonnull
  private Long algorithm;

  public static final String SERIALIZED_NAME_PROTOCOL_ZONE = "protocol_zone";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_ZONE)
  @javax.annotation.Nullable
  private String protocolZone;

  public static final String SERIALIZED_NAME_PUBLIC_KEY = "public_key";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
  @javax.annotation.Nonnull
  private String publicKey;

  public static final String SERIALIZED_NAME_SEP = "sep";
  @SerializedName(SERIALIZED_NAME_SEP)
  @javax.annotation.Nullable
  private Boolean sep;

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @SerializedName(SERIALIZED_NAME_ZONE)
  @javax.annotation.Nonnull
  private String zone;

  public ConfigTrustAnchor() {
  }

  public ConfigTrustAnchor(
     String protocolZone
  ) {
    this();
    this.protocolZone = protocolZone;
  }

  public ConfigTrustAnchor algorithm(@javax.annotation.Nonnull Long algorithm) {
    this.algorithm = algorithm;
    return this;
  }

  /**
   * Get algorithm
   * @return algorithm
   */
  @javax.annotation.Nonnull
  public Long getAlgorithm() {
    return algorithm;
  }

  public void setAlgorithm(@javax.annotation.Nonnull Long algorithm) {
    this.algorithm = algorithm;
  }


  /**
   * Zone FQDN in punycode.
   * @return protocolZone
   */
  @javax.annotation.Nullable
  public String getProtocolZone() {
    return protocolZone;
  }



  public ConfigTrustAnchor publicKey(@javax.annotation.Nonnull String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  /**
   * DNSSEC key data. Non-empty, valid base64 string.
   * @return publicKey
   */
  @javax.annotation.Nonnull
  public String getPublicKey() {
    return publicKey;
  }

  public void setPublicKey(@javax.annotation.Nonnull String publicKey) {
    this.publicKey = publicKey;
  }


  public ConfigTrustAnchor sep(@javax.annotation.Nullable Boolean sep) {
    this.sep = sep;
    return this;
  }

  /**
   * Optional. Secure Entry Point flag.  Defaults to _true_.
   * @return sep
   */
  @javax.annotation.Nullable
  public Boolean getSep() {
    return sep;
  }

  public void setSep(@javax.annotation.Nullable Boolean sep) {
    this.sep = sep;
  }


  public ConfigTrustAnchor zone(@javax.annotation.Nonnull String zone) {
    this.zone = zone;
    return this;
  }

  /**
   * Zone FQDN.
   * @return zone
   */
  @javax.annotation.Nonnull
  public String getZone() {
    return zone;
  }

  public void setZone(@javax.annotation.Nonnull String zone) {
    this.zone = zone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigTrustAnchor configTrustAnchor = (ConfigTrustAnchor) o;
    return Objects.equals(this.algorithm, configTrustAnchor.algorithm) &&
        Objects.equals(this.protocolZone, configTrustAnchor.protocolZone) &&
        Objects.equals(this.publicKey, configTrustAnchor.publicKey) &&
        Objects.equals(this.sep, configTrustAnchor.sep) &&
        Objects.equals(this.zone, configTrustAnchor.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(algorithm, protocolZone, publicKey, sep, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigTrustAnchor {\n");
    sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
    sb.append("    protocolZone: ").append(toIndentedString(protocolZone)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    sep: ").append(toIndentedString(sep)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("algorithm");
    openapiFields.add("protocol_zone");
    openapiFields.add("public_key");
    openapiFields.add("sep");
    openapiFields.add("zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("algorithm");
    openapiRequiredFields.add("public_key");
    openapiRequiredFields.add("zone");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigTrustAnchor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigTrustAnchor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigTrustAnchor is not found in the empty JSON string", ConfigTrustAnchor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigTrustAnchor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigTrustAnchor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConfigTrustAnchor.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("protocol_zone") != null && !jsonObj.get("protocol_zone").isJsonNull()) && !jsonObj.get("protocol_zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol_zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol_zone").toString()));
      }
      if (!jsonObj.get("public_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_key").toString()));
      }
      if (!jsonObj.get("zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigTrustAnchor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigTrustAnchor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigTrustAnchor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigTrustAnchor.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigTrustAnchor>() {
           @Override
           public void write(JsonWriter out, ConfigTrustAnchor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigTrustAnchor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigTrustAnchor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigTrustAnchor
   * @throws IOException if the JSON string is invalid with respect to ConfigTrustAnchor
   */
  public static ConfigTrustAnchor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigTrustAnchor.class);
  }

  /**
   * Convert an instance of ConfigTrustAnchor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

