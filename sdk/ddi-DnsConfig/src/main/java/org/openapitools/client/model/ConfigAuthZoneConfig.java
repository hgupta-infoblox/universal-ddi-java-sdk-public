/*
 * DNS Configuration API
 * The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConfigExternalPrimary;
import org.openapitools.client.model.ConfigExternalSecondary;
import org.openapitools.client.model.ConfigInternalSecondary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConfigAuthZoneConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:28.384903+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class ConfigAuthZoneConfig {
  public static final String SERIALIZED_NAME_EXTERNAL_PRIMARIES = "external_primaries";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_PRIMARIES)
  @javax.annotation.Nullable
  private List<ConfigExternalPrimary> externalPrimaries = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTERNAL_SECONDARIES = "external_secondaries";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_SECONDARIES)
  @javax.annotation.Nullable
  private List<ConfigExternalSecondary> externalSecondaries = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTERNAL_SECONDARIES = "internal_secondaries";
  @SerializedName(SERIALIZED_NAME_INTERNAL_SECONDARIES)
  @javax.annotation.Nullable
  private List<ConfigInternalSecondary> internalSecondaries = new ArrayList<>();

  public static final String SERIALIZED_NAME_NSGS = "nsgs";
  @SerializedName(SERIALIZED_NAME_NSGS)
  @javax.annotation.Nullable
  private List<String> nsgs = new ArrayList<>();

  public ConfigAuthZoneConfig() {
  }

  public ConfigAuthZoneConfig externalPrimaries(@javax.annotation.Nullable List<ConfigExternalPrimary> externalPrimaries) {
    this.externalPrimaries = externalPrimaries;
    return this;
  }

  public ConfigAuthZoneConfig addExternalPrimariesItem(ConfigExternalPrimary externalPrimariesItem) {
    if (this.externalPrimaries == null) {
      this.externalPrimaries = new ArrayList<>();
    }
    this.externalPrimaries.add(externalPrimariesItem);
    return this;
  }

  /**
   * Optional. DNS primaries external to BloxOne DDI. Order is not significant.
   * @return externalPrimaries
   */
  @javax.annotation.Nullable
  public List<ConfigExternalPrimary> getExternalPrimaries() {
    return externalPrimaries;
  }

  public void setExternalPrimaries(@javax.annotation.Nullable List<ConfigExternalPrimary> externalPrimaries) {
    this.externalPrimaries = externalPrimaries;
  }


  public ConfigAuthZoneConfig externalSecondaries(@javax.annotation.Nullable List<ConfigExternalSecondary> externalSecondaries) {
    this.externalSecondaries = externalSecondaries;
    return this;
  }

  public ConfigAuthZoneConfig addExternalSecondariesItem(ConfigExternalSecondary externalSecondariesItem) {
    if (this.externalSecondaries == null) {
      this.externalSecondaries = new ArrayList<>();
    }
    this.externalSecondaries.add(externalSecondariesItem);
    return this;
  }

  /**
   * DNS secondaries external to BloxOne DDI. Order is not significant.
   * @return externalSecondaries
   */
  @javax.annotation.Nullable
  public List<ConfigExternalSecondary> getExternalSecondaries() {
    return externalSecondaries;
  }

  public void setExternalSecondaries(@javax.annotation.Nullable List<ConfigExternalSecondary> externalSecondaries) {
    this.externalSecondaries = externalSecondaries;
  }


  public ConfigAuthZoneConfig internalSecondaries(@javax.annotation.Nullable List<ConfigInternalSecondary> internalSecondaries) {
    this.internalSecondaries = internalSecondaries;
    return this;
  }

  public ConfigAuthZoneConfig addInternalSecondariesItem(ConfigInternalSecondary internalSecondariesItem) {
    if (this.internalSecondaries == null) {
      this.internalSecondaries = new ArrayList<>();
    }
    this.internalSecondaries.add(internalSecondariesItem);
    return this;
  }

  /**
   * Optional. BloxOne DDI hosts acting as internal secondaries. Order is not significant.
   * @return internalSecondaries
   */
  @javax.annotation.Nullable
  public List<ConfigInternalSecondary> getInternalSecondaries() {
    return internalSecondaries;
  }

  public void setInternalSecondaries(@javax.annotation.Nullable List<ConfigInternalSecondary> internalSecondaries) {
    this.internalSecondaries = internalSecondaries;
  }


  public ConfigAuthZoneConfig nsgs(@javax.annotation.Nullable List<String> nsgs) {
    this.nsgs = nsgs;
    return this;
  }

  public ConfigAuthZoneConfig addNsgsItem(String nsgsItem) {
    if (this.nsgs == null) {
      this.nsgs = new ArrayList<>();
    }
    this.nsgs.add(nsgsItem);
    return this;
  }

  /**
   * The resource identifier.
   * @return nsgs
   */
  @javax.annotation.Nullable
  public List<String> getNsgs() {
    return nsgs;
  }

  public void setNsgs(@javax.annotation.Nullable List<String> nsgs) {
    this.nsgs = nsgs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigAuthZoneConfig configAuthZoneConfig = (ConfigAuthZoneConfig) o;
    return Objects.equals(this.externalPrimaries, configAuthZoneConfig.externalPrimaries) &&
        Objects.equals(this.externalSecondaries, configAuthZoneConfig.externalSecondaries) &&
        Objects.equals(this.internalSecondaries, configAuthZoneConfig.internalSecondaries) &&
        Objects.equals(this.nsgs, configAuthZoneConfig.nsgs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalPrimaries, externalSecondaries, internalSecondaries, nsgs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigAuthZoneConfig {\n");
    sb.append("    externalPrimaries: ").append(toIndentedString(externalPrimaries)).append("\n");
    sb.append("    externalSecondaries: ").append(toIndentedString(externalSecondaries)).append("\n");
    sb.append("    internalSecondaries: ").append(toIndentedString(internalSecondaries)).append("\n");
    sb.append("    nsgs: ").append(toIndentedString(nsgs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("external_primaries");
    openapiFields.add("external_secondaries");
    openapiFields.add("internal_secondaries");
    openapiFields.add("nsgs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigAuthZoneConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigAuthZoneConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigAuthZoneConfig is not found in the empty JSON string", ConfigAuthZoneConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigAuthZoneConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigAuthZoneConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("external_primaries") != null && !jsonObj.get("external_primaries").isJsonNull()) {
        JsonArray jsonArrayexternalPrimaries = jsonObj.getAsJsonArray("external_primaries");
        if (jsonArrayexternalPrimaries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("external_primaries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `external_primaries` to be an array in the JSON string but got `%s`", jsonObj.get("external_primaries").toString()));
          }

          // validate the optional field `external_primaries` (array)
          for (int i = 0; i < jsonArrayexternalPrimaries.size(); i++) {
            ConfigExternalPrimary.validateJsonElement(jsonArrayexternalPrimaries.get(i));
          };
        }
      }
      if (jsonObj.get("external_secondaries") != null && !jsonObj.get("external_secondaries").isJsonNull()) {
        JsonArray jsonArrayexternalSecondaries = jsonObj.getAsJsonArray("external_secondaries");
        if (jsonArrayexternalSecondaries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("external_secondaries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `external_secondaries` to be an array in the JSON string but got `%s`", jsonObj.get("external_secondaries").toString()));
          }

          // validate the optional field `external_secondaries` (array)
          for (int i = 0; i < jsonArrayexternalSecondaries.size(); i++) {
            ConfigExternalSecondary.validateJsonElement(jsonArrayexternalSecondaries.get(i));
          };
        }
      }
      if (jsonObj.get("internal_secondaries") != null && !jsonObj.get("internal_secondaries").isJsonNull()) {
        JsonArray jsonArrayinternalSecondaries = jsonObj.getAsJsonArray("internal_secondaries");
        if (jsonArrayinternalSecondaries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("internal_secondaries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `internal_secondaries` to be an array in the JSON string but got `%s`", jsonObj.get("internal_secondaries").toString()));
          }

          // validate the optional field `internal_secondaries` (array)
          for (int i = 0; i < jsonArrayinternalSecondaries.size(); i++) {
            ConfigInternalSecondary.validateJsonElement(jsonArrayinternalSecondaries.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("nsgs") != null && !jsonObj.get("nsgs").isJsonNull() && !jsonObj.get("nsgs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nsgs` to be an array in the JSON string but got `%s`", jsonObj.get("nsgs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigAuthZoneConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigAuthZoneConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigAuthZoneConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigAuthZoneConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigAuthZoneConfig>() {
           @Override
           public void write(JsonWriter out, ConfigAuthZoneConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigAuthZoneConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigAuthZoneConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigAuthZoneConfig
   * @throws IOException if the JSON string is invalid with respect to ConfigAuthZoneConfig
   */
  public static ConfigAuthZoneConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigAuthZoneConfig.class);
  }

  /**
   * Convert an instance of ConfigAuthZoneConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

