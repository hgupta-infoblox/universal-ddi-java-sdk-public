/*
 * DNS Configuration API
 * The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConfigECSZone;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Block for fields: _ecs_enabled_, _ecs_forwarding_, _ecs_prefix_v4_, _ecs_prefix_v6_, _ecs_zones_.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:28.384903+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class ConfigECSBlock {
  public static final String SERIALIZED_NAME_ECS_ENABLED = "ecs_enabled";
  @SerializedName(SERIALIZED_NAME_ECS_ENABLED)
  @javax.annotation.Nullable
  private Boolean ecsEnabled;

  public static final String SERIALIZED_NAME_ECS_FORWARDING = "ecs_forwarding";
  @SerializedName(SERIALIZED_NAME_ECS_FORWARDING)
  @javax.annotation.Nullable
  private Boolean ecsForwarding;

  public static final String SERIALIZED_NAME_ECS_PREFIX_V4 = "ecs_prefix_v4";
  @SerializedName(SERIALIZED_NAME_ECS_PREFIX_V4)
  @javax.annotation.Nullable
  private Long ecsPrefixV4;

  public static final String SERIALIZED_NAME_ECS_PREFIX_V6 = "ecs_prefix_v6";
  @SerializedName(SERIALIZED_NAME_ECS_PREFIX_V6)
  @javax.annotation.Nullable
  private Long ecsPrefixV6;

  public static final String SERIALIZED_NAME_ECS_ZONES = "ecs_zones";
  @SerializedName(SERIALIZED_NAME_ECS_ZONES)
  @javax.annotation.Nullable
  private List<ConfigECSZone> ecsZones = new ArrayList<>();

  public ConfigECSBlock() {
  }

  public ConfigECSBlock ecsEnabled(@javax.annotation.Nullable Boolean ecsEnabled) {
    this.ecsEnabled = ecsEnabled;
    return this;
  }

  /**
   * Optional. Field configuration for _ecs_enabled_ field.
   * @return ecsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getEcsEnabled() {
    return ecsEnabled;
  }

  public void setEcsEnabled(@javax.annotation.Nullable Boolean ecsEnabled) {
    this.ecsEnabled = ecsEnabled;
  }


  public ConfigECSBlock ecsForwarding(@javax.annotation.Nullable Boolean ecsForwarding) {
    this.ecsForwarding = ecsForwarding;
    return this;
  }

  /**
   * Optional. Field configuration for _ecs_forwarding_ field.
   * @return ecsForwarding
   */
  @javax.annotation.Nullable
  public Boolean getEcsForwarding() {
    return ecsForwarding;
  }

  public void setEcsForwarding(@javax.annotation.Nullable Boolean ecsForwarding) {
    this.ecsForwarding = ecsForwarding;
  }


  public ConfigECSBlock ecsPrefixV4(@javax.annotation.Nullable Long ecsPrefixV4) {
    this.ecsPrefixV4 = ecsPrefixV4;
    return this;
  }

  /**
   * Optional. Field configuration for _ecs_prefix_v4_ field.
   * @return ecsPrefixV4
   */
  @javax.annotation.Nullable
  public Long getEcsPrefixV4() {
    return ecsPrefixV4;
  }

  public void setEcsPrefixV4(@javax.annotation.Nullable Long ecsPrefixV4) {
    this.ecsPrefixV4 = ecsPrefixV4;
  }


  public ConfigECSBlock ecsPrefixV6(@javax.annotation.Nullable Long ecsPrefixV6) {
    this.ecsPrefixV6 = ecsPrefixV6;
    return this;
  }

  /**
   * Optional. Field configuration for _ecs_prefix_v6_ field.
   * @return ecsPrefixV6
   */
  @javax.annotation.Nullable
  public Long getEcsPrefixV6() {
    return ecsPrefixV6;
  }

  public void setEcsPrefixV6(@javax.annotation.Nullable Long ecsPrefixV6) {
    this.ecsPrefixV6 = ecsPrefixV6;
  }


  public ConfigECSBlock ecsZones(@javax.annotation.Nullable List<ConfigECSZone> ecsZones) {
    this.ecsZones = ecsZones;
    return this;
  }

  public ConfigECSBlock addEcsZonesItem(ConfigECSZone ecsZonesItem) {
    if (this.ecsZones == null) {
      this.ecsZones = new ArrayList<>();
    }
    this.ecsZones.add(ecsZonesItem);
    return this;
  }

  /**
   * Optional. Field configuration for _ecs_zones_ field.
   * @return ecsZones
   */
  @javax.annotation.Nullable
  public List<ConfigECSZone> getEcsZones() {
    return ecsZones;
  }

  public void setEcsZones(@javax.annotation.Nullable List<ConfigECSZone> ecsZones) {
    this.ecsZones = ecsZones;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigECSBlock configECSBlock = (ConfigECSBlock) o;
    return Objects.equals(this.ecsEnabled, configECSBlock.ecsEnabled) &&
        Objects.equals(this.ecsForwarding, configECSBlock.ecsForwarding) &&
        Objects.equals(this.ecsPrefixV4, configECSBlock.ecsPrefixV4) &&
        Objects.equals(this.ecsPrefixV6, configECSBlock.ecsPrefixV6) &&
        Objects.equals(this.ecsZones, configECSBlock.ecsZones);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ecsEnabled, ecsForwarding, ecsPrefixV4, ecsPrefixV6, ecsZones);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigECSBlock {\n");
    sb.append("    ecsEnabled: ").append(toIndentedString(ecsEnabled)).append("\n");
    sb.append("    ecsForwarding: ").append(toIndentedString(ecsForwarding)).append("\n");
    sb.append("    ecsPrefixV4: ").append(toIndentedString(ecsPrefixV4)).append("\n");
    sb.append("    ecsPrefixV6: ").append(toIndentedString(ecsPrefixV6)).append("\n");
    sb.append("    ecsZones: ").append(toIndentedString(ecsZones)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ecs_enabled");
    openapiFields.add("ecs_forwarding");
    openapiFields.add("ecs_prefix_v4");
    openapiFields.add("ecs_prefix_v6");
    openapiFields.add("ecs_zones");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigECSBlock
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigECSBlock.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigECSBlock is not found in the empty JSON string", ConfigECSBlock.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigECSBlock.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigECSBlock` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("ecs_zones") != null && !jsonObj.get("ecs_zones").isJsonNull()) {
        JsonArray jsonArrayecsZones = jsonObj.getAsJsonArray("ecs_zones");
        if (jsonArrayecsZones != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ecs_zones").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ecs_zones` to be an array in the JSON string but got `%s`", jsonObj.get("ecs_zones").toString()));
          }

          // validate the optional field `ecs_zones` (array)
          for (int i = 0; i < jsonArrayecsZones.size(); i++) {
            ConfigECSZone.validateJsonElement(jsonArrayecsZones.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigECSBlock.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigECSBlock' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigECSBlock> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigECSBlock.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigECSBlock>() {
           @Override
           public void write(JsonWriter out, ConfigECSBlock value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigECSBlock read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigECSBlock given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigECSBlock
   * @throws IOException if the JSON string is invalid with respect to ConfigECSBlock
   */
  public static ConfigECSBlock fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigECSBlock.class);
  }

  /**
   * Convert an instance of ConfigECSBlock to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

