/*
 * DNS Configuration API
 * The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConfigDNSSECValidateException;
import org.openapitools.client.model.ConfigTrustAnchor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Block for fields: _dnssec_enabled_, _dnssec_enable_validation_, _dnssec_validate_expiry_, _dnssec_trust_anchors_, _dnssec_validate_exceptions_.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:28.384903+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class ConfigDNSSECValidationBlock {
  public static final String SERIALIZED_NAME_DNSSEC_ENABLE_VALIDATION = "dnssec_enable_validation";
  @SerializedName(SERIALIZED_NAME_DNSSEC_ENABLE_VALIDATION)
  @javax.annotation.Nullable
  private Boolean dnssecEnableValidation;

  public static final String SERIALIZED_NAME_DNSSEC_ENABLED = "dnssec_enabled";
  @SerializedName(SERIALIZED_NAME_DNSSEC_ENABLED)
  @javax.annotation.Nullable
  private Boolean dnssecEnabled;

  public static final String SERIALIZED_NAME_DNSSEC_TRUST_ANCHORS = "dnssec_trust_anchors";
  @SerializedName(SERIALIZED_NAME_DNSSEC_TRUST_ANCHORS)
  @javax.annotation.Nullable
  private List<ConfigTrustAnchor> dnssecTrustAnchors = new ArrayList<>();

  public static final String SERIALIZED_NAME_DNSSEC_VALIDATE_EXCEPTIONS = "dnssec_validate_exceptions";
  @SerializedName(SERIALIZED_NAME_DNSSEC_VALIDATE_EXCEPTIONS)
  @javax.annotation.Nullable
  private List<ConfigDNSSECValidateException> dnssecValidateExceptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DNSSEC_VALIDATE_EXPIRY = "dnssec_validate_expiry";
  @SerializedName(SERIALIZED_NAME_DNSSEC_VALIDATE_EXPIRY)
  @javax.annotation.Nullable
  private Boolean dnssecValidateExpiry;

  public ConfigDNSSECValidationBlock() {
  }

  public ConfigDNSSECValidationBlock dnssecEnableValidation(@javax.annotation.Nullable Boolean dnssecEnableValidation) {
    this.dnssecEnableValidation = dnssecEnableValidation;
    return this;
  }

  /**
   * Optional. Field configuration for _dnssec_enable_validation_ field.
   * @return dnssecEnableValidation
   */
  @javax.annotation.Nullable
  public Boolean getDnssecEnableValidation() {
    return dnssecEnableValidation;
  }

  public void setDnssecEnableValidation(@javax.annotation.Nullable Boolean dnssecEnableValidation) {
    this.dnssecEnableValidation = dnssecEnableValidation;
  }


  public ConfigDNSSECValidationBlock dnssecEnabled(@javax.annotation.Nullable Boolean dnssecEnabled) {
    this.dnssecEnabled = dnssecEnabled;
    return this;
  }

  /**
   * Optional. Field configuration for _dnssec_enabled_ field.
   * @return dnssecEnabled
   */
  @javax.annotation.Nullable
  public Boolean getDnssecEnabled() {
    return dnssecEnabled;
  }

  public void setDnssecEnabled(@javax.annotation.Nullable Boolean dnssecEnabled) {
    this.dnssecEnabled = dnssecEnabled;
  }


  public ConfigDNSSECValidationBlock dnssecTrustAnchors(@javax.annotation.Nullable List<ConfigTrustAnchor> dnssecTrustAnchors) {
    this.dnssecTrustAnchors = dnssecTrustAnchors;
    return this;
  }

  public ConfigDNSSECValidationBlock addDnssecTrustAnchorsItem(ConfigTrustAnchor dnssecTrustAnchorsItem) {
    if (this.dnssecTrustAnchors == null) {
      this.dnssecTrustAnchors = new ArrayList<>();
    }
    this.dnssecTrustAnchors.add(dnssecTrustAnchorsItem);
    return this;
  }

  /**
   * Optional. Field configuration for _dnssec_trust_anchors_ field.
   * @return dnssecTrustAnchors
   */
  @javax.annotation.Nullable
  public List<ConfigTrustAnchor> getDnssecTrustAnchors() {
    return dnssecTrustAnchors;
  }

  public void setDnssecTrustAnchors(@javax.annotation.Nullable List<ConfigTrustAnchor> dnssecTrustAnchors) {
    this.dnssecTrustAnchors = dnssecTrustAnchors;
  }


  public ConfigDNSSECValidationBlock dnssecValidateExceptions(@javax.annotation.Nullable List<ConfigDNSSECValidateException> dnssecValidateExceptions) {
    this.dnssecValidateExceptions = dnssecValidateExceptions;
    return this;
  }

  public ConfigDNSSECValidationBlock addDnssecValidateExceptionsItem(ConfigDNSSECValidateException dnssecValidateExceptionsItem) {
    if (this.dnssecValidateExceptions == null) {
      this.dnssecValidateExceptions = new ArrayList<>();
    }
    this.dnssecValidateExceptions.add(dnssecValidateExceptionsItem);
    return this;
  }

  /**
   * Optional. Field configuration for _dnssec_validate_exceptions_ field.
   * @return dnssecValidateExceptions
   */
  @javax.annotation.Nullable
  public List<ConfigDNSSECValidateException> getDnssecValidateExceptions() {
    return dnssecValidateExceptions;
  }

  public void setDnssecValidateExceptions(@javax.annotation.Nullable List<ConfigDNSSECValidateException> dnssecValidateExceptions) {
    this.dnssecValidateExceptions = dnssecValidateExceptions;
  }


  public ConfigDNSSECValidationBlock dnssecValidateExpiry(@javax.annotation.Nullable Boolean dnssecValidateExpiry) {
    this.dnssecValidateExpiry = dnssecValidateExpiry;
    return this;
  }

  /**
   * Optional. Field configuration for _dnssec_validate_expiry_ field.
   * @return dnssecValidateExpiry
   */
  @javax.annotation.Nullable
  public Boolean getDnssecValidateExpiry() {
    return dnssecValidateExpiry;
  }

  public void setDnssecValidateExpiry(@javax.annotation.Nullable Boolean dnssecValidateExpiry) {
    this.dnssecValidateExpiry = dnssecValidateExpiry;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigDNSSECValidationBlock configDNSSECValidationBlock = (ConfigDNSSECValidationBlock) o;
    return Objects.equals(this.dnssecEnableValidation, configDNSSECValidationBlock.dnssecEnableValidation) &&
        Objects.equals(this.dnssecEnabled, configDNSSECValidationBlock.dnssecEnabled) &&
        Objects.equals(this.dnssecTrustAnchors, configDNSSECValidationBlock.dnssecTrustAnchors) &&
        Objects.equals(this.dnssecValidateExceptions, configDNSSECValidationBlock.dnssecValidateExceptions) &&
        Objects.equals(this.dnssecValidateExpiry, configDNSSECValidationBlock.dnssecValidateExpiry);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dnssecEnableValidation, dnssecEnabled, dnssecTrustAnchors, dnssecValidateExceptions, dnssecValidateExpiry);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigDNSSECValidationBlock {\n");
    sb.append("    dnssecEnableValidation: ").append(toIndentedString(dnssecEnableValidation)).append("\n");
    sb.append("    dnssecEnabled: ").append(toIndentedString(dnssecEnabled)).append("\n");
    sb.append("    dnssecTrustAnchors: ").append(toIndentedString(dnssecTrustAnchors)).append("\n");
    sb.append("    dnssecValidateExceptions: ").append(toIndentedString(dnssecValidateExceptions)).append("\n");
    sb.append("    dnssecValidateExpiry: ").append(toIndentedString(dnssecValidateExpiry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dnssec_enable_validation");
    openapiFields.add("dnssec_enabled");
    openapiFields.add("dnssec_trust_anchors");
    openapiFields.add("dnssec_validate_exceptions");
    openapiFields.add("dnssec_validate_expiry");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigDNSSECValidationBlock
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigDNSSECValidationBlock.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigDNSSECValidationBlock is not found in the empty JSON string", ConfigDNSSECValidationBlock.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigDNSSECValidationBlock.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigDNSSECValidationBlock` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dnssec_trust_anchors") != null && !jsonObj.get("dnssec_trust_anchors").isJsonNull()) {
        JsonArray jsonArraydnssecTrustAnchors = jsonObj.getAsJsonArray("dnssec_trust_anchors");
        if (jsonArraydnssecTrustAnchors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dnssec_trust_anchors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dnssec_trust_anchors` to be an array in the JSON string but got `%s`", jsonObj.get("dnssec_trust_anchors").toString()));
          }

          // validate the optional field `dnssec_trust_anchors` (array)
          for (int i = 0; i < jsonArraydnssecTrustAnchors.size(); i++) {
            ConfigTrustAnchor.validateJsonElement(jsonArraydnssecTrustAnchors.get(i));
          };
        }
      }
      if (jsonObj.get("dnssec_validate_exceptions") != null && !jsonObj.get("dnssec_validate_exceptions").isJsonNull()) {
        JsonArray jsonArraydnssecValidateExceptions = jsonObj.getAsJsonArray("dnssec_validate_exceptions");
        if (jsonArraydnssecValidateExceptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dnssec_validate_exceptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dnssec_validate_exceptions` to be an array in the JSON string but got `%s`", jsonObj.get("dnssec_validate_exceptions").toString()));
          }

          // validate the optional field `dnssec_validate_exceptions` (array)
          for (int i = 0; i < jsonArraydnssecValidateExceptions.size(); i++) {
            ConfigDNSSECValidateException.validateJsonElement(jsonArraydnssecValidateExceptions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigDNSSECValidationBlock.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigDNSSECValidationBlock' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigDNSSECValidationBlock> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigDNSSECValidationBlock.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigDNSSECValidationBlock>() {
           @Override
           public void write(JsonWriter out, ConfigDNSSECValidationBlock value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigDNSSECValidationBlock read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigDNSSECValidationBlock given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigDNSSECValidationBlock
   * @throws IOException if the JSON string is invalid with respect to ConfigDNSSECValidationBlock
   */
  public static ConfigDNSSECValidationBlock fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigDNSSECValidationBlock.class);
  }

  /**
   * Convert an instance of ConfigDNSSECValidationBlock to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

