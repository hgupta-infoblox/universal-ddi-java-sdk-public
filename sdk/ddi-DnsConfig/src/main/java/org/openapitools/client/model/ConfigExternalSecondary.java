/*
 * DNS Configuration API
 * The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConfigTSIGKey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * External DNS secondary.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:28.384903+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class ConfigExternalSecondary {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nonnull
  private String address;

  public static final String SERIALIZED_NAME_FQDN = "fqdn";
  @SerializedName(SERIALIZED_NAME_FQDN)
  @javax.annotation.Nonnull
  private String fqdn;

  public static final String SERIALIZED_NAME_PROTOCOL_FQDN = "protocol_fqdn";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_FQDN)
  @javax.annotation.Nullable
  private String protocolFqdn;

  public static final String SERIALIZED_NAME_STEALTH = "stealth";
  @SerializedName(SERIALIZED_NAME_STEALTH)
  @javax.annotation.Nullable
  private Boolean stealth;

  public static final String SERIALIZED_NAME_TSIG_ENABLED = "tsig_enabled";
  @SerializedName(SERIALIZED_NAME_TSIG_ENABLED)
  @javax.annotation.Nullable
  private Boolean tsigEnabled;

  public static final String SERIALIZED_NAME_TSIG_KEY = "tsig_key";
  @SerializedName(SERIALIZED_NAME_TSIG_KEY)
  @javax.annotation.Nullable
  private ConfigTSIGKey tsigKey;

  public ConfigExternalSecondary() {
  }

  public ConfigExternalSecondary(
     String protocolFqdn
  ) {
    this();
    this.protocolFqdn = protocolFqdn;
  }

  public ConfigExternalSecondary address(@javax.annotation.Nonnull String address) {
    this.address = address;
    return this;
  }

  /**
   * IP Address of nameserver.
   * @return address
   */
  @javax.annotation.Nonnull
  public String getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nonnull String address) {
    this.address = address;
  }


  public ConfigExternalSecondary fqdn(@javax.annotation.Nonnull String fqdn) {
    this.fqdn = fqdn;
    return this;
  }

  /**
   * FQDN of nameserver.
   * @return fqdn
   */
  @javax.annotation.Nonnull
  public String getFqdn() {
    return fqdn;
  }

  public void setFqdn(@javax.annotation.Nonnull String fqdn) {
    this.fqdn = fqdn;
  }


  /**
   * FQDN of nameserver in punycode.
   * @return protocolFqdn
   */
  @javax.annotation.Nullable
  public String getProtocolFqdn() {
    return protocolFqdn;
  }



  public ConfigExternalSecondary stealth(@javax.annotation.Nullable Boolean stealth) {
    this.stealth = stealth;
    return this;
  }

  /**
   * If enabled, the NS record and glue record will NOT be automatically generated according to secondaries nameserver assignment.  Default: _false_
   * @return stealth
   */
  @javax.annotation.Nullable
  public Boolean getStealth() {
    return stealth;
  }

  public void setStealth(@javax.annotation.Nullable Boolean stealth) {
    this.stealth = stealth;
  }


  public ConfigExternalSecondary tsigEnabled(@javax.annotation.Nullable Boolean tsigEnabled) {
    this.tsigEnabled = tsigEnabled;
    return this;
  }

  /**
   * If enabled, secondaries will use the configured TSIG key when requesting a zone transfer.  Default: _false_
   * @return tsigEnabled
   */
  @javax.annotation.Nullable
  public Boolean getTsigEnabled() {
    return tsigEnabled;
  }

  public void setTsigEnabled(@javax.annotation.Nullable Boolean tsigEnabled) {
    this.tsigEnabled = tsigEnabled;
  }


  public ConfigExternalSecondary tsigKey(@javax.annotation.Nullable ConfigTSIGKey tsigKey) {
    this.tsigKey = tsigKey;
    return this;
  }

  /**
   * Get tsigKey
   * @return tsigKey
   */
  @javax.annotation.Nullable
  public ConfigTSIGKey getTsigKey() {
    return tsigKey;
  }

  public void setTsigKey(@javax.annotation.Nullable ConfigTSIGKey tsigKey) {
    this.tsigKey = tsigKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigExternalSecondary configExternalSecondary = (ConfigExternalSecondary) o;
    return Objects.equals(this.address, configExternalSecondary.address) &&
        Objects.equals(this.fqdn, configExternalSecondary.fqdn) &&
        Objects.equals(this.protocolFqdn, configExternalSecondary.protocolFqdn) &&
        Objects.equals(this.stealth, configExternalSecondary.stealth) &&
        Objects.equals(this.tsigEnabled, configExternalSecondary.tsigEnabled) &&
        Objects.equals(this.tsigKey, configExternalSecondary.tsigKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, fqdn, protocolFqdn, stealth, tsigEnabled, tsigKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigExternalSecondary {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    fqdn: ").append(toIndentedString(fqdn)).append("\n");
    sb.append("    protocolFqdn: ").append(toIndentedString(protocolFqdn)).append("\n");
    sb.append("    stealth: ").append(toIndentedString(stealth)).append("\n");
    sb.append("    tsigEnabled: ").append(toIndentedString(tsigEnabled)).append("\n");
    sb.append("    tsigKey: ").append(toIndentedString(tsigKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("fqdn");
    openapiFields.add("protocol_fqdn");
    openapiFields.add("stealth");
    openapiFields.add("tsig_enabled");
    openapiFields.add("tsig_key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("fqdn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigExternalSecondary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigExternalSecondary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigExternalSecondary is not found in the empty JSON string", ConfigExternalSecondary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigExternalSecondary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigExternalSecondary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConfigExternalSecondary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if (!jsonObj.get("fqdn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fqdn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fqdn").toString()));
      }
      if ((jsonObj.get("protocol_fqdn") != null && !jsonObj.get("protocol_fqdn").isJsonNull()) && !jsonObj.get("protocol_fqdn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol_fqdn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol_fqdn").toString()));
      }
      // validate the optional field `tsig_key`
      if (jsonObj.get("tsig_key") != null && !jsonObj.get("tsig_key").isJsonNull()) {
        ConfigTSIGKey.validateJsonElement(jsonObj.get("tsig_key"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigExternalSecondary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigExternalSecondary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigExternalSecondary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigExternalSecondary.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigExternalSecondary>() {
           @Override
           public void write(JsonWriter out, ConfigExternalSecondary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigExternalSecondary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigExternalSecondary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigExternalSecondary
   * @throws IOException if the JSON string is invalid with respect to ConfigExternalSecondary
   */
  public static ConfigExternalSecondary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigExternalSecondary.class);
  }

  /**
   * Convert an instance of ConfigExternalSecondary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

