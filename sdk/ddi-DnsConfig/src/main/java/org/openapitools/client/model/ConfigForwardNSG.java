/*
 * DNS Configuration API
 * The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConfigForwarder;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Forward DNS Server Group for forward zones.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:28.384903+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class ConfigForwardNSG {
  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_EXTERNAL_FORWARDERS = "external_forwarders";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_FORWARDERS)
  @javax.annotation.Nullable
  private List<ConfigForwarder> externalForwarders = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORWARDERS_ONLY = "forwarders_only";
  @SerializedName(SERIALIZED_NAME_FORWARDERS_ONLY)
  @javax.annotation.Nullable
  private Boolean forwardersOnly;

  public static final String SERIALIZED_NAME_HOSTS = "hosts";
  @SerializedName(SERIALIZED_NAME_HOSTS)
  @javax.annotation.Nullable
  private List<String> hosts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_INTERNAL_FORWARDERS = "internal_forwarders";
  @SerializedName(SERIALIZED_NAME_INTERNAL_FORWARDERS)
  @javax.annotation.Nullable
  private List<String> internalForwarders = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_NSGS = "nsgs";
  @SerializedName(SERIALIZED_NAME_NSGS)
  @javax.annotation.Nullable
  private List<String> nsgs = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Object tags;

  public ConfigForwardNSG() {
  }

  public ConfigForwardNSG(
     String id
  ) {
    this();
    this.id = id;
  }

  public ConfigForwardNSG comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Optional. Comment for the object.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  public ConfigForwardNSG externalForwarders(@javax.annotation.Nullable List<ConfigForwarder> externalForwarders) {
    this.externalForwarders = externalForwarders;
    return this;
  }

  public ConfigForwardNSG addExternalForwardersItem(ConfigForwarder externalForwardersItem) {
    if (this.externalForwarders == null) {
      this.externalForwarders = new ArrayList<>();
    }
    this.externalForwarders.add(externalForwardersItem);
    return this;
  }

  /**
   * Optional. External DNS servers to forward to. Order is not significant.
   * @return externalForwarders
   */
  @javax.annotation.Nullable
  public List<ConfigForwarder> getExternalForwarders() {
    return externalForwarders;
  }

  public void setExternalForwarders(@javax.annotation.Nullable List<ConfigForwarder> externalForwarders) {
    this.externalForwarders = externalForwarders;
  }


  public ConfigForwardNSG forwardersOnly(@javax.annotation.Nullable Boolean forwardersOnly) {
    this.forwardersOnly = forwardersOnly;
    return this;
  }

  /**
   * Optional. _true_ to only forward.
   * @return forwardersOnly
   */
  @javax.annotation.Nullable
  public Boolean getForwardersOnly() {
    return forwardersOnly;
  }

  public void setForwardersOnly(@javax.annotation.Nullable Boolean forwardersOnly) {
    this.forwardersOnly = forwardersOnly;
  }


  public ConfigForwardNSG hosts(@javax.annotation.Nullable List<String> hosts) {
    this.hosts = hosts;
    return this;
  }

  public ConfigForwardNSG addHostsItem(String hostsItem) {
    if (this.hosts == null) {
      this.hosts = new ArrayList<>();
    }
    this.hosts.add(hostsItem);
    return this;
  }

  /**
   * The resource identifier.
   * @return hosts
   */
  @javax.annotation.Nullable
  public List<String> getHosts() {
    return hosts;
  }

  public void setHosts(@javax.annotation.Nullable List<String> hosts) {
    this.hosts = hosts;
  }


  /**
   * The resource identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public ConfigForwardNSG internalForwarders(@javax.annotation.Nullable List<String> internalForwarders) {
    this.internalForwarders = internalForwarders;
    return this;
  }

  public ConfigForwardNSG addInternalForwardersItem(String internalForwardersItem) {
    if (this.internalForwarders == null) {
      this.internalForwarders = new ArrayList<>();
    }
    this.internalForwarders.add(internalForwardersItem);
    return this;
  }

  /**
   * The resource identifier.
   * @return internalForwarders
   */
  @javax.annotation.Nullable
  public List<String> getInternalForwarders() {
    return internalForwarders;
  }

  public void setInternalForwarders(@javax.annotation.Nullable List<String> internalForwarders) {
    this.internalForwarders = internalForwarders;
  }


  public ConfigForwardNSG name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the object.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public ConfigForwardNSG nsgs(@javax.annotation.Nullable List<String> nsgs) {
    this.nsgs = nsgs;
    return this;
  }

  public ConfigForwardNSG addNsgsItem(String nsgsItem) {
    if (this.nsgs == null) {
      this.nsgs = new ArrayList<>();
    }
    this.nsgs.add(nsgsItem);
    return this;
  }

  /**
   * The resource identifier.
   * @return nsgs
   */
  @javax.annotation.Nullable
  public List<String> getNsgs() {
    return nsgs;
  }

  public void setNsgs(@javax.annotation.Nullable List<String> nsgs) {
    this.nsgs = nsgs;
  }


  public ConfigForwardNSG tags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Tagging specifics.
   * @return tags
   */
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigForwardNSG configForwardNSG = (ConfigForwardNSG) o;
    return Objects.equals(this.comment, configForwardNSG.comment) &&
        Objects.equals(this.externalForwarders, configForwardNSG.externalForwarders) &&
        Objects.equals(this.forwardersOnly, configForwardNSG.forwardersOnly) &&
        Objects.equals(this.hosts, configForwardNSG.hosts) &&
        Objects.equals(this.id, configForwardNSG.id) &&
        Objects.equals(this.internalForwarders, configForwardNSG.internalForwarders) &&
        Objects.equals(this.name, configForwardNSG.name) &&
        Objects.equals(this.nsgs, configForwardNSG.nsgs) &&
        Objects.equals(this.tags, configForwardNSG.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comment, externalForwarders, forwardersOnly, hosts, id, internalForwarders, name, nsgs, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigForwardNSG {\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    externalForwarders: ").append(toIndentedString(externalForwarders)).append("\n");
    sb.append("    forwardersOnly: ").append(toIndentedString(forwardersOnly)).append("\n");
    sb.append("    hosts: ").append(toIndentedString(hosts)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    internalForwarders: ").append(toIndentedString(internalForwarders)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nsgs: ").append(toIndentedString(nsgs)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comment");
    openapiFields.add("external_forwarders");
    openapiFields.add("forwarders_only");
    openapiFields.add("hosts");
    openapiFields.add("id");
    openapiFields.add("internal_forwarders");
    openapiFields.add("name");
    openapiFields.add("nsgs");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigForwardNSG
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigForwardNSG.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigForwardNSG is not found in the empty JSON string", ConfigForwardNSG.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigForwardNSG.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigForwardNSG` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConfigForwardNSG.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if (jsonObj.get("external_forwarders") != null && !jsonObj.get("external_forwarders").isJsonNull()) {
        JsonArray jsonArrayexternalForwarders = jsonObj.getAsJsonArray("external_forwarders");
        if (jsonArrayexternalForwarders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("external_forwarders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `external_forwarders` to be an array in the JSON string but got `%s`", jsonObj.get("external_forwarders").toString()));
          }

          // validate the optional field `external_forwarders` (array)
          for (int i = 0; i < jsonArrayexternalForwarders.size(); i++) {
            ConfigForwarder.validateJsonElement(jsonArrayexternalForwarders.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hosts") != null && !jsonObj.get("hosts").isJsonNull() && !jsonObj.get("hosts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hosts` to be an array in the JSON string but got `%s`", jsonObj.get("hosts").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("internal_forwarders") != null && !jsonObj.get("internal_forwarders").isJsonNull() && !jsonObj.get("internal_forwarders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `internal_forwarders` to be an array in the JSON string but got `%s`", jsonObj.get("internal_forwarders").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("nsgs") != null && !jsonObj.get("nsgs").isJsonNull() && !jsonObj.get("nsgs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nsgs` to be an array in the JSON string but got `%s`", jsonObj.get("nsgs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigForwardNSG.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigForwardNSG' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigForwardNSG> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigForwardNSG.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigForwardNSG>() {
           @Override
           public void write(JsonWriter out, ConfigForwardNSG value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigForwardNSG read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigForwardNSG given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigForwardNSG
   * @throws IOException if the JSON string is invalid with respect to ConfigForwardNSG
   */
  public static ConfigForwardNSG fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigForwardNSG.class);
  }

  /**
   * Convert an instance of ConfigForwardNSG to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

