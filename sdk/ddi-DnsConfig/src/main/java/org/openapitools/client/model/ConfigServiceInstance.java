/*
 * DNS Configuration API
 * The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConfigAssociatedHost;
import org.openapitools.client.model.ConfigHostAssociatedServer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A DNS Service (_dns/service_) object associates DNS configuraton with DNS host services.   Automatically created and destroyed based on the DNS host services known to the platform.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:28.384903+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class ConfigServiceInstance {
  public static final String SERIALIZED_NAME_ABSOLUTE_NAME = "absolute_name";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE_NAME)
  @javax.annotation.Nullable
  private String absoluteName;

  public static final String SERIALIZED_NAME_ASSOCIATED_HOSTS = "associated_hosts";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_HOSTS)
  @javax.annotation.Nullable
  private List<ConfigAssociatedHost> associatedHosts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASSOCIATED_SERVER = "associated_server";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_SERVER)
  @javax.annotation.Nullable
  private ConfigHostAssociatedServer associatedServer;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_PROTOCOL_ABSOLUTE_NAME = "protocol_absolute_name";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_ABSOLUTE_NAME)
  @javax.annotation.Nullable
  private String protocolAbsoluteName;

  public static final String SERIALIZED_NAME_PROVIDER_ID = "provider_id";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ID)
  @javax.annotation.Nullable
  private String providerId;

  public static final String SERIALIZED_NAME_PROVIDER_TYPE = "provider_type";
  @SerializedName(SERIALIZED_NAME_PROVIDER_TYPE)
  @javax.annotation.Nullable
  private String providerType;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Object tags;

  public ConfigServiceInstance() {
  }

  public ConfigServiceInstance(
     String absoluteName, 
     String comment, 
     String id, 
     String name, 
     String protocolAbsoluteName, 
     String providerId, 
     String providerType
  ) {
    this();
    this.absoluteName = absoluteName;
    this.comment = comment;
    this.id = id;
    this.name = name;
    this.protocolAbsoluteName = protocolAbsoluteName;
    this.providerId = providerId;
    this.providerType = providerType;
  }

  /**
   * DNS Service Instance FQDN.
   * @return absoluteName
   */
  @javax.annotation.Nullable
  public String getAbsoluteName() {
    return absoluteName;
  }



  public ConfigServiceInstance associatedHosts(@javax.annotation.Nullable List<ConfigAssociatedHost> associatedHosts) {
    this.associatedHosts = associatedHosts;
    return this;
  }

  public ConfigServiceInstance addAssociatedHostsItem(ConfigAssociatedHost associatedHostsItem) {
    if (this.associatedHosts == null) {
      this.associatedHosts = new ArrayList<>();
    }
    this.associatedHosts.add(associatedHostsItem);
    return this;
  }

  /**
   * DNS Service Instance&#39;s associated onprem hosts.
   * @return associatedHosts
   */
  @javax.annotation.Nullable
  public List<ConfigAssociatedHost> getAssociatedHosts() {
    return associatedHosts;
  }

  public void setAssociatedHosts(@javax.annotation.Nullable List<ConfigAssociatedHost> associatedHosts) {
    this.associatedHosts = associatedHosts;
  }


  public ConfigServiceInstance associatedServer(@javax.annotation.Nullable ConfigHostAssociatedServer associatedServer) {
    this.associatedServer = associatedServer;
    return this;
  }

  /**
   * Get associatedServer
   * @return associatedServer
   */
  @javax.annotation.Nullable
  public ConfigHostAssociatedServer getAssociatedServer() {
    return associatedServer;
  }

  public void setAssociatedServer(@javax.annotation.Nullable ConfigHostAssociatedServer associatedServer) {
    this.associatedServer = associatedServer;
  }


  /**
   * DNS Service Instance description.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }



  /**
   * The resource identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * DNS Service Instance display name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * DNS Service Instance FQDN in punycode.
   * @return protocolAbsoluteName
   */
  @javax.annotation.Nullable
  public String getProtocolAbsoluteName() {
    return protocolAbsoluteName;
  }



  /**
   * External provider identifier.
   * @return providerId
   */
  @javax.annotation.Nullable
  public String getProviderId() {
    return providerId;
  }



  /**
   * Defines the type of external provider. Allowed values:  * _bloxone_ddi_: provider type is BloxOne DDI,  * _microsoft_azure_: provider type is Microsoft Azure,  * _amazon_web_service_: provider type is Amazon Web Services,  * _microsoft_active_directory_: provider type is Microsoft Active Directory,  * _google_cloud_platform_: provider type is Google Cloud Platform.
   * @return providerType
   */
  @javax.annotation.Nullable
  public String getProviderType() {
    return providerType;
  }



  public ConfigServiceInstance tags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
    return this;
  }

  /**
   * DNS Service Instance tagging specifics.
   * @return tags
   */
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigServiceInstance configServiceInstance = (ConfigServiceInstance) o;
    return Objects.equals(this.absoluteName, configServiceInstance.absoluteName) &&
        Objects.equals(this.associatedHosts, configServiceInstance.associatedHosts) &&
        Objects.equals(this.associatedServer, configServiceInstance.associatedServer) &&
        Objects.equals(this.comment, configServiceInstance.comment) &&
        Objects.equals(this.id, configServiceInstance.id) &&
        Objects.equals(this.name, configServiceInstance.name) &&
        Objects.equals(this.protocolAbsoluteName, configServiceInstance.protocolAbsoluteName) &&
        Objects.equals(this.providerId, configServiceInstance.providerId) &&
        Objects.equals(this.providerType, configServiceInstance.providerType) &&
        Objects.equals(this.tags, configServiceInstance.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(absoluteName, associatedHosts, associatedServer, comment, id, name, protocolAbsoluteName, providerId, providerType, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigServiceInstance {\n");
    sb.append("    absoluteName: ").append(toIndentedString(absoluteName)).append("\n");
    sb.append("    associatedHosts: ").append(toIndentedString(associatedHosts)).append("\n");
    sb.append("    associatedServer: ").append(toIndentedString(associatedServer)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    protocolAbsoluteName: ").append(toIndentedString(protocolAbsoluteName)).append("\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("    providerType: ").append(toIndentedString(providerType)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("absolute_name");
    openapiFields.add("associated_hosts");
    openapiFields.add("associated_server");
    openapiFields.add("comment");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("protocol_absolute_name");
    openapiFields.add("provider_id");
    openapiFields.add("provider_type");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigServiceInstance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigServiceInstance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigServiceInstance is not found in the empty JSON string", ConfigServiceInstance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigServiceInstance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigServiceInstance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("absolute_name") != null && !jsonObj.get("absolute_name").isJsonNull()) && !jsonObj.get("absolute_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `absolute_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("absolute_name").toString()));
      }
      if (jsonObj.get("associated_hosts") != null && !jsonObj.get("associated_hosts").isJsonNull()) {
        JsonArray jsonArrayassociatedHosts = jsonObj.getAsJsonArray("associated_hosts");
        if (jsonArrayassociatedHosts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("associated_hosts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `associated_hosts` to be an array in the JSON string but got `%s`", jsonObj.get("associated_hosts").toString()));
          }

          // validate the optional field `associated_hosts` (array)
          for (int i = 0; i < jsonArrayassociatedHosts.size(); i++) {
            ConfigAssociatedHost.validateJsonElement(jsonArrayassociatedHosts.get(i));
          };
        }
      }
      // validate the optional field `associated_server`
      if (jsonObj.get("associated_server") != null && !jsonObj.get("associated_server").isJsonNull()) {
        ConfigHostAssociatedServer.validateJsonElement(jsonObj.get("associated_server"));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("protocol_absolute_name") != null && !jsonObj.get("protocol_absolute_name").isJsonNull()) && !jsonObj.get("protocol_absolute_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol_absolute_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol_absolute_name").toString()));
      }
      if ((jsonObj.get("provider_id") != null && !jsonObj.get("provider_id").isJsonNull()) && !jsonObj.get("provider_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_id").toString()));
      }
      if ((jsonObj.get("provider_type") != null && !jsonObj.get("provider_type").isJsonNull()) && !jsonObj.get("provider_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigServiceInstance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigServiceInstance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigServiceInstance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigServiceInstance.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigServiceInstance>() {
           @Override
           public void write(JsonWriter out, ConfigServiceInstance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigServiceInstance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigServiceInstance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigServiceInstance
   * @throws IOException if the JSON string is invalid with respect to ConfigServiceInstance
   */
  public static ConfigServiceInstance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigServiceInstance.class);
  }

  /**
   * Convert an instance of ConfigServiceInstance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

