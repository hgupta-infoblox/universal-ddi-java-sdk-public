/*
 * DNS Configuration API
 * The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UniversalServiceAssociation is a synthetic object representing either DNS View or DNS Zone associated with a Universal Service DNS capability.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:28.384903+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class ConfigUniversalServiceAssociation {
  public static final String SERIALIZED_NAME_ASSIGNED = "assigned";
  @SerializedName(SERIALIZED_NAME_ASSIGNED)
  @javax.annotation.Nullable
  private Boolean assigned;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  @javax.annotation.Nullable
  private Boolean disabled;

  public static final String SERIALIZED_NAME_FQDN = "fqdn";
  @SerializedName(SERIALIZED_NAME_FQDN)
  @javax.annotation.Nullable
  private String fqdn;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_NSG_CHAIN = "nsg_chain";
  @SerializedName(SERIALIZED_NAME_NSG_CHAIN)
  @javax.annotation.Nullable
  private Boolean nsgChain;

  public static final String SERIALIZED_NAME_PARENT_ID = "parent_id";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  @javax.annotation.Nullable
  private String parentId;

  public static final String SERIALIZED_NAME_PARENT_TYPE = "parent_type";
  @SerializedName(SERIALIZED_NAME_PARENT_TYPE)
  @javax.annotation.Nullable
  private String parentType;

  public static final String SERIALIZED_NAME_PRIMARY_TYPE = "primary_type";
  @SerializedName(SERIALIZED_NAME_PRIMARY_TYPE)
  @javax.annotation.Nullable
  private String primaryType;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Object tags;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_VIEW_ID = "view_id";
  @SerializedName(SERIALIZED_NAME_VIEW_ID)
  @javax.annotation.Nullable
  private String viewId;

  public ConfigUniversalServiceAssociation() {
  }

  public ConfigUniversalServiceAssociation(
     String id
  ) {
    this();
    this.id = id;
  }

  public ConfigUniversalServiceAssociation assigned(@javax.annotation.Nullable Boolean assigned) {
    this.assigned = assigned;
    return this;
  }

  /**
   * If _true_, the Zone is assigned to a given service. The flag is not meaningful and set to _false_ in items representing DNS View.
   * @return assigned
   */
  @javax.annotation.Nullable
  public Boolean getAssigned() {
    return assigned;
  }

  public void setAssigned(@javax.annotation.Nullable Boolean assigned) {
    this.assigned = assigned;
  }


  public ConfigUniversalServiceAssociation comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Comment from the referenced object.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  public ConfigUniversalServiceAssociation disabled(@javax.annotation.Nullable Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Disabled flag from the referenced object.
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(@javax.annotation.Nullable Boolean disabled) {
    this.disabled = disabled;
  }


  public ConfigUniversalServiceAssociation fqdn(@javax.annotation.Nullable String fqdn) {
    this.fqdn = fqdn;
    return this;
  }

  /**
   * Zone FQDN. The value is empty in items representing DNS View.
   * @return fqdn
   */
  @javax.annotation.Nullable
  public String getFqdn() {
    return fqdn;
  }

  public void setFqdn(@javax.annotation.Nullable String fqdn) {
    this.fqdn = fqdn;
  }


  /**
   * The resource identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public ConfigUniversalServiceAssociation name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of View or partial (relative to parent zone) name of Zone.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public ConfigUniversalServiceAssociation nsgChain(@javax.annotation.Nullable Boolean nsgChain) {
    this.nsgChain = nsgChain;
    return this;
  }

  /**
   * If _true_, the Zone is associated to a given service via assignment to a Name Server Group. If _false_, the Zone is associated to a given service via explicit assignment. The flag is not meaningful and set to _false_ in items representing DNS View.
   * @return nsgChain
   */
  @javax.annotation.Nullable
  public Boolean getNsgChain() {
    return nsgChain;
  }

  public void setNsgChain(@javax.annotation.Nullable Boolean nsgChain) {
    this.nsgChain = nsgChain;
  }


  public ConfigUniversalServiceAssociation parentId(@javax.annotation.Nullable String parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * The resource identifier.
   * @return parentId
   */
  @javax.annotation.Nullable
  public String getParentId() {
    return parentId;
  }

  public void setParentId(@javax.annotation.Nullable String parentId) {
    this.parentId = parentId;
  }


  public ConfigUniversalServiceAssociation parentType(@javax.annotation.Nullable String parentType) {
    this.parentType = parentType;
    return this;
  }

  /**
   * Parent object type. Allowed values:  * _auth_zone_: Authoritative Zone,  * _forward_zone_: Forward Zone,  * _view_: View,  * empty value, in items representing DNS View.
   * @return parentType
   */
  @javax.annotation.Nullable
  public String getParentType() {
    return parentType;
  }

  public void setParentType(@javax.annotation.Nullable String parentType) {
    this.parentType = parentType;
  }


  public ConfigUniversalServiceAssociation primaryType(@javax.annotation.Nullable String primaryType) {
    this.primaryType = primaryType;
    return this;
  }

  /**
   * Primary type for an Authoritative Zone. Allowed values:  * _external_: Zone is owned by an external nameserver,  * _cloud_: Zone is owned by a BloxOne Universal Service.
   * @return primaryType
   */
  @javax.annotation.Nullable
  public String getPrimaryType() {
    return primaryType;
  }

  public void setPrimaryType(@javax.annotation.Nullable String primaryType) {
    this.primaryType = primaryType;
  }


  public ConfigUniversalServiceAssociation tags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Tags from the referenced object.
   * @return tags
   */
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
  }


  public ConfigUniversalServiceAssociation type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Associated object type. Allowed values:  * _auth_zone_: Authoritative Zone,  * _forward_zone_: Forward Zone,  * _view_: DNS View.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public ConfigUniversalServiceAssociation viewId(@javax.annotation.Nullable String viewId) {
    this.viewId = viewId;
    return this;
  }

  /**
   * The resource identifier.
   * @return viewId
   */
  @javax.annotation.Nullable
  public String getViewId() {
    return viewId;
  }

  public void setViewId(@javax.annotation.Nullable String viewId) {
    this.viewId = viewId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigUniversalServiceAssociation configUniversalServiceAssociation = (ConfigUniversalServiceAssociation) o;
    return Objects.equals(this.assigned, configUniversalServiceAssociation.assigned) &&
        Objects.equals(this.comment, configUniversalServiceAssociation.comment) &&
        Objects.equals(this.disabled, configUniversalServiceAssociation.disabled) &&
        Objects.equals(this.fqdn, configUniversalServiceAssociation.fqdn) &&
        Objects.equals(this.id, configUniversalServiceAssociation.id) &&
        Objects.equals(this.name, configUniversalServiceAssociation.name) &&
        Objects.equals(this.nsgChain, configUniversalServiceAssociation.nsgChain) &&
        Objects.equals(this.parentId, configUniversalServiceAssociation.parentId) &&
        Objects.equals(this.parentType, configUniversalServiceAssociation.parentType) &&
        Objects.equals(this.primaryType, configUniversalServiceAssociation.primaryType) &&
        Objects.equals(this.tags, configUniversalServiceAssociation.tags) &&
        Objects.equals(this.type, configUniversalServiceAssociation.type) &&
        Objects.equals(this.viewId, configUniversalServiceAssociation.viewId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assigned, comment, disabled, fqdn, id, name, nsgChain, parentId, parentType, primaryType, tags, type, viewId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigUniversalServiceAssociation {\n");
    sb.append("    assigned: ").append(toIndentedString(assigned)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    fqdn: ").append(toIndentedString(fqdn)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nsgChain: ").append(toIndentedString(nsgChain)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    parentType: ").append(toIndentedString(parentType)).append("\n");
    sb.append("    primaryType: ").append(toIndentedString(primaryType)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    viewId: ").append(toIndentedString(viewId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assigned");
    openapiFields.add("comment");
    openapiFields.add("disabled");
    openapiFields.add("fqdn");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("nsg_chain");
    openapiFields.add("parent_id");
    openapiFields.add("parent_type");
    openapiFields.add("primary_type");
    openapiFields.add("tags");
    openapiFields.add("type");
    openapiFields.add("view_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigUniversalServiceAssociation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigUniversalServiceAssociation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigUniversalServiceAssociation is not found in the empty JSON string", ConfigUniversalServiceAssociation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigUniversalServiceAssociation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigUniversalServiceAssociation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("fqdn") != null && !jsonObj.get("fqdn").isJsonNull()) && !jsonObj.get("fqdn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fqdn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fqdn").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("parent_id") != null && !jsonObj.get("parent_id").isJsonNull()) && !jsonObj.get("parent_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_id").toString()));
      }
      if ((jsonObj.get("parent_type") != null && !jsonObj.get("parent_type").isJsonNull()) && !jsonObj.get("parent_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_type").toString()));
      }
      if ((jsonObj.get("primary_type") != null && !jsonObj.get("primary_type").isJsonNull()) && !jsonObj.get("primary_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_type").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("view_id") != null && !jsonObj.get("view_id").isJsonNull()) && !jsonObj.get("view_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `view_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("view_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigUniversalServiceAssociation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigUniversalServiceAssociation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigUniversalServiceAssociation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigUniversalServiceAssociation.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigUniversalServiceAssociation>() {
           @Override
           public void write(JsonWriter out, ConfigUniversalServiceAssociation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigUniversalServiceAssociation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigUniversalServiceAssociation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigUniversalServiceAssociation
   * @throws IOException if the JSON string is invalid with respect to ConfigUniversalServiceAssociation
   */
  public static ConfigUniversalServiceAssociation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigUniversalServiceAssociation.class);
  }

  /**
   * Convert an instance of ConfigUniversalServiceAssociation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

