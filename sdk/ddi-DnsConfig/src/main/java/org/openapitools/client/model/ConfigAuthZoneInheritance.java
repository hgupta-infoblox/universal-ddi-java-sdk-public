/*
 * DNS Configuration API
 * The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConfigInheritedACLItems;
import org.openapitools.client.model.ConfigInheritedZoneAuthority;
import org.openapitools.client.model.Inheritance2InheritedBool;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConfigAuthZoneInheritance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:28.384903+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class ConfigAuthZoneInheritance {
  public static final String SERIALIZED_NAME_GSS_TSIG_ENABLED = "gss_tsig_enabled";
  @SerializedName(SERIALIZED_NAME_GSS_TSIG_ENABLED)
  @javax.annotation.Nullable
  private Inheritance2InheritedBool gssTsigEnabled;

  public static final String SERIALIZED_NAME_NOTIFY = "notify";
  @SerializedName(SERIALIZED_NAME_NOTIFY)
  @javax.annotation.Nullable
  private Inheritance2InheritedBool notify;

  public static final String SERIALIZED_NAME_QUERY_ACL = "query_acl";
  @SerializedName(SERIALIZED_NAME_QUERY_ACL)
  @javax.annotation.Nullable
  private ConfigInheritedACLItems queryAcl;

  public static final String SERIALIZED_NAME_TRANSFER_ACL = "transfer_acl";
  @SerializedName(SERIALIZED_NAME_TRANSFER_ACL)
  @javax.annotation.Nullable
  private ConfigInheritedACLItems transferAcl;

  public static final String SERIALIZED_NAME_UPDATE_ACL = "update_acl";
  @SerializedName(SERIALIZED_NAME_UPDATE_ACL)
  @javax.annotation.Nullable
  private ConfigInheritedACLItems updateAcl;

  public static final String SERIALIZED_NAME_USE_FORWARDERS_FOR_SUBZONES = "use_forwarders_for_subzones";
  @SerializedName(SERIALIZED_NAME_USE_FORWARDERS_FOR_SUBZONES)
  @javax.annotation.Nullable
  private Inheritance2InheritedBool useForwardersForSubzones;

  public static final String SERIALIZED_NAME_ZONE_AUTHORITY = "zone_authority";
  @SerializedName(SERIALIZED_NAME_ZONE_AUTHORITY)
  @javax.annotation.Nullable
  private ConfigInheritedZoneAuthority zoneAuthority;

  public ConfigAuthZoneInheritance() {
  }

  public ConfigAuthZoneInheritance gssTsigEnabled(@javax.annotation.Nullable Inheritance2InheritedBool gssTsigEnabled) {
    this.gssTsigEnabled = gssTsigEnabled;
    return this;
  }

  /**
   * Get gssTsigEnabled
   * @return gssTsigEnabled
   */
  @javax.annotation.Nullable
  public Inheritance2InheritedBool getGssTsigEnabled() {
    return gssTsigEnabled;
  }

  public void setGssTsigEnabled(@javax.annotation.Nullable Inheritance2InheritedBool gssTsigEnabled) {
    this.gssTsigEnabled = gssTsigEnabled;
  }


  public ConfigAuthZoneInheritance notify(@javax.annotation.Nullable Inheritance2InheritedBool notify) {
    this.notify = notify;
    return this;
  }

  /**
   * Get notify
   * @return notify
   */
  @javax.annotation.Nullable
  public Inheritance2InheritedBool getNotify() {
    return notify;
  }

  public void setNotify(@javax.annotation.Nullable Inheritance2InheritedBool notify) {
    this.notify = notify;
  }


  public ConfigAuthZoneInheritance queryAcl(@javax.annotation.Nullable ConfigInheritedACLItems queryAcl) {
    this.queryAcl = queryAcl;
    return this;
  }

  /**
   * Get queryAcl
   * @return queryAcl
   */
  @javax.annotation.Nullable
  public ConfigInheritedACLItems getQueryAcl() {
    return queryAcl;
  }

  public void setQueryAcl(@javax.annotation.Nullable ConfigInheritedACLItems queryAcl) {
    this.queryAcl = queryAcl;
  }


  public ConfigAuthZoneInheritance transferAcl(@javax.annotation.Nullable ConfigInheritedACLItems transferAcl) {
    this.transferAcl = transferAcl;
    return this;
  }

  /**
   * Get transferAcl
   * @return transferAcl
   */
  @javax.annotation.Nullable
  public ConfigInheritedACLItems getTransferAcl() {
    return transferAcl;
  }

  public void setTransferAcl(@javax.annotation.Nullable ConfigInheritedACLItems transferAcl) {
    this.transferAcl = transferAcl;
  }


  public ConfigAuthZoneInheritance updateAcl(@javax.annotation.Nullable ConfigInheritedACLItems updateAcl) {
    this.updateAcl = updateAcl;
    return this;
  }

  /**
   * Get updateAcl
   * @return updateAcl
   */
  @javax.annotation.Nullable
  public ConfigInheritedACLItems getUpdateAcl() {
    return updateAcl;
  }

  public void setUpdateAcl(@javax.annotation.Nullable ConfigInheritedACLItems updateAcl) {
    this.updateAcl = updateAcl;
  }


  public ConfigAuthZoneInheritance useForwardersForSubzones(@javax.annotation.Nullable Inheritance2InheritedBool useForwardersForSubzones) {
    this.useForwardersForSubzones = useForwardersForSubzones;
    return this;
  }

  /**
   * Get useForwardersForSubzones
   * @return useForwardersForSubzones
   */
  @javax.annotation.Nullable
  public Inheritance2InheritedBool getUseForwardersForSubzones() {
    return useForwardersForSubzones;
  }

  public void setUseForwardersForSubzones(@javax.annotation.Nullable Inheritance2InheritedBool useForwardersForSubzones) {
    this.useForwardersForSubzones = useForwardersForSubzones;
  }


  public ConfigAuthZoneInheritance zoneAuthority(@javax.annotation.Nullable ConfigInheritedZoneAuthority zoneAuthority) {
    this.zoneAuthority = zoneAuthority;
    return this;
  }

  /**
   * Get zoneAuthority
   * @return zoneAuthority
   */
  @javax.annotation.Nullable
  public ConfigInheritedZoneAuthority getZoneAuthority() {
    return zoneAuthority;
  }

  public void setZoneAuthority(@javax.annotation.Nullable ConfigInheritedZoneAuthority zoneAuthority) {
    this.zoneAuthority = zoneAuthority;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigAuthZoneInheritance configAuthZoneInheritance = (ConfigAuthZoneInheritance) o;
    return Objects.equals(this.gssTsigEnabled, configAuthZoneInheritance.gssTsigEnabled) &&
        Objects.equals(this.notify, configAuthZoneInheritance.notify) &&
        Objects.equals(this.queryAcl, configAuthZoneInheritance.queryAcl) &&
        Objects.equals(this.transferAcl, configAuthZoneInheritance.transferAcl) &&
        Objects.equals(this.updateAcl, configAuthZoneInheritance.updateAcl) &&
        Objects.equals(this.useForwardersForSubzones, configAuthZoneInheritance.useForwardersForSubzones) &&
        Objects.equals(this.zoneAuthority, configAuthZoneInheritance.zoneAuthority);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gssTsigEnabled, notify, queryAcl, transferAcl, updateAcl, useForwardersForSubzones, zoneAuthority);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigAuthZoneInheritance {\n");
    sb.append("    gssTsigEnabled: ").append(toIndentedString(gssTsigEnabled)).append("\n");
    sb.append("    notify: ").append(toIndentedString(notify)).append("\n");
    sb.append("    queryAcl: ").append(toIndentedString(queryAcl)).append("\n");
    sb.append("    transferAcl: ").append(toIndentedString(transferAcl)).append("\n");
    sb.append("    updateAcl: ").append(toIndentedString(updateAcl)).append("\n");
    sb.append("    useForwardersForSubzones: ").append(toIndentedString(useForwardersForSubzones)).append("\n");
    sb.append("    zoneAuthority: ").append(toIndentedString(zoneAuthority)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gss_tsig_enabled");
    openapiFields.add("notify");
    openapiFields.add("query_acl");
    openapiFields.add("transfer_acl");
    openapiFields.add("update_acl");
    openapiFields.add("use_forwarders_for_subzones");
    openapiFields.add("zone_authority");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigAuthZoneInheritance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigAuthZoneInheritance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigAuthZoneInheritance is not found in the empty JSON string", ConfigAuthZoneInheritance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigAuthZoneInheritance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigAuthZoneInheritance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `gss_tsig_enabled`
      if (jsonObj.get("gss_tsig_enabled") != null && !jsonObj.get("gss_tsig_enabled").isJsonNull()) {
        Inheritance2InheritedBool.validateJsonElement(jsonObj.get("gss_tsig_enabled"));
      }
      // validate the optional field `notify`
      if (jsonObj.get("notify") != null && !jsonObj.get("notify").isJsonNull()) {
        Inheritance2InheritedBool.validateJsonElement(jsonObj.get("notify"));
      }
      // validate the optional field `query_acl`
      if (jsonObj.get("query_acl") != null && !jsonObj.get("query_acl").isJsonNull()) {
        ConfigInheritedACLItems.validateJsonElement(jsonObj.get("query_acl"));
      }
      // validate the optional field `transfer_acl`
      if (jsonObj.get("transfer_acl") != null && !jsonObj.get("transfer_acl").isJsonNull()) {
        ConfigInheritedACLItems.validateJsonElement(jsonObj.get("transfer_acl"));
      }
      // validate the optional field `update_acl`
      if (jsonObj.get("update_acl") != null && !jsonObj.get("update_acl").isJsonNull()) {
        ConfigInheritedACLItems.validateJsonElement(jsonObj.get("update_acl"));
      }
      // validate the optional field `use_forwarders_for_subzones`
      if (jsonObj.get("use_forwarders_for_subzones") != null && !jsonObj.get("use_forwarders_for_subzones").isJsonNull()) {
        Inheritance2InheritedBool.validateJsonElement(jsonObj.get("use_forwarders_for_subzones"));
      }
      // validate the optional field `zone_authority`
      if (jsonObj.get("zone_authority") != null && !jsonObj.get("zone_authority").isJsonNull()) {
        ConfigInheritedZoneAuthority.validateJsonElement(jsonObj.get("zone_authority"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigAuthZoneInheritance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigAuthZoneInheritance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigAuthZoneInheritance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigAuthZoneInheritance.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigAuthZoneInheritance>() {
           @Override
           public void write(JsonWriter out, ConfigAuthZoneInheritance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigAuthZoneInheritance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigAuthZoneInheritance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigAuthZoneInheritance
   * @throws IOException if the JSON string is invalid with respect to ConfigAuthZoneInheritance
   */
  public static ConfigAuthZoneInheritance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigAuthZoneInheritance.class);
  }

  /**
   * Convert an instance of ConfigAuthZoneInheritance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

