/*
 * DNS Configuration API
 * The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConfigAuthZoneConfig;
import org.openapitools.client.model.ConfigForwardZoneConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConfigBulkCopyView
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:28.384903+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class ConfigBulkCopyView {
  public static final String SERIALIZED_NAME_AUTH_ZONE_CONFIG = "auth_zone_config";
  @SerializedName(SERIALIZED_NAME_AUTH_ZONE_CONFIG)
  @javax.annotation.Nullable
  private ConfigAuthZoneConfig authZoneConfig;

  public static final String SERIALIZED_NAME_FORWARD_ZONE_CONFIG = "forward_zone_config";
  @SerializedName(SERIALIZED_NAME_FORWARD_ZONE_CONFIG)
  @javax.annotation.Nullable
  private ConfigForwardZoneConfig forwardZoneConfig;

  public static final String SERIALIZED_NAME_RECURSIVE = "recursive";
  @SerializedName(SERIALIZED_NAME_RECURSIVE)
  @javax.annotation.Nullable
  private Boolean recursive;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  @javax.annotation.Nonnull
  private List<String> resources = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECONDARY_ZONE_CONFIG = "secondary_zone_config";
  @SerializedName(SERIALIZED_NAME_SECONDARY_ZONE_CONFIG)
  @javax.annotation.Nullable
  private ConfigAuthZoneConfig secondaryZoneConfig;

  public static final String SERIALIZED_NAME_SKIP_ON_ERROR = "skip_on_error";
  @SerializedName(SERIALIZED_NAME_SKIP_ON_ERROR)
  @javax.annotation.Nullable
  private Boolean skipOnError;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  @javax.annotation.Nonnull
  private String target;

  public ConfigBulkCopyView() {
  }

  public ConfigBulkCopyView authZoneConfig(@javax.annotation.Nullable ConfigAuthZoneConfig authZoneConfig) {
    this.authZoneConfig = authZoneConfig;
    return this;
  }

  /**
   * Get authZoneConfig
   * @return authZoneConfig
   */
  @javax.annotation.Nullable
  public ConfigAuthZoneConfig getAuthZoneConfig() {
    return authZoneConfig;
  }

  public void setAuthZoneConfig(@javax.annotation.Nullable ConfigAuthZoneConfig authZoneConfig) {
    this.authZoneConfig = authZoneConfig;
  }


  public ConfigBulkCopyView forwardZoneConfig(@javax.annotation.Nullable ConfigForwardZoneConfig forwardZoneConfig) {
    this.forwardZoneConfig = forwardZoneConfig;
    return this;
  }

  /**
   * Get forwardZoneConfig
   * @return forwardZoneConfig
   */
  @javax.annotation.Nullable
  public ConfigForwardZoneConfig getForwardZoneConfig() {
    return forwardZoneConfig;
  }

  public void setForwardZoneConfig(@javax.annotation.Nullable ConfigForwardZoneConfig forwardZoneConfig) {
    this.forwardZoneConfig = forwardZoneConfig;
  }


  public ConfigBulkCopyView recursive(@javax.annotation.Nullable Boolean recursive) {
    this.recursive = recursive;
    return this;
  }

  /**
   * Indicates whether child objects should be copied or not.  Defaults to _false_. Reserved for future use.
   * @return recursive
   */
  @javax.annotation.Nullable
  public Boolean getRecursive() {
    return recursive;
  }

  public void setRecursive(@javax.annotation.Nullable Boolean recursive) {
    this.recursive = recursive;
  }


  public ConfigBulkCopyView resources(@javax.annotation.Nonnull List<String> resources) {
    this.resources = resources;
    return this;
  }

  public ConfigBulkCopyView addResourcesItem(String resourcesItem) {
    if (this.resources == null) {
      this.resources = new ArrayList<>();
    }
    this.resources.add(resourcesItem);
    return this;
  }

  /**
   * The resource identifier.
   * @return resources
   */
  @javax.annotation.Nonnull
  public List<String> getResources() {
    return resources;
  }

  public void setResources(@javax.annotation.Nonnull List<String> resources) {
    this.resources = resources;
  }


  public ConfigBulkCopyView secondaryZoneConfig(@javax.annotation.Nullable ConfigAuthZoneConfig secondaryZoneConfig) {
    this.secondaryZoneConfig = secondaryZoneConfig;
    return this;
  }

  /**
   * Get secondaryZoneConfig
   * @return secondaryZoneConfig
   */
  @javax.annotation.Nullable
  public ConfigAuthZoneConfig getSecondaryZoneConfig() {
    return secondaryZoneConfig;
  }

  public void setSecondaryZoneConfig(@javax.annotation.Nullable ConfigAuthZoneConfig secondaryZoneConfig) {
    this.secondaryZoneConfig = secondaryZoneConfig;
  }


  public ConfigBulkCopyView skipOnError(@javax.annotation.Nullable Boolean skipOnError) {
    this.skipOnError = skipOnError;
    return this;
  }

  /**
   * Indicates whether copying should skip object in case of error and continue with next, or abort copying in case of error.  Defaults to _false_.
   * @return skipOnError
   */
  @javax.annotation.Nullable
  public Boolean getSkipOnError() {
    return skipOnError;
  }

  public void setSkipOnError(@javax.annotation.Nullable Boolean skipOnError) {
    this.skipOnError = skipOnError;
  }


  public ConfigBulkCopyView target(@javax.annotation.Nonnull String target) {
    this.target = target;
    return this;
  }

  /**
   * The resource identifier.
   * @return target
   */
  @javax.annotation.Nonnull
  public String getTarget() {
    return target;
  }

  public void setTarget(@javax.annotation.Nonnull String target) {
    this.target = target;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigBulkCopyView configBulkCopyView = (ConfigBulkCopyView) o;
    return Objects.equals(this.authZoneConfig, configBulkCopyView.authZoneConfig) &&
        Objects.equals(this.forwardZoneConfig, configBulkCopyView.forwardZoneConfig) &&
        Objects.equals(this.recursive, configBulkCopyView.recursive) &&
        Objects.equals(this.resources, configBulkCopyView.resources) &&
        Objects.equals(this.secondaryZoneConfig, configBulkCopyView.secondaryZoneConfig) &&
        Objects.equals(this.skipOnError, configBulkCopyView.skipOnError) &&
        Objects.equals(this.target, configBulkCopyView.target);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authZoneConfig, forwardZoneConfig, recursive, resources, secondaryZoneConfig, skipOnError, target);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigBulkCopyView {\n");
    sb.append("    authZoneConfig: ").append(toIndentedString(authZoneConfig)).append("\n");
    sb.append("    forwardZoneConfig: ").append(toIndentedString(forwardZoneConfig)).append("\n");
    sb.append("    recursive: ").append(toIndentedString(recursive)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    secondaryZoneConfig: ").append(toIndentedString(secondaryZoneConfig)).append("\n");
    sb.append("    skipOnError: ").append(toIndentedString(skipOnError)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auth_zone_config");
    openapiFields.add("forward_zone_config");
    openapiFields.add("recursive");
    openapiFields.add("resources");
    openapiFields.add("secondary_zone_config");
    openapiFields.add("skip_on_error");
    openapiFields.add("target");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("resources");
    openapiRequiredFields.add("target");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigBulkCopyView
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigBulkCopyView.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigBulkCopyView is not found in the empty JSON string", ConfigBulkCopyView.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigBulkCopyView.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigBulkCopyView` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConfigBulkCopyView.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `auth_zone_config`
      if (jsonObj.get("auth_zone_config") != null && !jsonObj.get("auth_zone_config").isJsonNull()) {
        ConfigAuthZoneConfig.validateJsonElement(jsonObj.get("auth_zone_config"));
      }
      // validate the optional field `forward_zone_config`
      if (jsonObj.get("forward_zone_config") != null && !jsonObj.get("forward_zone_config").isJsonNull()) {
        ConfigForwardZoneConfig.validateJsonElement(jsonObj.get("forward_zone_config"));
      }
      // ensure the required json array is present
      if (jsonObj.get("resources") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("resources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `resources` to be an array in the JSON string but got `%s`", jsonObj.get("resources").toString()));
      }
      // validate the optional field `secondary_zone_config`
      if (jsonObj.get("secondary_zone_config") != null && !jsonObj.get("secondary_zone_config").isJsonNull()) {
        ConfigAuthZoneConfig.validateJsonElement(jsonObj.get("secondary_zone_config"));
      }
      if (!jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigBulkCopyView.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigBulkCopyView' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigBulkCopyView> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigBulkCopyView.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigBulkCopyView>() {
           @Override
           public void write(JsonWriter out, ConfigBulkCopyView value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigBulkCopyView read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigBulkCopyView given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigBulkCopyView
   * @throws IOException if the JSON string is invalid with respect to ConfigBulkCopyView
   */
  public static ConfigBulkCopyView fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigBulkCopyView.class);
  }

  /**
   * Convert an instance of ConfigBulkCopyView to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

