/*
 * DNS Configuration API
 * The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConfigFTCConfig;
import org.openapitools.client.model.ConfigHostAssociatedServer;
import org.openapitools.client.model.ConfigHostInheritance;
import org.openapitools.client.model.ConfigHostInterface;
import org.openapitools.client.model.ConfigKerberosKey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A DNS Host (_dns/host_) object associates DNS configuraton with hosts.   Automatically created and destroyed based on the hosts known to the platform.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:28.384903+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class ConfigHost {
  public static final String SERIALIZED_NAME_ABSOLUTE_NAME = "absolute_name";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE_NAME)
  @javax.annotation.Nullable
  private String absoluteName;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nullable
  private String address;

  public static final String SERIALIZED_NAME_ANYCAST_ADDRESSES = "anycast_addresses";
  @SerializedName(SERIALIZED_NAME_ANYCAST_ADDRESSES)
  @javax.annotation.Nullable
  private List<String> anycastAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASSOCIATED_SERVER = "associated_server";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_SERVER)
  @javax.annotation.Nullable
  private ConfigHostAssociatedServer associatedServer;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_CURRENT_VERSION = "current_version";
  @SerializedName(SERIALIZED_NAME_CURRENT_VERSION)
  @javax.annotation.Nullable
  private String currentVersion;

  public static final String SERIALIZED_NAME_DFP = "dfp";
  @SerializedName(SERIALIZED_NAME_DFP)
  @javax.annotation.Nullable
  private Boolean dfp;

  public static final String SERIALIZED_NAME_DFP_SERVICE = "dfp_service";
  @SerializedName(SERIALIZED_NAME_DFP_SERVICE)
  @javax.annotation.Nullable
  private String dfpService;

  public static final String SERIALIZED_NAME_EXTERNAL_PROVIDERS_METADATA = "external_providers_metadata";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_PROVIDERS_METADATA)
  @javax.annotation.Nullable
  private Object externalProvidersMetadata;

  public static final String SERIALIZED_NAME_FAULT_TOLERANT_CACHING = "fault_tolerant_caching";
  @SerializedName(SERIALIZED_NAME_FAULT_TOLERANT_CACHING)
  @javax.annotation.Nullable
  private ConfigFTCConfig faultTolerantCaching;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_INHERITANCE_SOURCES = "inheritance_sources";
  @SerializedName(SERIALIZED_NAME_INHERITANCE_SOURCES)
  @javax.annotation.Nullable
  private ConfigHostInheritance inheritanceSources;

  public static final String SERIALIZED_NAME_INTERFACES = "interfaces";
  @SerializedName(SERIALIZED_NAME_INTERFACES)
  @javax.annotation.Nullable
  private List<ConfigHostInterface> interfaces = new ArrayList<>();

  public static final String SERIALIZED_NAME_KERBEROS_KEYS = "kerberos_keys";
  @SerializedName(SERIALIZED_NAME_KERBEROS_KEYS)
  @javax.annotation.Nullable
  private List<ConfigKerberosKey> kerberosKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_OPHID = "ophid";
  @SerializedName(SERIALIZED_NAME_OPHID)
  @javax.annotation.Nullable
  private String ophid;

  public static final String SERIALIZED_NAME_PROTOCOL_ABSOLUTE_NAME = "protocol_absolute_name";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_ABSOLUTE_NAME)
  @javax.annotation.Nullable
  private String protocolAbsoluteName;

  public static final String SERIALIZED_NAME_PROVIDER_ID = "provider_id";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ID)
  @javax.annotation.Nullable
  private String providerId;

  public static final String SERIALIZED_NAME_SERVER = "server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  @javax.annotation.Nullable
  private String server;

  public static final String SERIALIZED_NAME_SITE_ID = "site_id";
  @SerializedName(SERIALIZED_NAME_SITE_ID)
  @javax.annotation.Nullable
  private String siteId;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Object tags;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public ConfigHost() {
  }

  public ConfigHost(
     String absoluteName, 
     String address, 
     List<String> anycastAddresses, 
     String comment, 
     String currentVersion, 
     Boolean dfp, 
     String dfpService, 
     String id, 
     String name, 
     String ophid, 
     String protocolAbsoluteName, 
     String providerId, 
     String siteId, 
     String type
  ) {
    this();
    this.absoluteName = absoluteName;
    this.address = address;
    this.anycastAddresses = anycastAddresses;
    this.comment = comment;
    this.currentVersion = currentVersion;
    this.dfp = dfp;
    this.dfpService = dfpService;
    this.id = id;
    this.name = name;
    this.ophid = ophid;
    this.protocolAbsoluteName = protocolAbsoluteName;
    this.providerId = providerId;
    this.siteId = siteId;
    this.type = type;
  }

  /**
   * Host FQDN.
   * @return absoluteName
   */
  @javax.annotation.Nullable
  public String getAbsoluteName() {
    return absoluteName;
  }



  /**
   * Host&#39;s primary IP Address.
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }



  /**
   * Anycast address configured to the host. Order is not significant.
   * @return anycastAddresses
   */
  @javax.annotation.Nullable
  public List<String> getAnycastAddresses() {
    return anycastAddresses;
  }



  public ConfigHost associatedServer(@javax.annotation.Nullable ConfigHostAssociatedServer associatedServer) {
    this.associatedServer = associatedServer;
    return this;
  }

  /**
   * Get associatedServer
   * @return associatedServer
   */
  @javax.annotation.Nullable
  public ConfigHostAssociatedServer getAssociatedServer() {
    return associatedServer;
  }

  public void setAssociatedServer(@javax.annotation.Nullable ConfigHostAssociatedServer associatedServer) {
    this.associatedServer = associatedServer;
  }


  /**
   * Host description.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }



  /**
   * Host current version.
   * @return currentVersion
   */
  @javax.annotation.Nullable
  public String getCurrentVersion() {
    return currentVersion;
  }



  /**
   * Below _dfp_ field is deprecated and not supported anymore. The indication whether or not BloxOne DDI DNS and BloxOne TD DFP are both active on the host will be migrated into the new _dfp_service_ field.
   * @return dfp
   */
  @javax.annotation.Nullable
  public Boolean getDfp() {
    return dfp;
  }



  /**
   * DFP service indicates whether or not BloxOne DDI DNS and BloxOne TD DFP are both active on the host. If so, BloxOne DDI DNS will augment recursive queries and forward them to BloxOne TD DFP. Allowed values:  * _unavailable_: BloxOne TD DFP application is not available,  * _enabled_: BloxOne TD DFP application is available and enabled,  * _disabled_: BloxOne TD DFP application is available but disabled.
   * @return dfpService
   */
  @javax.annotation.Nullable
  public String getDfpService() {
    return dfpService;
  }



  public ConfigHost externalProvidersMetadata(@javax.annotation.Nullable Object externalProvidersMetadata) {
    this.externalProvidersMetadata = externalProvidersMetadata;
    return this;
  }

  /**
   * Get externalProvidersMetadata
   * @return externalProvidersMetadata
   */
  @javax.annotation.Nullable
  public Object getExternalProvidersMetadata() {
    return externalProvidersMetadata;
  }

  public void setExternalProvidersMetadata(@javax.annotation.Nullable Object externalProvidersMetadata) {
    this.externalProvidersMetadata = externalProvidersMetadata;
  }


  public ConfigHost faultTolerantCaching(@javax.annotation.Nullable ConfigFTCConfig faultTolerantCaching) {
    this.faultTolerantCaching = faultTolerantCaching;
    return this;
  }

  /**
   * Get faultTolerantCaching
   * @return faultTolerantCaching
   */
  @javax.annotation.Nullable
  public ConfigFTCConfig getFaultTolerantCaching() {
    return faultTolerantCaching;
  }

  public void setFaultTolerantCaching(@javax.annotation.Nullable ConfigFTCConfig faultTolerantCaching) {
    this.faultTolerantCaching = faultTolerantCaching;
  }


  /**
   * The resource identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public ConfigHost inheritanceSources(@javax.annotation.Nullable ConfigHostInheritance inheritanceSources) {
    this.inheritanceSources = inheritanceSources;
    return this;
  }

  /**
   * Get inheritanceSources
   * @return inheritanceSources
   */
  @javax.annotation.Nullable
  public ConfigHostInheritance getInheritanceSources() {
    return inheritanceSources;
  }

  public void setInheritanceSources(@javax.annotation.Nullable ConfigHostInheritance inheritanceSources) {
    this.inheritanceSources = inheritanceSources;
  }


  public ConfigHost interfaces(@javax.annotation.Nullable List<ConfigHostInterface> interfaces) {
    this.interfaces = interfaces;
    return this;
  }

  public ConfigHost addInterfacesItem(ConfigHostInterface interfacesItem) {
    if (this.interfaces == null) {
      this.interfaces = new ArrayList<>();
    }
    this.interfaces.add(interfacesItem);
    return this;
  }

  /**
   * Host Interfaces. This field is added as part of the inbound endpoint support where we want to add multiple IP Addresses for a proxy host. It can only be updated using the OBO token.
   * @return interfaces
   */
  @javax.annotation.Nullable
  public List<ConfigHostInterface> getInterfaces() {
    return interfaces;
  }

  public void setInterfaces(@javax.annotation.Nullable List<ConfigHostInterface> interfaces) {
    this.interfaces = interfaces;
  }


  public ConfigHost kerberosKeys(@javax.annotation.Nullable List<ConfigKerberosKey> kerberosKeys) {
    this.kerberosKeys = kerberosKeys;
    return this;
  }

  public ConfigHost addKerberosKeysItem(ConfigKerberosKey kerberosKeysItem) {
    if (this.kerberosKeys == null) {
      this.kerberosKeys = new ArrayList<>();
    }
    this.kerberosKeys.add(kerberosKeysItem);
    return this;
  }

  /**
   * Optional. _kerberos_keys_ contains a list of keys for GSS-TSIG signed dynamic updates.  Defaults to empty.
   * @return kerberosKeys
   */
  @javax.annotation.Nullable
  public List<ConfigKerberosKey> getKerberosKeys() {
    return kerberosKeys;
  }

  public void setKerberosKeys(@javax.annotation.Nullable List<ConfigKerberosKey> kerberosKeys) {
    this.kerberosKeys = kerberosKeys;
  }


  /**
   * Host display name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * On-Prem Host ID.
   * @return ophid
   */
  @javax.annotation.Nullable
  public String getOphid() {
    return ophid;
  }



  /**
   * Host FQDN in punycode.
   * @return protocolAbsoluteName
   */
  @javax.annotation.Nullable
  public String getProtocolAbsoluteName() {
    return protocolAbsoluteName;
  }



  /**
   * External provider identifier.
   * @return providerId
   */
  @javax.annotation.Nullable
  public String getProviderId() {
    return providerId;
  }



  public ConfigHost server(@javax.annotation.Nullable String server) {
    this.server = server;
    return this;
  }

  /**
   * The resource identifier.
   * @return server
   */
  @javax.annotation.Nullable
  public String getServer() {
    return server;
  }

  public void setServer(@javax.annotation.Nullable String server) {
    this.server = server;
  }


  /**
   * Host site ID.
   * @return siteId
   */
  @javax.annotation.Nullable
  public String getSiteId() {
    return siteId;
  }



  public ConfigHost tags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Host tagging specifics.
   * @return tags
   */
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
  }


  /**
   * Defines the type of host. Allowed values:  * _bloxone_ddi_: host type is BloxOne DDI,  * _microsoft_azure_: host type is Microsoft Azure,  * _amazon_web_service_: host type is Amazon Web Services,  * _microsoft_active_directory_: host type is Microsoft Active Directory,  * _google_cloud_platform_: host type is Google Cloud Platform.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigHost configHost = (ConfigHost) o;
    return Objects.equals(this.absoluteName, configHost.absoluteName) &&
        Objects.equals(this.address, configHost.address) &&
        Objects.equals(this.anycastAddresses, configHost.anycastAddresses) &&
        Objects.equals(this.associatedServer, configHost.associatedServer) &&
        Objects.equals(this.comment, configHost.comment) &&
        Objects.equals(this.currentVersion, configHost.currentVersion) &&
        Objects.equals(this.dfp, configHost.dfp) &&
        Objects.equals(this.dfpService, configHost.dfpService) &&
        Objects.equals(this.externalProvidersMetadata, configHost.externalProvidersMetadata) &&
        Objects.equals(this.faultTolerantCaching, configHost.faultTolerantCaching) &&
        Objects.equals(this.id, configHost.id) &&
        Objects.equals(this.inheritanceSources, configHost.inheritanceSources) &&
        Objects.equals(this.interfaces, configHost.interfaces) &&
        Objects.equals(this.kerberosKeys, configHost.kerberosKeys) &&
        Objects.equals(this.name, configHost.name) &&
        Objects.equals(this.ophid, configHost.ophid) &&
        Objects.equals(this.protocolAbsoluteName, configHost.protocolAbsoluteName) &&
        Objects.equals(this.providerId, configHost.providerId) &&
        Objects.equals(this.server, configHost.server) &&
        Objects.equals(this.siteId, configHost.siteId) &&
        Objects.equals(this.tags, configHost.tags) &&
        Objects.equals(this.type, configHost.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(absoluteName, address, anycastAddresses, associatedServer, comment, currentVersion, dfp, dfpService, externalProvidersMetadata, faultTolerantCaching, id, inheritanceSources, interfaces, kerberosKeys, name, ophid, protocolAbsoluteName, providerId, server, siteId, tags, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigHost {\n");
    sb.append("    absoluteName: ").append(toIndentedString(absoluteName)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    anycastAddresses: ").append(toIndentedString(anycastAddresses)).append("\n");
    sb.append("    associatedServer: ").append(toIndentedString(associatedServer)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    currentVersion: ").append(toIndentedString(currentVersion)).append("\n");
    sb.append("    dfp: ").append(toIndentedString(dfp)).append("\n");
    sb.append("    dfpService: ").append(toIndentedString(dfpService)).append("\n");
    sb.append("    externalProvidersMetadata: ").append(toIndentedString(externalProvidersMetadata)).append("\n");
    sb.append("    faultTolerantCaching: ").append(toIndentedString(faultTolerantCaching)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inheritanceSources: ").append(toIndentedString(inheritanceSources)).append("\n");
    sb.append("    interfaces: ").append(toIndentedString(interfaces)).append("\n");
    sb.append("    kerberosKeys: ").append(toIndentedString(kerberosKeys)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ophid: ").append(toIndentedString(ophid)).append("\n");
    sb.append("    protocolAbsoluteName: ").append(toIndentedString(protocolAbsoluteName)).append("\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("absolute_name");
    openapiFields.add("address");
    openapiFields.add("anycast_addresses");
    openapiFields.add("associated_server");
    openapiFields.add("comment");
    openapiFields.add("current_version");
    openapiFields.add("dfp");
    openapiFields.add("dfp_service");
    openapiFields.add("external_providers_metadata");
    openapiFields.add("fault_tolerant_caching");
    openapiFields.add("id");
    openapiFields.add("inheritance_sources");
    openapiFields.add("interfaces");
    openapiFields.add("kerberos_keys");
    openapiFields.add("name");
    openapiFields.add("ophid");
    openapiFields.add("protocol_absolute_name");
    openapiFields.add("provider_id");
    openapiFields.add("server");
    openapiFields.add("site_id");
    openapiFields.add("tags");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigHost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigHost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigHost is not found in the empty JSON string", ConfigHost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigHost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigHost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("absolute_name") != null && !jsonObj.get("absolute_name").isJsonNull()) && !jsonObj.get("absolute_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `absolute_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("absolute_name").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("anycast_addresses") != null && !jsonObj.get("anycast_addresses").isJsonNull() && !jsonObj.get("anycast_addresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `anycast_addresses` to be an array in the JSON string but got `%s`", jsonObj.get("anycast_addresses").toString()));
      }
      // validate the optional field `associated_server`
      if (jsonObj.get("associated_server") != null && !jsonObj.get("associated_server").isJsonNull()) {
        ConfigHostAssociatedServer.validateJsonElement(jsonObj.get("associated_server"));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("current_version") != null && !jsonObj.get("current_version").isJsonNull()) && !jsonObj.get("current_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_version").toString()));
      }
      if ((jsonObj.get("dfp_service") != null && !jsonObj.get("dfp_service").isJsonNull()) && !jsonObj.get("dfp_service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dfp_service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dfp_service").toString()));
      }
      // validate the optional field `fault_tolerant_caching`
      if (jsonObj.get("fault_tolerant_caching") != null && !jsonObj.get("fault_tolerant_caching").isJsonNull()) {
        ConfigFTCConfig.validateJsonElement(jsonObj.get("fault_tolerant_caching"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `inheritance_sources`
      if (jsonObj.get("inheritance_sources") != null && !jsonObj.get("inheritance_sources").isJsonNull()) {
        ConfigHostInheritance.validateJsonElement(jsonObj.get("inheritance_sources"));
      }
      if (jsonObj.get("interfaces") != null && !jsonObj.get("interfaces").isJsonNull()) {
        JsonArray jsonArrayinterfaces = jsonObj.getAsJsonArray("interfaces");
        if (jsonArrayinterfaces != null) {
          // ensure the json data is an array
          if (!jsonObj.get("interfaces").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `interfaces` to be an array in the JSON string but got `%s`", jsonObj.get("interfaces").toString()));
          }

          // validate the optional field `interfaces` (array)
          for (int i = 0; i < jsonArrayinterfaces.size(); i++) {
            ConfigHostInterface.validateJsonElement(jsonArrayinterfaces.get(i));
          };
        }
      }
      if (jsonObj.get("kerberos_keys") != null && !jsonObj.get("kerberos_keys").isJsonNull()) {
        JsonArray jsonArraykerberosKeys = jsonObj.getAsJsonArray("kerberos_keys");
        if (jsonArraykerberosKeys != null) {
          // ensure the json data is an array
          if (!jsonObj.get("kerberos_keys").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `kerberos_keys` to be an array in the JSON string but got `%s`", jsonObj.get("kerberos_keys").toString()));
          }

          // validate the optional field `kerberos_keys` (array)
          for (int i = 0; i < jsonArraykerberosKeys.size(); i++) {
            ConfigKerberosKey.validateJsonElement(jsonArraykerberosKeys.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("ophid") != null && !jsonObj.get("ophid").isJsonNull()) && !jsonObj.get("ophid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ophid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ophid").toString()));
      }
      if ((jsonObj.get("protocol_absolute_name") != null && !jsonObj.get("protocol_absolute_name").isJsonNull()) && !jsonObj.get("protocol_absolute_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol_absolute_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol_absolute_name").toString()));
      }
      if ((jsonObj.get("provider_id") != null && !jsonObj.get("provider_id").isJsonNull()) && !jsonObj.get("provider_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_id").toString()));
      }
      if ((jsonObj.get("server") != null && !jsonObj.get("server").isJsonNull()) && !jsonObj.get("server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server").toString()));
      }
      if ((jsonObj.get("site_id") != null && !jsonObj.get("site_id").isJsonNull()) && !jsonObj.get("site_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `site_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("site_id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigHost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigHost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigHost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigHost.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigHost>() {
           @Override
           public void write(JsonWriter out, ConfigHost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigHost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigHost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigHost
   * @throws IOException if the JSON string is invalid with respect to ConfigHost
   */
  public static ConfigHost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigHost.class);
  }

  /**
   * Convert an instance of ConfigHost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

