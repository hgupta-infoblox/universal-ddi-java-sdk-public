/*
 * DNS Configuration API
 * The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConfigInheritedZoneAuthorityMNameBlock;
import org.openapitools.client.model.Inheritance2InheritedString;
import org.openapitools.client.model.Inheritance2InheritedUInt32;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Inheritance configuration for a field of type _ZoneAuthority_.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:28.384903+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class ConfigInheritedZoneAuthority {
  public static final String SERIALIZED_NAME_DEFAULT_TTL = "default_ttl";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TTL)
  @javax.annotation.Nullable
  private Inheritance2InheritedUInt32 defaultTtl;

  public static final String SERIALIZED_NAME_EXPIRE = "expire";
  @SerializedName(SERIALIZED_NAME_EXPIRE)
  @javax.annotation.Nullable
  private Inheritance2InheritedUInt32 expire;

  public static final String SERIALIZED_NAME_MNAME_BLOCK = "mname_block";
  @SerializedName(SERIALIZED_NAME_MNAME_BLOCK)
  @javax.annotation.Nullable
  private ConfigInheritedZoneAuthorityMNameBlock mnameBlock;

  public static final String SERIALIZED_NAME_NEGATIVE_TTL = "negative_ttl";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_TTL)
  @javax.annotation.Nullable
  private Inheritance2InheritedUInt32 negativeTtl;

  public static final String SERIALIZED_NAME_PROTOCOL_RNAME = "protocol_rname";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_RNAME)
  @javax.annotation.Nullable
  private Inheritance2InheritedString protocolRname;

  public static final String SERIALIZED_NAME_REFRESH = "refresh";
  @SerializedName(SERIALIZED_NAME_REFRESH)
  @javax.annotation.Nullable
  private Inheritance2InheritedUInt32 refresh;

  public static final String SERIALIZED_NAME_RETRY = "retry";
  @SerializedName(SERIALIZED_NAME_RETRY)
  @javax.annotation.Nullable
  private Inheritance2InheritedUInt32 retry;

  public static final String SERIALIZED_NAME_RNAME = "rname";
  @SerializedName(SERIALIZED_NAME_RNAME)
  @javax.annotation.Nullable
  private Inheritance2InheritedString rname;

  public ConfigInheritedZoneAuthority() {
  }

  public ConfigInheritedZoneAuthority defaultTtl(@javax.annotation.Nullable Inheritance2InheritedUInt32 defaultTtl) {
    this.defaultTtl = defaultTtl;
    return this;
  }

  /**
   * Get defaultTtl
   * @return defaultTtl
   */
  @javax.annotation.Nullable
  public Inheritance2InheritedUInt32 getDefaultTtl() {
    return defaultTtl;
  }

  public void setDefaultTtl(@javax.annotation.Nullable Inheritance2InheritedUInt32 defaultTtl) {
    this.defaultTtl = defaultTtl;
  }


  public ConfigInheritedZoneAuthority expire(@javax.annotation.Nullable Inheritance2InheritedUInt32 expire) {
    this.expire = expire;
    return this;
  }

  /**
   * Get expire
   * @return expire
   */
  @javax.annotation.Nullable
  public Inheritance2InheritedUInt32 getExpire() {
    return expire;
  }

  public void setExpire(@javax.annotation.Nullable Inheritance2InheritedUInt32 expire) {
    this.expire = expire;
  }


  public ConfigInheritedZoneAuthority mnameBlock(@javax.annotation.Nullable ConfigInheritedZoneAuthorityMNameBlock mnameBlock) {
    this.mnameBlock = mnameBlock;
    return this;
  }

  /**
   * Get mnameBlock
   * @return mnameBlock
   */
  @javax.annotation.Nullable
  public ConfigInheritedZoneAuthorityMNameBlock getMnameBlock() {
    return mnameBlock;
  }

  public void setMnameBlock(@javax.annotation.Nullable ConfigInheritedZoneAuthorityMNameBlock mnameBlock) {
    this.mnameBlock = mnameBlock;
  }


  public ConfigInheritedZoneAuthority negativeTtl(@javax.annotation.Nullable Inheritance2InheritedUInt32 negativeTtl) {
    this.negativeTtl = negativeTtl;
    return this;
  }

  /**
   * Get negativeTtl
   * @return negativeTtl
   */
  @javax.annotation.Nullable
  public Inheritance2InheritedUInt32 getNegativeTtl() {
    return negativeTtl;
  }

  public void setNegativeTtl(@javax.annotation.Nullable Inheritance2InheritedUInt32 negativeTtl) {
    this.negativeTtl = negativeTtl;
  }


  public ConfigInheritedZoneAuthority protocolRname(@javax.annotation.Nullable Inheritance2InheritedString protocolRname) {
    this.protocolRname = protocolRname;
    return this;
  }

  /**
   * Get protocolRname
   * @return protocolRname
   */
  @javax.annotation.Nullable
  public Inheritance2InheritedString getProtocolRname() {
    return protocolRname;
  }

  public void setProtocolRname(@javax.annotation.Nullable Inheritance2InheritedString protocolRname) {
    this.protocolRname = protocolRname;
  }


  public ConfigInheritedZoneAuthority refresh(@javax.annotation.Nullable Inheritance2InheritedUInt32 refresh) {
    this.refresh = refresh;
    return this;
  }

  /**
   * Get refresh
   * @return refresh
   */
  @javax.annotation.Nullable
  public Inheritance2InheritedUInt32 getRefresh() {
    return refresh;
  }

  public void setRefresh(@javax.annotation.Nullable Inheritance2InheritedUInt32 refresh) {
    this.refresh = refresh;
  }


  public ConfigInheritedZoneAuthority retry(@javax.annotation.Nullable Inheritance2InheritedUInt32 retry) {
    this.retry = retry;
    return this;
  }

  /**
   * Get retry
   * @return retry
   */
  @javax.annotation.Nullable
  public Inheritance2InheritedUInt32 getRetry() {
    return retry;
  }

  public void setRetry(@javax.annotation.Nullable Inheritance2InheritedUInt32 retry) {
    this.retry = retry;
  }


  public ConfigInheritedZoneAuthority rname(@javax.annotation.Nullable Inheritance2InheritedString rname) {
    this.rname = rname;
    return this;
  }

  /**
   * Get rname
   * @return rname
   */
  @javax.annotation.Nullable
  public Inheritance2InheritedString getRname() {
    return rname;
  }

  public void setRname(@javax.annotation.Nullable Inheritance2InheritedString rname) {
    this.rname = rname;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigInheritedZoneAuthority configInheritedZoneAuthority = (ConfigInheritedZoneAuthority) o;
    return Objects.equals(this.defaultTtl, configInheritedZoneAuthority.defaultTtl) &&
        Objects.equals(this.expire, configInheritedZoneAuthority.expire) &&
        Objects.equals(this.mnameBlock, configInheritedZoneAuthority.mnameBlock) &&
        Objects.equals(this.negativeTtl, configInheritedZoneAuthority.negativeTtl) &&
        Objects.equals(this.protocolRname, configInheritedZoneAuthority.protocolRname) &&
        Objects.equals(this.refresh, configInheritedZoneAuthority.refresh) &&
        Objects.equals(this.retry, configInheritedZoneAuthority.retry) &&
        Objects.equals(this.rname, configInheritedZoneAuthority.rname);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultTtl, expire, mnameBlock, negativeTtl, protocolRname, refresh, retry, rname);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigInheritedZoneAuthority {\n");
    sb.append("    defaultTtl: ").append(toIndentedString(defaultTtl)).append("\n");
    sb.append("    expire: ").append(toIndentedString(expire)).append("\n");
    sb.append("    mnameBlock: ").append(toIndentedString(mnameBlock)).append("\n");
    sb.append("    negativeTtl: ").append(toIndentedString(negativeTtl)).append("\n");
    sb.append("    protocolRname: ").append(toIndentedString(protocolRname)).append("\n");
    sb.append("    refresh: ").append(toIndentedString(refresh)).append("\n");
    sb.append("    retry: ").append(toIndentedString(retry)).append("\n");
    sb.append("    rname: ").append(toIndentedString(rname)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("default_ttl");
    openapiFields.add("expire");
    openapiFields.add("mname_block");
    openapiFields.add("negative_ttl");
    openapiFields.add("protocol_rname");
    openapiFields.add("refresh");
    openapiFields.add("retry");
    openapiFields.add("rname");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigInheritedZoneAuthority
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigInheritedZoneAuthority.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigInheritedZoneAuthority is not found in the empty JSON string", ConfigInheritedZoneAuthority.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigInheritedZoneAuthority.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigInheritedZoneAuthority` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `default_ttl`
      if (jsonObj.get("default_ttl") != null && !jsonObj.get("default_ttl").isJsonNull()) {
        Inheritance2InheritedUInt32.validateJsonElement(jsonObj.get("default_ttl"));
      }
      // validate the optional field `expire`
      if (jsonObj.get("expire") != null && !jsonObj.get("expire").isJsonNull()) {
        Inheritance2InheritedUInt32.validateJsonElement(jsonObj.get("expire"));
      }
      // validate the optional field `mname_block`
      if (jsonObj.get("mname_block") != null && !jsonObj.get("mname_block").isJsonNull()) {
        ConfigInheritedZoneAuthorityMNameBlock.validateJsonElement(jsonObj.get("mname_block"));
      }
      // validate the optional field `negative_ttl`
      if (jsonObj.get("negative_ttl") != null && !jsonObj.get("negative_ttl").isJsonNull()) {
        Inheritance2InheritedUInt32.validateJsonElement(jsonObj.get("negative_ttl"));
      }
      // validate the optional field `protocol_rname`
      if (jsonObj.get("protocol_rname") != null && !jsonObj.get("protocol_rname").isJsonNull()) {
        Inheritance2InheritedString.validateJsonElement(jsonObj.get("protocol_rname"));
      }
      // validate the optional field `refresh`
      if (jsonObj.get("refresh") != null && !jsonObj.get("refresh").isJsonNull()) {
        Inheritance2InheritedUInt32.validateJsonElement(jsonObj.get("refresh"));
      }
      // validate the optional field `retry`
      if (jsonObj.get("retry") != null && !jsonObj.get("retry").isJsonNull()) {
        Inheritance2InheritedUInt32.validateJsonElement(jsonObj.get("retry"));
      }
      // validate the optional field `rname`
      if (jsonObj.get("rname") != null && !jsonObj.get("rname").isJsonNull()) {
        Inheritance2InheritedString.validateJsonElement(jsonObj.get("rname"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigInheritedZoneAuthority.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigInheritedZoneAuthority' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigInheritedZoneAuthority> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigInheritedZoneAuthority.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigInheritedZoneAuthority>() {
           @Override
           public void write(JsonWriter out, ConfigInheritedZoneAuthority value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigInheritedZoneAuthority read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigInheritedZoneAuthority given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigInheritedZoneAuthority
   * @throws IOException if the JSON string is invalid with respect to ConfigInheritedZoneAuthority
   */
  public static ConfigInheritedZoneAuthority fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigInheritedZoneAuthority.class);
  }

  /**
   * Convert an instance of ConfigInheritedZoneAuthority to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

