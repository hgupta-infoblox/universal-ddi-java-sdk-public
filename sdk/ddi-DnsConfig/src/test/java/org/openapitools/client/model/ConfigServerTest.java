/*
 * DNS Configuration API
 * The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConfigACLItem;
import org.openapitools.client.model.ConfigDNSSECValidateException;
import org.openapitools.client.model.ConfigDisplayView;
import org.openapitools.client.model.ConfigECSZone;
import org.openapitools.client.model.ConfigFTCConfig;
import org.openapitools.client.model.ConfigForwarder;
import org.openapitools.client.model.ConfigKerberosKey;
import org.openapitools.client.model.ConfigLoggingConfig;
import org.openapitools.client.model.ConfigRootNS;
import org.openapitools.client.model.ConfigServerInheritance;
import org.openapitools.client.model.ConfigSortListItem;
import org.openapitools.client.model.ConfigTrustAnchor;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ConfigServer
 */
public class ConfigServerTest {
    private final ConfigServer model = new ConfigServer();

    /**
     * Model tests for ConfigServer
     */
    @Test
    public void testConfigServer() {
        // TODO: test ConfigServer
    }

    /**
     * Test the property 'addEdnsOptionInOutgoingQuery'
     */
    @Test
    public void addEdnsOptionInOutgoingQueryTest() {
        // TODO: test addEdnsOptionInOutgoingQuery
    }

    /**
     * Test the property 'autoSortViews'
     */
    @Test
    public void autoSortViewsTest() {
        // TODO: test autoSortViews
    }

    /**
     * Test the property 'comment'
     */
    @Test
    public void commentTest() {
        // TODO: test comment
    }

    /**
     * Test the property 'createdAt'
     */
    @Test
    public void createdAtTest() {
        // TODO: test createdAt
    }

    /**
     * Test the property 'customRootNs'
     */
    @Test
    public void customRootNsTest() {
        // TODO: test customRootNs
    }

    /**
     * Test the property 'customRootNsEnabled'
     */
    @Test
    public void customRootNsEnabledTest() {
        // TODO: test customRootNsEnabled
    }

    /**
     * Test the property 'dnssecEnableValidation'
     */
    @Test
    public void dnssecEnableValidationTest() {
        // TODO: test dnssecEnableValidation
    }

    /**
     * Test the property 'dnssecEnabled'
     */
    @Test
    public void dnssecEnabledTest() {
        // TODO: test dnssecEnabled
    }

    /**
     * Test the property 'dnssecRootKeys'
     */
    @Test
    public void dnssecRootKeysTest() {
        // TODO: test dnssecRootKeys
    }

    /**
     * Test the property 'dnssecTrustAnchors'
     */
    @Test
    public void dnssecTrustAnchorsTest() {
        // TODO: test dnssecTrustAnchors
    }

    /**
     * Test the property 'dnssecValidateExceptions'
     */
    @Test
    public void dnssecValidateExceptionsTest() {
        // TODO: test dnssecValidateExceptions
    }

    /**
     * Test the property 'dnssecValidateExpiry'
     */
    @Test
    public void dnssecValidateExpiryTest() {
        // TODO: test dnssecValidateExpiry
    }

    /**
     * Test the property 'ecsEnabled'
     */
    @Test
    public void ecsEnabledTest() {
        // TODO: test ecsEnabled
    }

    /**
     * Test the property 'ecsForwarding'
     */
    @Test
    public void ecsForwardingTest() {
        // TODO: test ecsForwarding
    }

    /**
     * Test the property 'ecsPrefixV4'
     */
    @Test
    public void ecsPrefixV4Test() {
        // TODO: test ecsPrefixV4
    }

    /**
     * Test the property 'ecsPrefixV6'
     */
    @Test
    public void ecsPrefixV6Test() {
        // TODO: test ecsPrefixV6
    }

    /**
     * Test the property 'ecsZones'
     */
    @Test
    public void ecsZonesTest() {
        // TODO: test ecsZones
    }

    /**
     * Test the property 'faultTolerantCaching'
     */
    @Test
    public void faultTolerantCachingTest() {
        // TODO: test faultTolerantCaching
    }

    /**
     * Test the property 'filterAaaaAcl'
     */
    @Test
    public void filterAaaaAclTest() {
        // TODO: test filterAaaaAcl
    }

    /**
     * Test the property 'filterAaaaOnV4'
     */
    @Test
    public void filterAaaaOnV4Test() {
        // TODO: test filterAaaaOnV4
    }

    /**
     * Test the property 'forwarders'
     */
    @Test
    public void forwardersTest() {
        // TODO: test forwarders
    }

    /**
     * Test the property 'forwardersOnly'
     */
    @Test
    public void forwardersOnlyTest() {
        // TODO: test forwardersOnly
    }

    /**
     * Test the property 'gssTsigEnabled'
     */
    @Test
    public void gssTsigEnabledTest() {
        // TODO: test gssTsigEnabled
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'inheritanceSources'
     */
    @Test
    public void inheritanceSourcesTest() {
        // TODO: test inheritanceSources
    }

    /**
     * Test the property 'kerberosKeys'
     */
    @Test
    public void kerberosKeysTest() {
        // TODO: test kerberosKeys
    }

    /**
     * Test the property 'lameTtl'
     */
    @Test
    public void lameTtlTest() {
        // TODO: test lameTtl
    }

    /**
     * Test the property 'logQueryResponse'
     */
    @Test
    public void logQueryResponseTest() {
        // TODO: test logQueryResponse
    }

    /**
     * Test the property 'loggingConfiguration'
     */
    @Test
    public void loggingConfigurationTest() {
        // TODO: test loggingConfiguration
    }

    /**
     * Test the property 'matchRecursiveOnly'
     */
    @Test
    public void matchRecursiveOnlyTest() {
        // TODO: test matchRecursiveOnly
    }

    /**
     * Test the property 'maxCacheTtl'
     */
    @Test
    public void maxCacheTtlTest() {
        // TODO: test maxCacheTtl
    }

    /**
     * Test the property 'maxNegativeTtl'
     */
    @Test
    public void maxNegativeTtlTest() {
        // TODO: test maxNegativeTtl
    }

    /**
     * Test the property 'minimalResponses'
     */
    @Test
    public void minimalResponsesTest() {
        // TODO: test minimalResponses
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'notify'
     */
    @Test
    public void notifyTest() {
        // TODO: test notify
    }

    /**
     * Test the property 'queryAcl'
     */
    @Test
    public void queryAclTest() {
        // TODO: test queryAcl
    }

    /**
     * Test the property 'queryPort'
     */
    @Test
    public void queryPortTest() {
        // TODO: test queryPort
    }

    /**
     * Test the property 'recursionAcl'
     */
    @Test
    public void recursionAclTest() {
        // TODO: test recursionAcl
    }

    /**
     * Test the property 'recursionEnabled'
     */
    @Test
    public void recursionEnabledTest() {
        // TODO: test recursionEnabled
    }

    /**
     * Test the property 'recursiveClients'
     */
    @Test
    public void recursiveClientsTest() {
        // TODO: test recursiveClients
    }

    /**
     * Test the property 'resolverQueryTimeout'
     */
    @Test
    public void resolverQueryTimeoutTest() {
        // TODO: test resolverQueryTimeout
    }

    /**
     * Test the property 'secondaryAxfrQueryLimit'
     */
    @Test
    public void secondaryAxfrQueryLimitTest() {
        // TODO: test secondaryAxfrQueryLimit
    }

    /**
     * Test the property 'secondarySoaQueryLimit'
     */
    @Test
    public void secondarySoaQueryLimitTest() {
        // TODO: test secondarySoaQueryLimit
    }

    /**
     * Test the property 'sortList'
     */
    @Test
    public void sortListTest() {
        // TODO: test sortList
    }

    /**
     * Test the property 'synthesizeAddressRecordsFromHttps'
     */
    @Test
    public void synthesizeAddressRecordsFromHttpsTest() {
        // TODO: test synthesizeAddressRecordsFromHttps
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

    /**
     * Test the property 'transferAcl'
     */
    @Test
    public void transferAclTest() {
        // TODO: test transferAcl
    }

    /**
     * Test the property 'updateAcl'
     */
    @Test
    public void updateAclTest() {
        // TODO: test updateAcl
    }

    /**
     * Test the property 'updatedAt'
     */
    @Test
    public void updatedAtTest() {
        // TODO: test updatedAt
    }

    /**
     * Test the property 'useForwardersForSubzones'
     */
    @Test
    public void useForwardersForSubzonesTest() {
        // TODO: test useForwardersForSubzones
    }

    /**
     * Test the property 'useRootForwardersForLocalResolutionWithB1td'
     */
    @Test
    public void useRootForwardersForLocalResolutionWithB1tdTest() {
        // TODO: test useRootForwardersForLocalResolutionWithB1td
    }

    /**
     * Test the property 'views'
     */
    @Test
    public void viewsTest() {
        // TODO: test views
    }

}
