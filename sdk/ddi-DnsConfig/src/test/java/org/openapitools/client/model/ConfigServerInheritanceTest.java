/*
 * DNS Configuration API
 * The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConfigInheritedACLItems;
import org.openapitools.client.model.ConfigInheritedCustomRootNSBlock;
import org.openapitools.client.model.ConfigInheritedDNSSECValidationBlock;
import org.openapitools.client.model.ConfigInheritedECSBlock;
import org.openapitools.client.model.ConfigInheritedForwardersBlock;
import org.openapitools.client.model.ConfigInheritedKerberosKeys;
import org.openapitools.client.model.ConfigInheritedLoggingConfig;
import org.openapitools.client.model.ConfigInheritedSortListItems;
import org.openapitools.client.model.Inheritance2InheritedBool;
import org.openapitools.client.model.Inheritance2InheritedString;
import org.openapitools.client.model.Inheritance2InheritedUInt32;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ConfigServerInheritance
 */
public class ConfigServerInheritanceTest {
    private final ConfigServerInheritance model = new ConfigServerInheritance();

    /**
     * Model tests for ConfigServerInheritance
     */
    @Test
    public void testConfigServerInheritance() {
        // TODO: test ConfigServerInheritance
    }

    /**
     * Test the property 'addEdnsOptionInOutgoingQuery'
     */
    @Test
    public void addEdnsOptionInOutgoingQueryTest() {
        // TODO: test addEdnsOptionInOutgoingQuery
    }

    /**
     * Test the property 'customRootNsBlock'
     */
    @Test
    public void customRootNsBlockTest() {
        // TODO: test customRootNsBlock
    }

    /**
     * Test the property 'dnssecValidationBlock'
     */
    @Test
    public void dnssecValidationBlockTest() {
        // TODO: test dnssecValidationBlock
    }

    /**
     * Test the property 'ecsBlock'
     */
    @Test
    public void ecsBlockTest() {
        // TODO: test ecsBlock
    }

    /**
     * Test the property 'filterAaaaAcl'
     */
    @Test
    public void filterAaaaAclTest() {
        // TODO: test filterAaaaAcl
    }

    /**
     * Test the property 'filterAaaaOnV4'
     */
    @Test
    public void filterAaaaOnV4Test() {
        // TODO: test filterAaaaOnV4
    }

    /**
     * Test the property 'forwardersBlock'
     */
    @Test
    public void forwardersBlockTest() {
        // TODO: test forwardersBlock
    }

    /**
     * Test the property 'gssTsigEnabled'
     */
    @Test
    public void gssTsigEnabledTest() {
        // TODO: test gssTsigEnabled
    }

    /**
     * Test the property 'kerberosKeys'
     */
    @Test
    public void kerberosKeysTest() {
        // TODO: test kerberosKeys
    }

    /**
     * Test the property 'lameTtl'
     */
    @Test
    public void lameTtlTest() {
        // TODO: test lameTtl
    }

    /**
     * Test the property 'logQueryResponse'
     */
    @Test
    public void logQueryResponseTest() {
        // TODO: test logQueryResponse
    }

    /**
     * Test the property 'loggingConfiguration'
     */
    @Test
    public void loggingConfigurationTest() {
        // TODO: test loggingConfiguration
    }

    /**
     * Test the property 'matchRecursiveOnly'
     */
    @Test
    public void matchRecursiveOnlyTest() {
        // TODO: test matchRecursiveOnly
    }

    /**
     * Test the property 'maxCacheTtl'
     */
    @Test
    public void maxCacheTtlTest() {
        // TODO: test maxCacheTtl
    }

    /**
     * Test the property 'maxNegativeTtl'
     */
    @Test
    public void maxNegativeTtlTest() {
        // TODO: test maxNegativeTtl
    }

    /**
     * Test the property 'minimalResponses'
     */
    @Test
    public void minimalResponsesTest() {
        // TODO: test minimalResponses
    }

    /**
     * Test the property 'notify'
     */
    @Test
    public void notifyTest() {
        // TODO: test notify
    }

    /**
     * Test the property 'queryAcl'
     */
    @Test
    public void queryAclTest() {
        // TODO: test queryAcl
    }

    /**
     * Test the property 'queryPort'
     */
    @Test
    public void queryPortTest() {
        // TODO: test queryPort
    }

    /**
     * Test the property 'recursionAcl'
     */
    @Test
    public void recursionAclTest() {
        // TODO: test recursionAcl
    }

    /**
     * Test the property 'recursionEnabled'
     */
    @Test
    public void recursionEnabledTest() {
        // TODO: test recursionEnabled
    }

    /**
     * Test the property 'recursiveClients'
     */
    @Test
    public void recursiveClientsTest() {
        // TODO: test recursiveClients
    }

    /**
     * Test the property 'resolverQueryTimeout'
     */
    @Test
    public void resolverQueryTimeoutTest() {
        // TODO: test resolverQueryTimeout
    }

    /**
     * Test the property 'secondaryAxfrQueryLimit'
     */
    @Test
    public void secondaryAxfrQueryLimitTest() {
        // TODO: test secondaryAxfrQueryLimit
    }

    /**
     * Test the property 'secondarySoaQueryLimit'
     */
    @Test
    public void secondarySoaQueryLimitTest() {
        // TODO: test secondarySoaQueryLimit
    }

    /**
     * Test the property 'sortList'
     */
    @Test
    public void sortListTest() {
        // TODO: test sortList
    }

    /**
     * Test the property 'synthesizeAddressRecordsFromHttps'
     */
    @Test
    public void synthesizeAddressRecordsFromHttpsTest() {
        // TODO: test synthesizeAddressRecordsFromHttps
    }

    /**
     * Test the property 'transferAcl'
     */
    @Test
    public void transferAclTest() {
        // TODO: test transferAcl
    }

    /**
     * Test the property 'updateAcl'
     */
    @Test
    public void updateAclTest() {
        // TODO: test updateAcl
    }

    /**
     * Test the property 'useForwardersForSubzones'
     */
    @Test
    public void useForwardersForSubzonesTest() {
        // TODO: test useForwardersForSubzones
    }

}
