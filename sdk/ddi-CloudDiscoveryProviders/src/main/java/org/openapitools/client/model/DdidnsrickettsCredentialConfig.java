/*
 * Discovery Configuration API V2
 * The Discovery configuration service is a BloxOne Service that provides configuration for accessing and syncing the Cloud assets   Base Paths:  1. provider: **_/api/cloud_discovery/v2/_**  
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DdidnsrickettsMSADConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DdidnsrickettsCredentialConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:24.110229+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class DdidnsrickettsCredentialConfig {
  public static final String SERIALIZED_NAME_ACCESS_IDENTIFIER = "access_identifier";
  @SerializedName(SERIALIZED_NAME_ACCESS_IDENTIFIER)
  @javax.annotation.Nullable
  private String accessIdentifier;

  public static final String SERIALIZED_NAME_ENCLAVE = "enclave";
  @SerializedName(SERIALIZED_NAME_ENCLAVE)
  @javax.annotation.Nullable
  private String enclave;

  public static final String SERIALIZED_NAME_MSAD_CONFIG = "msad_config";
  @SerializedName(SERIALIZED_NAME_MSAD_CONFIG)
  @javax.annotation.Nullable
  private DdidnsrickettsMSADConfig msadConfig;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  @javax.annotation.Nullable
  private String region;

  public DdidnsrickettsCredentialConfig() {
  }

  public DdidnsrickettsCredentialConfig accessIdentifier(@javax.annotation.Nullable String accessIdentifier) {
    this.accessIdentifier = accessIdentifier;
    return this;
  }

  /**
   * Get accessIdentifier
   * @return accessIdentifier
   */
  @javax.annotation.Nullable
  public String getAccessIdentifier() {
    return accessIdentifier;
  }

  public void setAccessIdentifier(@javax.annotation.Nullable String accessIdentifier) {
    this.accessIdentifier = accessIdentifier;
  }


  public DdidnsrickettsCredentialConfig enclave(@javax.annotation.Nullable String enclave) {
    this.enclave = enclave;
    return this;
  }

  /**
   * Get enclave
   * @return enclave
   */
  @javax.annotation.Nullable
  public String getEnclave() {
    return enclave;
  }

  public void setEnclave(@javax.annotation.Nullable String enclave) {
    this.enclave = enclave;
  }


  public DdidnsrickettsCredentialConfig msadConfig(@javax.annotation.Nullable DdidnsrickettsMSADConfig msadConfig) {
    this.msadConfig = msadConfig;
    return this;
  }

  /**
   * Get msadConfig
   * @return msadConfig
   */
  @javax.annotation.Nullable
  public DdidnsrickettsMSADConfig getMsadConfig() {
    return msadConfig;
  }

  public void setMsadConfig(@javax.annotation.Nullable DdidnsrickettsMSADConfig msadConfig) {
    this.msadConfig = msadConfig;
  }


  public DdidnsrickettsCredentialConfig region(@javax.annotation.Nullable String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(@javax.annotation.Nullable String region) {
    this.region = region;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DdidnsrickettsCredentialConfig ddidnsrickettsCredentialConfig = (DdidnsrickettsCredentialConfig) o;
    return Objects.equals(this.accessIdentifier, ddidnsrickettsCredentialConfig.accessIdentifier) &&
        Objects.equals(this.enclave, ddidnsrickettsCredentialConfig.enclave) &&
        Objects.equals(this.msadConfig, ddidnsrickettsCredentialConfig.msadConfig) &&
        Objects.equals(this.region, ddidnsrickettsCredentialConfig.region);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessIdentifier, enclave, msadConfig, region);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DdidnsrickettsCredentialConfig {\n");
    sb.append("    accessIdentifier: ").append(toIndentedString(accessIdentifier)).append("\n");
    sb.append("    enclave: ").append(toIndentedString(enclave)).append("\n");
    sb.append("    msadConfig: ").append(toIndentedString(msadConfig)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access_identifier");
    openapiFields.add("enclave");
    openapiFields.add("msad_config");
    openapiFields.add("region");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DdidnsrickettsCredentialConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DdidnsrickettsCredentialConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DdidnsrickettsCredentialConfig is not found in the empty JSON string", DdidnsrickettsCredentialConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DdidnsrickettsCredentialConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DdidnsrickettsCredentialConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("access_identifier") != null && !jsonObj.get("access_identifier").isJsonNull()) && !jsonObj.get("access_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_identifier").toString()));
      }
      if ((jsonObj.get("enclave") != null && !jsonObj.get("enclave").isJsonNull()) && !jsonObj.get("enclave").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enclave` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enclave").toString()));
      }
      // validate the optional field `msad_config`
      if (jsonObj.get("msad_config") != null && !jsonObj.get("msad_config").isJsonNull()) {
        DdidnsrickettsMSADConfig.validateJsonElement(jsonObj.get("msad_config"));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DdidnsrickettsCredentialConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DdidnsrickettsCredentialConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DdidnsrickettsCredentialConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DdidnsrickettsCredentialConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<DdidnsrickettsCredentialConfig>() {
           @Override
           public void write(JsonWriter out, DdidnsrickettsCredentialConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DdidnsrickettsCredentialConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DdidnsrickettsCredentialConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DdidnsrickettsCredentialConfig
   * @throws IOException if the JSON string is invalid with respect to DdidnsrickettsCredentialConfig
   */
  public static DdidnsrickettsCredentialConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DdidnsrickettsCredentialConfig.class);
  }

  /**
   * Convert an instance of DdidnsrickettsCredentialConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

