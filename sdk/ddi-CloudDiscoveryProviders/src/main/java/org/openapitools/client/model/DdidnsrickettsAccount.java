/*
 * Discovery Configuration API V2
 * The Discovery configuration service is a BloxOne Service that provides configuration for accessing and syncing the Cloud assets   Base Paths:  1. provider: **_/api/cloud_discovery/v2/_**  
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Source account information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:24.110229+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class DdidnsrickettsAccount {
  public static final String SERIALIZED_NAME_COMPOSITE_STATUS = "composite_status";
  @SerializedName(SERIALIZED_NAME_COMPOSITE_STATUS)
  @javax.annotation.Nullable
  private String compositeStatus;

  public static final String SERIALIZED_NAME_COMPOSITE_STATUS_MESSAGE = "composite_status_message";
  @SerializedName(SERIALIZED_NAME_COMPOSITE_STATUS_MESSAGE)
  @javax.annotation.Nullable
  private String compositeStatusMessage;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DELETED_AT = "deleted_at";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime deletedAt;

  public static final String SERIALIZED_NAME_DHCP_SERVER_ID = "dhcp_server_id";
  @SerializedName(SERIALIZED_NAME_DHCP_SERVER_ID)
  @javax.annotation.Nullable
  private String dhcpServerId;

  public static final String SERIALIZED_NAME_DNS_SERVER_ID = "dns_server_id";
  @SerializedName(SERIALIZED_NAME_DNS_SERVER_ID)
  @javax.annotation.Nullable
  private String dnsServerId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_LAST_SUCCESSFUL_SYNC = "last_successful_sync";
  @SerializedName(SERIALIZED_NAME_LAST_SUCCESSFUL_SYNC)
  @javax.annotation.Nullable
  private OffsetDateTime lastSuccessfulSync;

  public static final String SERIALIZED_NAME_LAST_SYNC = "last_sync";
  @SerializedName(SERIALIZED_NAME_LAST_SYNC)
  @javax.annotation.Nullable
  private OffsetDateTime lastSync;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_PARENT_ID = "parent_id";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  @javax.annotation.Nullable
  private String parentId;

  public static final String SERIALIZED_NAME_PERCENT_COMPLETE = "percent_complete";
  @SerializedName(SERIALIZED_NAME_PERCENT_COMPLETE)
  @javax.annotation.Nullable
  private Integer percentComplete;

  public static final String SERIALIZED_NAME_PROVIDER_ACCOUNT_ID = "provider_account_id";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String providerAccountId;

  public static final String SERIALIZED_NAME_SCHEDULE_ID = "schedule_id";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_ID)
  @javax.annotation.Nullable
  private String scheduleId;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nullable
  private String state;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private String status;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "status_message";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  @javax.annotation.Nullable
  private String statusMessage;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  public DdidnsrickettsAccount() {
  }

  public DdidnsrickettsAccount(
     OffsetDateTime createdAt, 
     OffsetDateTime deletedAt, 
     String dhcpServerId, 
     String dnsServerId, 
     String id, 
     OffsetDateTime lastSuccessfulSync, 
     OffsetDateTime lastSync, 
     Integer percentComplete, 
     String scheduleId, 
     String state, 
     String status, 
     String statusMessage, 
     OffsetDateTime updatedAt
  ) {
    this();
    this.createdAt = createdAt;
    this.deletedAt = deletedAt;
    this.dhcpServerId = dhcpServerId;
    this.dnsServerId = dnsServerId;
    this.id = id;
    this.lastSuccessfulSync = lastSuccessfulSync;
    this.lastSync = lastSync;
    this.percentComplete = percentComplete;
    this.scheduleId = scheduleId;
    this.state = state;
    this.status = status;
    this.statusMessage = statusMessage;
    this.updatedAt = updatedAt;
  }

  public DdidnsrickettsAccount compositeStatus(@javax.annotation.Nullable String compositeStatus) {
    this.compositeStatus = compositeStatus;
    return this;
  }

  /**
   * Get compositeStatus
   * @return compositeStatus
   */
  @javax.annotation.Nullable
  public String getCompositeStatus() {
    return compositeStatus;
  }

  public void setCompositeStatus(@javax.annotation.Nullable String compositeStatus) {
    this.compositeStatus = compositeStatus;
  }


  public DdidnsrickettsAccount compositeStatusMessage(@javax.annotation.Nullable String compositeStatusMessage) {
    this.compositeStatusMessage = compositeStatusMessage;
    return this;
  }

  /**
   * Status message of the sync operation.
   * @return compositeStatusMessage
   */
  @javax.annotation.Nullable
  public String getCompositeStatusMessage() {
    return compositeStatusMessage;
  }

  public void setCompositeStatusMessage(@javax.annotation.Nullable String compositeStatusMessage) {
    this.compositeStatusMessage = compositeStatusMessage;
  }


  /**
   * Timestamp when the object has been created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  /**
   * Timestamp when the object has been deleted.
   * @return deletedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }



  /**
   * Get dhcpServerId
   * @return dhcpServerId
   */
  @javax.annotation.Nullable
  public String getDhcpServerId() {
    return dhcpServerId;
  }



  /**
   * DNS Server ID.
   * @return dnsServerId
   */
  @javax.annotation.Nullable
  public String getDnsServerId() {
    return dnsServerId;
  }



  /**
   * Auto-generated unique source account ID. Format BloxID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * Last successful sync timestamp.
   * @return lastSuccessfulSync
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSuccessfulSync() {
    return lastSuccessfulSync;
  }



  /**
   * Last sync timestamp.
   * @return lastSync
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSync() {
    return lastSync;
  }



  public DdidnsrickettsAccount name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the source account.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public DdidnsrickettsAccount parentId(@javax.annotation.Nullable String parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * Parent ID.
   * @return parentId
   */
  @javax.annotation.Nullable
  public String getParentId() {
    return parentId;
  }

  public void setParentId(@javax.annotation.Nullable String parentId) {
    this.parentId = parentId;
  }


  /**
   * Sync progress as a percentage.
   * @return percentComplete
   */
  @javax.annotation.Nullable
  public Integer getPercentComplete() {
    return percentComplete;
  }



  public DdidnsrickettsAccount providerAccountId(@javax.annotation.Nullable String providerAccountId) {
    this.providerAccountId = providerAccountId;
    return this;
  }

  /**
   * Get providerAccountId
   * @return providerAccountId
   */
  @javax.annotation.Nullable
  public String getProviderAccountId() {
    return providerAccountId;
  }

  public void setProviderAccountId(@javax.annotation.Nullable String providerAccountId) {
    this.providerAccountId = providerAccountId;
  }


  /**
   * Schedule ID.
   * @return scheduleId
   */
  @javax.annotation.Nullable
  public String getScheduleId() {
    return scheduleId;
  }



  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }



  /**
   * Status of the sync operation.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }



  /**
   * Status message of the sync operation.
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }



  /**
   * Timestamp when the object has been updated.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DdidnsrickettsAccount ddidnsrickettsAccount = (DdidnsrickettsAccount) o;
    return Objects.equals(this.compositeStatus, ddidnsrickettsAccount.compositeStatus) &&
        Objects.equals(this.compositeStatusMessage, ddidnsrickettsAccount.compositeStatusMessage) &&
        Objects.equals(this.createdAt, ddidnsrickettsAccount.createdAt) &&
        Objects.equals(this.deletedAt, ddidnsrickettsAccount.deletedAt) &&
        Objects.equals(this.dhcpServerId, ddidnsrickettsAccount.dhcpServerId) &&
        Objects.equals(this.dnsServerId, ddidnsrickettsAccount.dnsServerId) &&
        Objects.equals(this.id, ddidnsrickettsAccount.id) &&
        Objects.equals(this.lastSuccessfulSync, ddidnsrickettsAccount.lastSuccessfulSync) &&
        Objects.equals(this.lastSync, ddidnsrickettsAccount.lastSync) &&
        Objects.equals(this.name, ddidnsrickettsAccount.name) &&
        Objects.equals(this.parentId, ddidnsrickettsAccount.parentId) &&
        Objects.equals(this.percentComplete, ddidnsrickettsAccount.percentComplete) &&
        Objects.equals(this.providerAccountId, ddidnsrickettsAccount.providerAccountId) &&
        Objects.equals(this.scheduleId, ddidnsrickettsAccount.scheduleId) &&
        Objects.equals(this.state, ddidnsrickettsAccount.state) &&
        Objects.equals(this.status, ddidnsrickettsAccount.status) &&
        Objects.equals(this.statusMessage, ddidnsrickettsAccount.statusMessage) &&
        Objects.equals(this.updatedAt, ddidnsrickettsAccount.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compositeStatus, compositeStatusMessage, createdAt, deletedAt, dhcpServerId, dnsServerId, id, lastSuccessfulSync, lastSync, name, parentId, percentComplete, providerAccountId, scheduleId, state, status, statusMessage, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DdidnsrickettsAccount {\n");
    sb.append("    compositeStatus: ").append(toIndentedString(compositeStatus)).append("\n");
    sb.append("    compositeStatusMessage: ").append(toIndentedString(compositeStatusMessage)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    dhcpServerId: ").append(toIndentedString(dhcpServerId)).append("\n");
    sb.append("    dnsServerId: ").append(toIndentedString(dnsServerId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastSuccessfulSync: ").append(toIndentedString(lastSuccessfulSync)).append("\n");
    sb.append("    lastSync: ").append(toIndentedString(lastSync)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    percentComplete: ").append(toIndentedString(percentComplete)).append("\n");
    sb.append("    providerAccountId: ").append(toIndentedString(providerAccountId)).append("\n");
    sb.append("    scheduleId: ").append(toIndentedString(scheduleId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("composite_status");
    openapiFields.add("composite_status_message");
    openapiFields.add("created_at");
    openapiFields.add("deleted_at");
    openapiFields.add("dhcp_server_id");
    openapiFields.add("dns_server_id");
    openapiFields.add("id");
    openapiFields.add("last_successful_sync");
    openapiFields.add("last_sync");
    openapiFields.add("name");
    openapiFields.add("parent_id");
    openapiFields.add("percent_complete");
    openapiFields.add("provider_account_id");
    openapiFields.add("schedule_id");
    openapiFields.add("state");
    openapiFields.add("status");
    openapiFields.add("status_message");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DdidnsrickettsAccount
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DdidnsrickettsAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DdidnsrickettsAccount is not found in the empty JSON string", DdidnsrickettsAccount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DdidnsrickettsAccount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DdidnsrickettsAccount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DdidnsrickettsAccount.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("composite_status") != null && !jsonObj.get("composite_status").isJsonNull()) && !jsonObj.get("composite_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `composite_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("composite_status").toString()));
      }
      if ((jsonObj.get("composite_status_message") != null && !jsonObj.get("composite_status_message").isJsonNull()) && !jsonObj.get("composite_status_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `composite_status_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("composite_status_message").toString()));
      }
      if ((jsonObj.get("dhcp_server_id") != null && !jsonObj.get("dhcp_server_id").isJsonNull()) && !jsonObj.get("dhcp_server_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dhcp_server_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dhcp_server_id").toString()));
      }
      if ((jsonObj.get("dns_server_id") != null && !jsonObj.get("dns_server_id").isJsonNull()) && !jsonObj.get("dns_server_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dns_server_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dns_server_id").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("parent_id") != null && !jsonObj.get("parent_id").isJsonNull()) && !jsonObj.get("parent_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_id").toString()));
      }
      if ((jsonObj.get("provider_account_id") != null && !jsonObj.get("provider_account_id").isJsonNull()) && !jsonObj.get("provider_account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_account_id").toString()));
      }
      if ((jsonObj.get("schedule_id") != null && !jsonObj.get("schedule_id").isJsonNull()) && !jsonObj.get("schedule_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedule_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedule_id").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("status_message") != null && !jsonObj.get("status_message").isJsonNull()) && !jsonObj.get("status_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_message").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DdidnsrickettsAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DdidnsrickettsAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DdidnsrickettsAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DdidnsrickettsAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<DdidnsrickettsAccount>() {
           @Override
           public void write(JsonWriter out, DdidnsrickettsAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DdidnsrickettsAccount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DdidnsrickettsAccount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DdidnsrickettsAccount
   * @throws IOException if the JSON string is invalid with respect to DdidnsrickettsAccount
   */
  public static DdidnsrickettsAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DdidnsrickettsAccount.class);
  }

  /**
   * Convert an instance of DdidnsrickettsAccount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

