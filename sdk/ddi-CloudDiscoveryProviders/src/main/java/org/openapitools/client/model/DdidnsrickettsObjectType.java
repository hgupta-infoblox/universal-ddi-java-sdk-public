/*
 * Discovery Configuration API V2
 * The Discovery configuration service is a BloxOne Service that provides configuration for accessing and syncing the Cloud assets   Base Paths:  1. provider: **_/api/cloud_discovery/v2/_**  
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DdidnsrickettsObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DdidnsrickettsObjectType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:24.110229+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class DdidnsrickettsObjectType {
  public static final String SERIALIZED_NAME_DISCOVER_NEW = "discover_new";
  @SerializedName(SERIALIZED_NAME_DISCOVER_NEW)
  @javax.annotation.Nullable
  private Boolean discoverNew;

  public static final String SERIALIZED_NAME_OBJECTS = "objects";
  @SerializedName(SERIALIZED_NAME_OBJECTS)
  @javax.annotation.Nullable
  private List<DdidnsrickettsObject> objects = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nullable
  private Float version;

  public DdidnsrickettsObjectType() {
  }

  public DdidnsrickettsObjectType discoverNew(@javax.annotation.Nullable Boolean discoverNew) {
    this.discoverNew = discoverNew;
    return this;
  }

  /**
   * Get discoverNew
   * @return discoverNew
   */
  @javax.annotation.Nullable
  public Boolean getDiscoverNew() {
    return discoverNew;
  }

  public void setDiscoverNew(@javax.annotation.Nullable Boolean discoverNew) {
    this.discoverNew = discoverNew;
  }


  public DdidnsrickettsObjectType objects(@javax.annotation.Nullable List<DdidnsrickettsObject> objects) {
    this.objects = objects;
    return this;
  }

  public DdidnsrickettsObjectType addObjectsItem(DdidnsrickettsObject objectsItem) {
    if (this.objects == null) {
      this.objects = new ArrayList<>();
    }
    this.objects.add(objectsItem);
    return this;
  }

  /**
   * Get objects
   * @return objects
   */
  @javax.annotation.Nullable
  public List<DdidnsrickettsObject> getObjects() {
    return objects;
  }

  public void setObjects(@javax.annotation.Nullable List<DdidnsrickettsObject> objects) {
    this.objects = objects;
  }


  public DdidnsrickettsObjectType version(@javax.annotation.Nullable Float version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public Float getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nullable Float version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DdidnsrickettsObjectType ddidnsrickettsObjectType = (DdidnsrickettsObjectType) o;
    return Objects.equals(this.discoverNew, ddidnsrickettsObjectType.discoverNew) &&
        Objects.equals(this.objects, ddidnsrickettsObjectType.objects) &&
        Objects.equals(this.version, ddidnsrickettsObjectType.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(discoverNew, objects, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DdidnsrickettsObjectType {\n");
    sb.append("    discoverNew: ").append(toIndentedString(discoverNew)).append("\n");
    sb.append("    objects: ").append(toIndentedString(objects)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("discover_new");
    openapiFields.add("objects");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DdidnsrickettsObjectType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DdidnsrickettsObjectType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DdidnsrickettsObjectType is not found in the empty JSON string", DdidnsrickettsObjectType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DdidnsrickettsObjectType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DdidnsrickettsObjectType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("objects") != null && !jsonObj.get("objects").isJsonNull()) {
        JsonArray jsonArrayobjects = jsonObj.getAsJsonArray("objects");
        if (jsonArrayobjects != null) {
          // ensure the json data is an array
          if (!jsonObj.get("objects").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `objects` to be an array in the JSON string but got `%s`", jsonObj.get("objects").toString()));
          }

          // validate the optional field `objects` (array)
          for (int i = 0; i < jsonArrayobjects.size(); i++) {
            DdidnsrickettsObject.validateJsonElement(jsonArrayobjects.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DdidnsrickettsObjectType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DdidnsrickettsObjectType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DdidnsrickettsObjectType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DdidnsrickettsObjectType.class));

       return (TypeAdapter<T>) new TypeAdapter<DdidnsrickettsObjectType>() {
           @Override
           public void write(JsonWriter out, DdidnsrickettsObjectType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DdidnsrickettsObjectType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DdidnsrickettsObjectType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DdidnsrickettsObjectType
   * @throws IOException if the JSON string is invalid with respect to DdidnsrickettsObjectType
   */
  public static DdidnsrickettsObjectType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DdidnsrickettsObjectType.class);
  }

  /**
   * Convert an instance of DdidnsrickettsObjectType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

