/*
 * Discovery Configuration API V2
 * The Discovery configuration service is a BloxOne Service that provides configuration for accessing and syncing the Cloud assets   Base Paths:  1. provider: **_/api/cloud_discovery/v2/_**  
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DdidnsrickettsAdditionalConfig;
import org.openapitools.client.model.DdidnsrickettsCredentialPreference;
import org.openapitools.client.model.DdidnsrickettsDestination;
import org.openapitools.client.model.DdidnsrickettsSourceConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Discovery configuration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:24.110229+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class DdidnsrickettsDiscoveryConfig {
  public static final String SERIALIZED_NAME_ACCOUNT_PREFERENCE = "account_preference";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_PREFERENCE)
  @javax.annotation.Nullable
  private String accountPreference;

  public static final String SERIALIZED_NAME_ADDITIONAL_CONFIG = "additional_config";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_CONFIG)
  @javax.annotation.Nullable
  private DdidnsrickettsAdditionalConfig additionalConfig;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREDENTIAL_PREFERENCE = "credential_preference";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL_PREFERENCE)
  @javax.annotation.Nullable
  private DdidnsrickettsCredentialPreference credentialPreference;

  public static final String SERIALIZED_NAME_DELETED_AT = "deleted_at";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime deletedAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_DESIRED_STATE = "desired_state";
  @SerializedName(SERIALIZED_NAME_DESIRED_STATE)
  @javax.annotation.Nullable
  private String desiredState;

  public static final String SERIALIZED_NAME_DESTINATION_TYPES_ENABLED = "destination_types_enabled";
  @SerializedName(SERIALIZED_NAME_DESTINATION_TYPES_ENABLED)
  @javax.annotation.Nullable
  private List<String> destinationTypesEnabled = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESTINATIONS = "destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  @javax.annotation.Nullable
  private List<DdidnsrickettsDestination> destinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_LAST_SYNC = "last_sync";
  @SerializedName(SERIALIZED_NAME_LAST_SYNC)
  @javax.annotation.Nullable
  private OffsetDateTime lastSync;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_PROVIDER_TYPE = "provider_type";
  @SerializedName(SERIALIZED_NAME_PROVIDER_TYPE)
  @javax.annotation.Nullable
  private String providerType;

  public static final String SERIALIZED_NAME_SOURCE_CONFIGS = "source_configs";
  @SerializedName(SERIALIZED_NAME_SOURCE_CONFIGS)
  @javax.annotation.Nullable
  private List<DdidnsrickettsSourceConfig> sourceConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private String status;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "status_message";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  @javax.annotation.Nullable
  private String statusMessage;

  public static final String SERIALIZED_NAME_SYNC_INTERVAL = "sync_interval";
  @SerializedName(SERIALIZED_NAME_SYNC_INTERVAL)
  @javax.annotation.Nullable
  private String syncInterval;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Map<String, Object> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  public DdidnsrickettsDiscoveryConfig() {
  }

  public DdidnsrickettsDiscoveryConfig(
     OffsetDateTime createdAt, 
     OffsetDateTime deletedAt, 
     String id, 
     OffsetDateTime updatedAt
  ) {
    this();
    this.createdAt = createdAt;
    this.deletedAt = deletedAt;
    this.id = id;
    this.updatedAt = updatedAt;
  }

  public DdidnsrickettsDiscoveryConfig accountPreference(@javax.annotation.Nullable String accountPreference) {
    this.accountPreference = accountPreference;
    return this;
  }

  /**
   * Account preference. For ex.: single, multiple, auto-discover-multiple.
   * @return accountPreference
   */
  @javax.annotation.Nullable
  public String getAccountPreference() {
    return accountPreference;
  }

  public void setAccountPreference(@javax.annotation.Nullable String accountPreference) {
    this.accountPreference = accountPreference;
  }


  public DdidnsrickettsDiscoveryConfig additionalConfig(@javax.annotation.Nullable DdidnsrickettsAdditionalConfig additionalConfig) {
    this.additionalConfig = additionalConfig;
    return this;
  }

  /**
   * Get additionalConfig
   * @return additionalConfig
   */
  @javax.annotation.Nullable
  public DdidnsrickettsAdditionalConfig getAdditionalConfig() {
    return additionalConfig;
  }

  public void setAdditionalConfig(@javax.annotation.Nullable DdidnsrickettsAdditionalConfig additionalConfig) {
    this.additionalConfig = additionalConfig;
  }


  /**
   * Timestamp when the object has been created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public DdidnsrickettsDiscoveryConfig credentialPreference(@javax.annotation.Nullable DdidnsrickettsCredentialPreference credentialPreference) {
    this.credentialPreference = credentialPreference;
    return this;
  }

  /**
   * Get credentialPreference
   * @return credentialPreference
   */
  @javax.annotation.Nullable
  public DdidnsrickettsCredentialPreference getCredentialPreference() {
    return credentialPreference;
  }

  public void setCredentialPreference(@javax.annotation.Nullable DdidnsrickettsCredentialPreference credentialPreference) {
    this.credentialPreference = credentialPreference;
  }


  /**
   * Timestamp when the object has been deleted.
   * @return deletedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }



  public DdidnsrickettsDiscoveryConfig description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the discovery config. Optional.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public DdidnsrickettsDiscoveryConfig desiredState(@javax.annotation.Nullable String desiredState) {
    this.desiredState = desiredState;
    return this;
  }

  /**
   * Desired state. Default is \&quot;enabled\&quot;.
   * @return desiredState
   */
  @javax.annotation.Nullable
  public String getDesiredState() {
    return desiredState;
  }

  public void setDesiredState(@javax.annotation.Nullable String desiredState) {
    this.desiredState = desiredState;
  }


  public DdidnsrickettsDiscoveryConfig destinationTypesEnabled(@javax.annotation.Nullable List<String> destinationTypesEnabled) {
    this.destinationTypesEnabled = destinationTypesEnabled;
    return this;
  }

  public DdidnsrickettsDiscoveryConfig addDestinationTypesEnabledItem(String destinationTypesEnabledItem) {
    if (this.destinationTypesEnabled == null) {
      this.destinationTypesEnabled = new ArrayList<>();
    }
    this.destinationTypesEnabled.add(destinationTypesEnabledItem);
    return this;
  }

  /**
   * Destinations types enabled: Example: DNS, IPAM and ACCOUNT.
   * @return destinationTypesEnabled
   */
  @javax.annotation.Nullable
  public List<String> getDestinationTypesEnabled() {
    return destinationTypesEnabled;
  }

  public void setDestinationTypesEnabled(@javax.annotation.Nullable List<String> destinationTypesEnabled) {
    this.destinationTypesEnabled = destinationTypesEnabled;
  }


  public DdidnsrickettsDiscoveryConfig destinations(@javax.annotation.Nullable List<DdidnsrickettsDestination> destinations) {
    this.destinations = destinations;
    return this;
  }

  public DdidnsrickettsDiscoveryConfig addDestinationsItem(DdidnsrickettsDestination destinationsItem) {
    if (this.destinations == null) {
      this.destinations = new ArrayList<>();
    }
    this.destinations.add(destinationsItem);
    return this;
  }

  /**
   * Destinations.
   * @return destinations
   */
  @javax.annotation.Nullable
  public List<DdidnsrickettsDestination> getDestinations() {
    return destinations;
  }

  public void setDestinations(@javax.annotation.Nullable List<DdidnsrickettsDestination> destinations) {
    this.destinations = destinations;
  }


  /**
   * Auto-generated unique discovery config ID. Format BloxID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public DdidnsrickettsDiscoveryConfig lastSync(@javax.annotation.Nullable OffsetDateTime lastSync) {
    this.lastSync = lastSync;
    return this;
  }

  /**
   * Last sync timestamp.
   * @return lastSync
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSync() {
    return lastSync;
  }

  public void setLastSync(@javax.annotation.Nullable OffsetDateTime lastSync) {
    this.lastSync = lastSync;
  }


  public DdidnsrickettsDiscoveryConfig name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the discovery config.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public DdidnsrickettsDiscoveryConfig providerType(@javax.annotation.Nullable String providerType) {
    this.providerType = providerType;
    return this;
  }

  /**
   * The provider&#39;s type. Examples: Amazon Web Services, Google Cloud Platform, and Microsoft Azure.
   * @return providerType
   */
  @javax.annotation.Nullable
  public String getProviderType() {
    return providerType;
  }

  public void setProviderType(@javax.annotation.Nullable String providerType) {
    this.providerType = providerType;
  }


  public DdidnsrickettsDiscoveryConfig sourceConfigs(@javax.annotation.Nullable List<DdidnsrickettsSourceConfig> sourceConfigs) {
    this.sourceConfigs = sourceConfigs;
    return this;
  }

  public DdidnsrickettsDiscoveryConfig addSourceConfigsItem(DdidnsrickettsSourceConfig sourceConfigsItem) {
    if (this.sourceConfigs == null) {
      this.sourceConfigs = new ArrayList<>();
    }
    this.sourceConfigs.add(sourceConfigsItem);
    return this;
  }

  /**
   * Source configs.
   * @return sourceConfigs
   */
  @javax.annotation.Nullable
  public List<DdidnsrickettsSourceConfig> getSourceConfigs() {
    return sourceConfigs;
  }

  public void setSourceConfigs(@javax.annotation.Nullable List<DdidnsrickettsSourceConfig> sourceConfigs) {
    this.sourceConfigs = sourceConfigs;
  }


  public DdidnsrickettsDiscoveryConfig status(@javax.annotation.Nullable String status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the sync operation. In single account case, Its the combined status of account &amp; all the destinations statuses In auto discover case, Its the status of the account discovery only.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable String status) {
    this.status = status;
  }


  public DdidnsrickettsDiscoveryConfig statusMessage(@javax.annotation.Nullable String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Aggregate status message of the sync operation.
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(@javax.annotation.Nullable String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public DdidnsrickettsDiscoveryConfig syncInterval(@javax.annotation.Nullable String syncInterval) {
    this.syncInterval = syncInterval;
    return this;
  }

  /**
   * Get syncInterval
   * @return syncInterval
   */
  @javax.annotation.Nullable
  public String getSyncInterval() {
    return syncInterval;
  }

  public void setSyncInterval(@javax.annotation.Nullable String syncInterval) {
    this.syncInterval = syncInterval;
  }


  public DdidnsrickettsDiscoveryConfig tags(@javax.annotation.Nullable Map<String, Object> tags) {
    this.tags = tags;
    return this;
  }

  public DdidnsrickettsDiscoveryConfig putTagsItem(String key, Object tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Tagging specifics.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, Object> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Map<String, Object> tags) {
    this.tags = tags;
  }


  /**
   * Timestamp when the object has been updated.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DdidnsrickettsDiscoveryConfig ddidnsrickettsDiscoveryConfig = (DdidnsrickettsDiscoveryConfig) o;
    return Objects.equals(this.accountPreference, ddidnsrickettsDiscoveryConfig.accountPreference) &&
        Objects.equals(this.additionalConfig, ddidnsrickettsDiscoveryConfig.additionalConfig) &&
        Objects.equals(this.createdAt, ddidnsrickettsDiscoveryConfig.createdAt) &&
        Objects.equals(this.credentialPreference, ddidnsrickettsDiscoveryConfig.credentialPreference) &&
        Objects.equals(this.deletedAt, ddidnsrickettsDiscoveryConfig.deletedAt) &&
        Objects.equals(this.description, ddidnsrickettsDiscoveryConfig.description) &&
        Objects.equals(this.desiredState, ddidnsrickettsDiscoveryConfig.desiredState) &&
        Objects.equals(this.destinationTypesEnabled, ddidnsrickettsDiscoveryConfig.destinationTypesEnabled) &&
        Objects.equals(this.destinations, ddidnsrickettsDiscoveryConfig.destinations) &&
        Objects.equals(this.id, ddidnsrickettsDiscoveryConfig.id) &&
        Objects.equals(this.lastSync, ddidnsrickettsDiscoveryConfig.lastSync) &&
        Objects.equals(this.name, ddidnsrickettsDiscoveryConfig.name) &&
        Objects.equals(this.providerType, ddidnsrickettsDiscoveryConfig.providerType) &&
        Objects.equals(this.sourceConfigs, ddidnsrickettsDiscoveryConfig.sourceConfigs) &&
        Objects.equals(this.status, ddidnsrickettsDiscoveryConfig.status) &&
        Objects.equals(this.statusMessage, ddidnsrickettsDiscoveryConfig.statusMessage) &&
        Objects.equals(this.syncInterval, ddidnsrickettsDiscoveryConfig.syncInterval) &&
        Objects.equals(this.tags, ddidnsrickettsDiscoveryConfig.tags) &&
        Objects.equals(this.updatedAt, ddidnsrickettsDiscoveryConfig.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountPreference, additionalConfig, createdAt, credentialPreference, deletedAt, description, desiredState, destinationTypesEnabled, destinations, id, lastSync, name, providerType, sourceConfigs, status, statusMessage, syncInterval, tags, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DdidnsrickettsDiscoveryConfig {\n");
    sb.append("    accountPreference: ").append(toIndentedString(accountPreference)).append("\n");
    sb.append("    additionalConfig: ").append(toIndentedString(additionalConfig)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    credentialPreference: ").append(toIndentedString(credentialPreference)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    desiredState: ").append(toIndentedString(desiredState)).append("\n");
    sb.append("    destinationTypesEnabled: ").append(toIndentedString(destinationTypesEnabled)).append("\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastSync: ").append(toIndentedString(lastSync)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    providerType: ").append(toIndentedString(providerType)).append("\n");
    sb.append("    sourceConfigs: ").append(toIndentedString(sourceConfigs)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    syncInterval: ").append(toIndentedString(syncInterval)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_preference");
    openapiFields.add("additional_config");
    openapiFields.add("created_at");
    openapiFields.add("credential_preference");
    openapiFields.add("deleted_at");
    openapiFields.add("description");
    openapiFields.add("desired_state");
    openapiFields.add("destination_types_enabled");
    openapiFields.add("destinations");
    openapiFields.add("id");
    openapiFields.add("last_sync");
    openapiFields.add("name");
    openapiFields.add("provider_type");
    openapiFields.add("source_configs");
    openapiFields.add("status");
    openapiFields.add("status_message");
    openapiFields.add("sync_interval");
    openapiFields.add("tags");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DdidnsrickettsDiscoveryConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DdidnsrickettsDiscoveryConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DdidnsrickettsDiscoveryConfig is not found in the empty JSON string", DdidnsrickettsDiscoveryConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DdidnsrickettsDiscoveryConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DdidnsrickettsDiscoveryConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DdidnsrickettsDiscoveryConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_preference") != null && !jsonObj.get("account_preference").isJsonNull()) && !jsonObj.get("account_preference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_preference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_preference").toString()));
      }
      // validate the optional field `additional_config`
      if (jsonObj.get("additional_config") != null && !jsonObj.get("additional_config").isJsonNull()) {
        DdidnsrickettsAdditionalConfig.validateJsonElement(jsonObj.get("additional_config"));
      }
      // validate the optional field `credential_preference`
      if (jsonObj.get("credential_preference") != null && !jsonObj.get("credential_preference").isJsonNull()) {
        DdidnsrickettsCredentialPreference.validateJsonElement(jsonObj.get("credential_preference"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("desired_state") != null && !jsonObj.get("desired_state").isJsonNull()) && !jsonObj.get("desired_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `desired_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("desired_state").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("destination_types_enabled") != null && !jsonObj.get("destination_types_enabled").isJsonNull() && !jsonObj.get("destination_types_enabled").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_types_enabled` to be an array in the JSON string but got `%s`", jsonObj.get("destination_types_enabled").toString()));
      }
      if (jsonObj.get("destinations") != null && !jsonObj.get("destinations").isJsonNull()) {
        JsonArray jsonArraydestinations = jsonObj.getAsJsonArray("destinations");
        if (jsonArraydestinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("destinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `destinations` to be an array in the JSON string but got `%s`", jsonObj.get("destinations").toString()));
          }

          // validate the optional field `destinations` (array)
          for (int i = 0; i < jsonArraydestinations.size(); i++) {
            DdidnsrickettsDestination.validateJsonElement(jsonArraydestinations.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("provider_type") != null && !jsonObj.get("provider_type").isJsonNull()) && !jsonObj.get("provider_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_type").toString()));
      }
      if (jsonObj.get("source_configs") != null && !jsonObj.get("source_configs").isJsonNull()) {
        JsonArray jsonArraysourceConfigs = jsonObj.getAsJsonArray("source_configs");
        if (jsonArraysourceConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("source_configs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `source_configs` to be an array in the JSON string but got `%s`", jsonObj.get("source_configs").toString()));
          }

          // validate the optional field `source_configs` (array)
          for (int i = 0; i < jsonArraysourceConfigs.size(); i++) {
            DdidnsrickettsSourceConfig.validateJsonElement(jsonArraysourceConfigs.get(i));
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("status_message") != null && !jsonObj.get("status_message").isJsonNull()) && !jsonObj.get("status_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_message").toString()));
      }
      if ((jsonObj.get("sync_interval") != null && !jsonObj.get("sync_interval").isJsonNull()) && !jsonObj.get("sync_interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sync_interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sync_interval").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DdidnsrickettsDiscoveryConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DdidnsrickettsDiscoveryConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DdidnsrickettsDiscoveryConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DdidnsrickettsDiscoveryConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<DdidnsrickettsDiscoveryConfig>() {
           @Override
           public void write(JsonWriter out, DdidnsrickettsDiscoveryConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DdidnsrickettsDiscoveryConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DdidnsrickettsDiscoveryConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DdidnsrickettsDiscoveryConfig
   * @throws IOException if the JSON string is invalid with respect to DdidnsrickettsDiscoveryConfig
   */
  public static DdidnsrickettsDiscoveryConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DdidnsrickettsDiscoveryConfig.class);
  }

  /**
   * Convert an instance of DdidnsrickettsDiscoveryConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

