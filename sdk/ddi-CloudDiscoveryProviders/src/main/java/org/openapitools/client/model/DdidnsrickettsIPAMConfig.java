/*
 * Discovery Configuration API V2
 * The Discovery configuration service is a BloxOne Service that provides configuration for accessing and syncing the Cloud assets   Base Paths:  1. provider: **_/api/cloud_discovery/v2/_**  
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DdidnsrickettsIPAMConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:24.110229+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class DdidnsrickettsIPAMConfig {
  public static final String SERIALIZED_NAME_DHCP_SERVER = "dhcp_server";
  @SerializedName(SERIALIZED_NAME_DHCP_SERVER)
  @javax.annotation.Nullable
  private String dhcpServer;

  public static final String SERIALIZED_NAME_DISABLE_IPAM_PROJECTION = "disable_ipam_projection";
  @SerializedName(SERIALIZED_NAME_DISABLE_IPAM_PROJECTION)
  @javax.annotation.Nullable
  private Boolean disableIpamProjection;

  public static final String SERIALIZED_NAME_IP_SPACE = "ip_space";
  @SerializedName(SERIALIZED_NAME_IP_SPACE)
  @javax.annotation.Nullable
  private String ipSpace;

  public static final String SERIALIZED_NAME_SYNC_TYPE = "sync_type";
  @SerializedName(SERIALIZED_NAME_SYNC_TYPE)
  @javax.annotation.Nullable
  private String syncType;

  public DdidnsrickettsIPAMConfig() {
  }

  public DdidnsrickettsIPAMConfig dhcpServer(@javax.annotation.Nullable String dhcpServer) {
    this.dhcpServer = dhcpServer;
    return this;
  }

  /**
   * Get dhcpServer
   * @return dhcpServer
   */
  @javax.annotation.Nullable
  public String getDhcpServer() {
    return dhcpServer;
  }

  public void setDhcpServer(@javax.annotation.Nullable String dhcpServer) {
    this.dhcpServer = dhcpServer;
  }


  public DdidnsrickettsIPAMConfig disableIpamProjection(@javax.annotation.Nullable Boolean disableIpamProjection) {
    this.disableIpamProjection = disableIpamProjection;
    return this;
  }

  /**
   * Get disableIpamProjection
   * @return disableIpamProjection
   */
  @javax.annotation.Nullable
  public Boolean getDisableIpamProjection() {
    return disableIpamProjection;
  }

  public void setDisableIpamProjection(@javax.annotation.Nullable Boolean disableIpamProjection) {
    this.disableIpamProjection = disableIpamProjection;
  }


  public DdidnsrickettsIPAMConfig ipSpace(@javax.annotation.Nullable String ipSpace) {
    this.ipSpace = ipSpace;
    return this;
  }

  /**
   * Get ipSpace
   * @return ipSpace
   */
  @javax.annotation.Nullable
  public String getIpSpace() {
    return ipSpace;
  }

  public void setIpSpace(@javax.annotation.Nullable String ipSpace) {
    this.ipSpace = ipSpace;
  }


  public DdidnsrickettsIPAMConfig syncType(@javax.annotation.Nullable String syncType) {
    this.syncType = syncType;
    return this;
  }

  /**
   * Get syncType
   * @return syncType
   */
  @javax.annotation.Nullable
  public String getSyncType() {
    return syncType;
  }

  public void setSyncType(@javax.annotation.Nullable String syncType) {
    this.syncType = syncType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DdidnsrickettsIPAMConfig ddidnsrickettsIPAMConfig = (DdidnsrickettsIPAMConfig) o;
    return Objects.equals(this.dhcpServer, ddidnsrickettsIPAMConfig.dhcpServer) &&
        Objects.equals(this.disableIpamProjection, ddidnsrickettsIPAMConfig.disableIpamProjection) &&
        Objects.equals(this.ipSpace, ddidnsrickettsIPAMConfig.ipSpace) &&
        Objects.equals(this.syncType, ddidnsrickettsIPAMConfig.syncType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dhcpServer, disableIpamProjection, ipSpace, syncType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DdidnsrickettsIPAMConfig {\n");
    sb.append("    dhcpServer: ").append(toIndentedString(dhcpServer)).append("\n");
    sb.append("    disableIpamProjection: ").append(toIndentedString(disableIpamProjection)).append("\n");
    sb.append("    ipSpace: ").append(toIndentedString(ipSpace)).append("\n");
    sb.append("    syncType: ").append(toIndentedString(syncType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dhcp_server");
    openapiFields.add("disable_ipam_projection");
    openapiFields.add("ip_space");
    openapiFields.add("sync_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DdidnsrickettsIPAMConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DdidnsrickettsIPAMConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DdidnsrickettsIPAMConfig is not found in the empty JSON string", DdidnsrickettsIPAMConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DdidnsrickettsIPAMConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DdidnsrickettsIPAMConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dhcp_server") != null && !jsonObj.get("dhcp_server").isJsonNull()) && !jsonObj.get("dhcp_server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dhcp_server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dhcp_server").toString()));
      }
      if ((jsonObj.get("ip_space") != null && !jsonObj.get("ip_space").isJsonNull()) && !jsonObj.get("ip_space").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_space` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_space").toString()));
      }
      if ((jsonObj.get("sync_type") != null && !jsonObj.get("sync_type").isJsonNull()) && !jsonObj.get("sync_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sync_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sync_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DdidnsrickettsIPAMConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DdidnsrickettsIPAMConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DdidnsrickettsIPAMConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DdidnsrickettsIPAMConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<DdidnsrickettsIPAMConfig>() {
           @Override
           public void write(JsonWriter out, DdidnsrickettsIPAMConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DdidnsrickettsIPAMConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DdidnsrickettsIPAMConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DdidnsrickettsIPAMConfig
   * @throws IOException if the JSON string is invalid with respect to DdidnsrickettsIPAMConfig
   */
  public static DdidnsrickettsIPAMConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DdidnsrickettsIPAMConfig.class);
  }

  /**
   * Convert an instance of DdidnsrickettsIPAMConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

