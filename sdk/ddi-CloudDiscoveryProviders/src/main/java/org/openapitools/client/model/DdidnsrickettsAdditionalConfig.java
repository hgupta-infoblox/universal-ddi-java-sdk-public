/*
 * Discovery Configuration API V2
 * The Discovery configuration service is a BloxOne Service that provides configuration for accessing and syncing the Cloud assets   Base Paths:  1. provider: **_/api/cloud_discovery/v2/_**  
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DdidnsrickettsObjectType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DdidnsrickettsAdditionalConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:24.110229+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class DdidnsrickettsAdditionalConfig {
  public static final String SERIALIZED_NAME_EXCLUDED_ACCOUNTS = "excluded_accounts";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_ACCOUNTS)
  @javax.annotation.Nullable
  private List<String> excludedAccounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_FEDERATED_REALMS = "federated_realms";
  @SerializedName(SERIALIZED_NAME_FEDERATED_REALMS)
  @javax.annotation.Nullable
  private List<String> federatedRealms = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORWARD_ZONE_ENABLED = "forward_zone_enabled";
  @SerializedName(SERIALIZED_NAME_FORWARD_ZONE_ENABLED)
  @javax.annotation.Nullable
  private Boolean forwardZoneEnabled;

  public static final String SERIALIZED_NAME_INTERNAL_RANGES_ENABLED = "internal_ranges_enabled";
  @SerializedName(SERIALIZED_NAME_INTERNAL_RANGES_ENABLED)
  @javax.annotation.Nullable
  private Boolean internalRangesEnabled;

  public static final String SERIALIZED_NAME_OBJECT_TYPE = "object_type";
  @SerializedName(SERIALIZED_NAME_OBJECT_TYPE)
  @javax.annotation.Nullable
  private DdidnsrickettsObjectType objectType;

  public DdidnsrickettsAdditionalConfig() {
  }

  public DdidnsrickettsAdditionalConfig excludedAccounts(@javax.annotation.Nullable List<String> excludedAccounts) {
    this.excludedAccounts = excludedAccounts;
    return this;
  }

  public DdidnsrickettsAdditionalConfig addExcludedAccountsItem(String excludedAccountsItem) {
    if (this.excludedAccounts == null) {
      this.excludedAccounts = new ArrayList<>();
    }
    this.excludedAccounts.add(excludedAccountsItem);
    return this;
  }

  /**
   * Get excludedAccounts
   * @return excludedAccounts
   */
  @javax.annotation.Nullable
  public List<String> getExcludedAccounts() {
    return excludedAccounts;
  }

  public void setExcludedAccounts(@javax.annotation.Nullable List<String> excludedAccounts) {
    this.excludedAccounts = excludedAccounts;
  }


  public DdidnsrickettsAdditionalConfig federatedRealms(@javax.annotation.Nullable List<String> federatedRealms) {
    this.federatedRealms = federatedRealms;
    return this;
  }

  public DdidnsrickettsAdditionalConfig addFederatedRealmsItem(String federatedRealmsItem) {
    if (this.federatedRealms == null) {
      this.federatedRealms = new ArrayList<>();
    }
    this.federatedRealms.add(federatedRealmsItem);
    return this;
  }

  /**
   * The IDs of the federated realms in which the discovered ipSpace participates.
   * @return federatedRealms
   */
  @javax.annotation.Nullable
  public List<String> getFederatedRealms() {
    return federatedRealms;
  }

  public void setFederatedRealms(@javax.annotation.Nullable List<String> federatedRealms) {
    this.federatedRealms = federatedRealms;
  }


  public DdidnsrickettsAdditionalConfig forwardZoneEnabled(@javax.annotation.Nullable Boolean forwardZoneEnabled) {
    this.forwardZoneEnabled = forwardZoneEnabled;
    return this;
  }

  /**
   * Get forwardZoneEnabled
   * @return forwardZoneEnabled
   */
  @javax.annotation.Nullable
  public Boolean getForwardZoneEnabled() {
    return forwardZoneEnabled;
  }

  public void setForwardZoneEnabled(@javax.annotation.Nullable Boolean forwardZoneEnabled) {
    this.forwardZoneEnabled = forwardZoneEnabled;
  }


  public DdidnsrickettsAdditionalConfig internalRangesEnabled(@javax.annotation.Nullable Boolean internalRangesEnabled) {
    this.internalRangesEnabled = internalRangesEnabled;
    return this;
  }

  /**
   * Get internalRangesEnabled
   * @return internalRangesEnabled
   */
  @javax.annotation.Nullable
  public Boolean getInternalRangesEnabled() {
    return internalRangesEnabled;
  }

  public void setInternalRangesEnabled(@javax.annotation.Nullable Boolean internalRangesEnabled) {
    this.internalRangesEnabled = internalRangesEnabled;
  }


  public DdidnsrickettsAdditionalConfig objectType(@javax.annotation.Nullable DdidnsrickettsObjectType objectType) {
    this.objectType = objectType;
    return this;
  }

  /**
   * Get objectType
   * @return objectType
   */
  @javax.annotation.Nullable
  public DdidnsrickettsObjectType getObjectType() {
    return objectType;
  }

  public void setObjectType(@javax.annotation.Nullable DdidnsrickettsObjectType objectType) {
    this.objectType = objectType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DdidnsrickettsAdditionalConfig ddidnsrickettsAdditionalConfig = (DdidnsrickettsAdditionalConfig) o;
    return Objects.equals(this.excludedAccounts, ddidnsrickettsAdditionalConfig.excludedAccounts) &&
        Objects.equals(this.federatedRealms, ddidnsrickettsAdditionalConfig.federatedRealms) &&
        Objects.equals(this.forwardZoneEnabled, ddidnsrickettsAdditionalConfig.forwardZoneEnabled) &&
        Objects.equals(this.internalRangesEnabled, ddidnsrickettsAdditionalConfig.internalRangesEnabled) &&
        Objects.equals(this.objectType, ddidnsrickettsAdditionalConfig.objectType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(excludedAccounts, federatedRealms, forwardZoneEnabled, internalRangesEnabled, objectType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DdidnsrickettsAdditionalConfig {\n");
    sb.append("    excludedAccounts: ").append(toIndentedString(excludedAccounts)).append("\n");
    sb.append("    federatedRealms: ").append(toIndentedString(federatedRealms)).append("\n");
    sb.append("    forwardZoneEnabled: ").append(toIndentedString(forwardZoneEnabled)).append("\n");
    sb.append("    internalRangesEnabled: ").append(toIndentedString(internalRangesEnabled)).append("\n");
    sb.append("    objectType: ").append(toIndentedString(objectType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("excluded_accounts");
    openapiFields.add("federated_realms");
    openapiFields.add("forward_zone_enabled");
    openapiFields.add("internal_ranges_enabled");
    openapiFields.add("object_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DdidnsrickettsAdditionalConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DdidnsrickettsAdditionalConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DdidnsrickettsAdditionalConfig is not found in the empty JSON string", DdidnsrickettsAdditionalConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DdidnsrickettsAdditionalConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DdidnsrickettsAdditionalConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("excluded_accounts") != null && !jsonObj.get("excluded_accounts").isJsonNull() && !jsonObj.get("excluded_accounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excluded_accounts` to be an array in the JSON string but got `%s`", jsonObj.get("excluded_accounts").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("federated_realms") != null && !jsonObj.get("federated_realms").isJsonNull() && !jsonObj.get("federated_realms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `federated_realms` to be an array in the JSON string but got `%s`", jsonObj.get("federated_realms").toString()));
      }
      // validate the optional field `object_type`
      if (jsonObj.get("object_type") != null && !jsonObj.get("object_type").isJsonNull()) {
        DdidnsrickettsObjectType.validateJsonElement(jsonObj.get("object_type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DdidnsrickettsAdditionalConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DdidnsrickettsAdditionalConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DdidnsrickettsAdditionalConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DdidnsrickettsAdditionalConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<DdidnsrickettsAdditionalConfig>() {
           @Override
           public void write(JsonWriter out, DdidnsrickettsAdditionalConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DdidnsrickettsAdditionalConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DdidnsrickettsAdditionalConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DdidnsrickettsAdditionalConfig
   * @throws IOException if the JSON string is invalid with respect to DdidnsrickettsAdditionalConfig
   */
  public static DdidnsrickettsAdditionalConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DdidnsrickettsAdditionalConfig.class);
  }

  /**
   * Convert an instance of DdidnsrickettsAdditionalConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

