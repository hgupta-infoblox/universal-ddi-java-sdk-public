/*
 * Discovery Configuration API V2
 * The Discovery configuration service is a BloxOne Service that provides configuration for accessing and syncing the Cloud assets   Base Paths:  1. provider: **_/api/cloud_discovery/v2/_**  
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DdidnsrickettsDNSConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:24.110229+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class DdidnsrickettsDNSConfig {
  public static final String SERIALIZED_NAME_CONSOLIDATED_ZONE_DATA_ENABLED = "consolidated_zone_data_enabled";
  @SerializedName(SERIALIZED_NAME_CONSOLIDATED_ZONE_DATA_ENABLED)
  @javax.annotation.Nullable
  private Boolean consolidatedZoneDataEnabled;

  public static final String SERIALIZED_NAME_RESOLVER_ENDPOINTS_SYNC_ENABLED = "resolver_endpoints_sync_enabled";
  @SerializedName(SERIALIZED_NAME_RESOLVER_ENDPOINTS_SYNC_ENABLED)
  @javax.annotation.Nullable
  private Boolean resolverEndpointsSyncEnabled;

  public static final String SERIALIZED_NAME_SPLIT_VIEW_ENABLED = "split_view_enabled";
  @SerializedName(SERIALIZED_NAME_SPLIT_VIEW_ENABLED)
  @javax.annotation.Nullable
  private Boolean splitViewEnabled;

  public static final String SERIALIZED_NAME_SYNC_TYPE = "sync_type";
  @SerializedName(SERIALIZED_NAME_SYNC_TYPE)
  @javax.annotation.Nullable
  private String syncType;

  public static final String SERIALIZED_NAME_VIEW_ID = "view_id";
  @SerializedName(SERIALIZED_NAME_VIEW_ID)
  @javax.annotation.Nullable
  private String viewId;

  public static final String SERIALIZED_NAME_VIEW_NAME = "view_name";
  @SerializedName(SERIALIZED_NAME_VIEW_NAME)
  @javax.annotation.Nullable
  private String viewName;

  public DdidnsrickettsDNSConfig() {
  }

  public DdidnsrickettsDNSConfig consolidatedZoneDataEnabled(@javax.annotation.Nullable Boolean consolidatedZoneDataEnabled) {
    this.consolidatedZoneDataEnabled = consolidatedZoneDataEnabled;
    return this;
  }

  /**
   * Get consolidatedZoneDataEnabled
   * @return consolidatedZoneDataEnabled
   */
  @javax.annotation.Nullable
  public Boolean getConsolidatedZoneDataEnabled() {
    return consolidatedZoneDataEnabled;
  }

  public void setConsolidatedZoneDataEnabled(@javax.annotation.Nullable Boolean consolidatedZoneDataEnabled) {
    this.consolidatedZoneDataEnabled = consolidatedZoneDataEnabled;
  }


  public DdidnsrickettsDNSConfig resolverEndpointsSyncEnabled(@javax.annotation.Nullable Boolean resolverEndpointsSyncEnabled) {
    this.resolverEndpointsSyncEnabled = resolverEndpointsSyncEnabled;
    return this;
  }

  /**
   * resolver_endpoints_sync_enabled enables discovery of inbound&amp;outbound endpoints from third party providers.
   * @return resolverEndpointsSyncEnabled
   */
  @javax.annotation.Nullable
  public Boolean getResolverEndpointsSyncEnabled() {
    return resolverEndpointsSyncEnabled;
  }

  public void setResolverEndpointsSyncEnabled(@javax.annotation.Nullable Boolean resolverEndpointsSyncEnabled) {
    this.resolverEndpointsSyncEnabled = resolverEndpointsSyncEnabled;
  }


  public DdidnsrickettsDNSConfig splitViewEnabled(@javax.annotation.Nullable Boolean splitViewEnabled) {
    this.splitViewEnabled = splitViewEnabled;
    return this;
  }

  /**
   * split_view_enabled consolidates private zones into a single view, which is separate from the public zone view.
   * @return splitViewEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSplitViewEnabled() {
    return splitViewEnabled;
  }

  public void setSplitViewEnabled(@javax.annotation.Nullable Boolean splitViewEnabled) {
    this.splitViewEnabled = splitViewEnabled;
  }


  public DdidnsrickettsDNSConfig syncType(@javax.annotation.Nullable String syncType) {
    this.syncType = syncType;
    return this;
  }

  /**
   * Get syncType
   * @return syncType
   */
  @javax.annotation.Nullable
  public String getSyncType() {
    return syncType;
  }

  public void setSyncType(@javax.annotation.Nullable String syncType) {
    this.syncType = syncType;
  }


  public DdidnsrickettsDNSConfig viewId(@javax.annotation.Nullable String viewId) {
    this.viewId = viewId;
    return this;
  }

  /**
   * Get viewId
   * @return viewId
   */
  @javax.annotation.Nullable
  public String getViewId() {
    return viewId;
  }

  public void setViewId(@javax.annotation.Nullable String viewId) {
    this.viewId = viewId;
  }


  public DdidnsrickettsDNSConfig viewName(@javax.annotation.Nullable String viewName) {
    this.viewName = viewName;
    return this;
  }

  /**
   * Get viewName
   * @return viewName
   */
  @javax.annotation.Nullable
  public String getViewName() {
    return viewName;
  }

  public void setViewName(@javax.annotation.Nullable String viewName) {
    this.viewName = viewName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DdidnsrickettsDNSConfig ddidnsrickettsDNSConfig = (DdidnsrickettsDNSConfig) o;
    return Objects.equals(this.consolidatedZoneDataEnabled, ddidnsrickettsDNSConfig.consolidatedZoneDataEnabled) &&
        Objects.equals(this.resolverEndpointsSyncEnabled, ddidnsrickettsDNSConfig.resolverEndpointsSyncEnabled) &&
        Objects.equals(this.splitViewEnabled, ddidnsrickettsDNSConfig.splitViewEnabled) &&
        Objects.equals(this.syncType, ddidnsrickettsDNSConfig.syncType) &&
        Objects.equals(this.viewId, ddidnsrickettsDNSConfig.viewId) &&
        Objects.equals(this.viewName, ddidnsrickettsDNSConfig.viewName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consolidatedZoneDataEnabled, resolverEndpointsSyncEnabled, splitViewEnabled, syncType, viewId, viewName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DdidnsrickettsDNSConfig {\n");
    sb.append("    consolidatedZoneDataEnabled: ").append(toIndentedString(consolidatedZoneDataEnabled)).append("\n");
    sb.append("    resolverEndpointsSyncEnabled: ").append(toIndentedString(resolverEndpointsSyncEnabled)).append("\n");
    sb.append("    splitViewEnabled: ").append(toIndentedString(splitViewEnabled)).append("\n");
    sb.append("    syncType: ").append(toIndentedString(syncType)).append("\n");
    sb.append("    viewId: ").append(toIndentedString(viewId)).append("\n");
    sb.append("    viewName: ").append(toIndentedString(viewName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consolidated_zone_data_enabled");
    openapiFields.add("resolver_endpoints_sync_enabled");
    openapiFields.add("split_view_enabled");
    openapiFields.add("sync_type");
    openapiFields.add("view_id");
    openapiFields.add("view_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DdidnsrickettsDNSConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DdidnsrickettsDNSConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DdidnsrickettsDNSConfig is not found in the empty JSON string", DdidnsrickettsDNSConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DdidnsrickettsDNSConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DdidnsrickettsDNSConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sync_type") != null && !jsonObj.get("sync_type").isJsonNull()) && !jsonObj.get("sync_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sync_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sync_type").toString()));
      }
      if ((jsonObj.get("view_id") != null && !jsonObj.get("view_id").isJsonNull()) && !jsonObj.get("view_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `view_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("view_id").toString()));
      }
      if ((jsonObj.get("view_name") != null && !jsonObj.get("view_name").isJsonNull()) && !jsonObj.get("view_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `view_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("view_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DdidnsrickettsDNSConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DdidnsrickettsDNSConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DdidnsrickettsDNSConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DdidnsrickettsDNSConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<DdidnsrickettsDNSConfig>() {
           @Override
           public void write(JsonWriter out, DdidnsrickettsDNSConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DdidnsrickettsDNSConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DdidnsrickettsDNSConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DdidnsrickettsDNSConfig
   * @throws IOException if the JSON string is invalid with respect to DdidnsrickettsDNSConfig
   */
  public static DdidnsrickettsDNSConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DdidnsrickettsDNSConfig.class);
  }

  /**
   * Convert an instance of DdidnsrickettsDNSConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

