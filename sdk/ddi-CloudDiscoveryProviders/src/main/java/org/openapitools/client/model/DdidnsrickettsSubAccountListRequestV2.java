/*
 * Discovery Configuration API V2
 * The Discovery configuration service is a BloxOne Service that provides configuration for accessing and syncing the Cloud assets   Base Paths:  1. provider: **_/api/cloud_discovery/v2/_**  
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DdidnsrickettsSubAccountProvCredConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DdidnsrickettsSubAccountListRequestV2
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:24.110229+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class DdidnsrickettsSubAccountListRequestV2 {
  public static final String SERIALIZED_NAME_ACCESS_TYPE = "access_type";
  @SerializedName(SERIALIZED_NAME_ACCESS_TYPE)
  @javax.annotation.Nullable
  private String accessType;

  public static final String SERIALIZED_NAME_CREDENTIAL_ID = "credential_id";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL_ID)
  @javax.annotation.Nullable
  private String credentialId;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  @javax.annotation.Nullable
  private String fields;

  public static final String SERIALIZED_NAME_PROVIDER_CREDENTIALS_CONFIG = "provider_credentials_config";
  @SerializedName(SERIALIZED_NAME_PROVIDER_CREDENTIALS_CONFIG)
  @javax.annotation.Nullable
  private DdidnsrickettsSubAccountProvCredConfig providerCredentialsConfig;

  public static final String SERIALIZED_NAME_PROVIDER_TYPE = "provider_type";
  @SerializedName(SERIALIZED_NAME_PROVIDER_TYPE)
  @javax.annotation.Nullable
  private String providerType;

  public DdidnsrickettsSubAccountListRequestV2() {
  }

  public DdidnsrickettsSubAccountListRequestV2 accessType(@javax.annotation.Nullable String accessType) {
    this.accessType = accessType;
    return this;
  }

  /**
   * Get accessType
   * @return accessType
   */
  @javax.annotation.Nullable
  public String getAccessType() {
    return accessType;
  }

  public void setAccessType(@javax.annotation.Nullable String accessType) {
    this.accessType = accessType;
  }


  public DdidnsrickettsSubAccountListRequestV2 credentialId(@javax.annotation.Nullable String credentialId) {
    this.credentialId = credentialId;
    return this;
  }

  /**
   * Get credentialId
   * @return credentialId
   */
  @javax.annotation.Nullable
  public String getCredentialId() {
    return credentialId;
  }

  public void setCredentialId(@javax.annotation.Nullable String credentialId) {
    this.credentialId = credentialId;
  }


  public DdidnsrickettsSubAccountListRequestV2 fields(@javax.annotation.Nullable String fields) {
    this.fields = fields;
    return this;
  }

  /**
   * atlas.api.field_selection
   * @return fields
   */
  @javax.annotation.Nullable
  public String getFields() {
    return fields;
  }

  public void setFields(@javax.annotation.Nullable String fields) {
    this.fields = fields;
  }


  public DdidnsrickettsSubAccountListRequestV2 providerCredentialsConfig(@javax.annotation.Nullable DdidnsrickettsSubAccountProvCredConfig providerCredentialsConfig) {
    this.providerCredentialsConfig = providerCredentialsConfig;
    return this;
  }

  /**
   * Get providerCredentialsConfig
   * @return providerCredentialsConfig
   */
  @javax.annotation.Nullable
  public DdidnsrickettsSubAccountProvCredConfig getProviderCredentialsConfig() {
    return providerCredentialsConfig;
  }

  public void setProviderCredentialsConfig(@javax.annotation.Nullable DdidnsrickettsSubAccountProvCredConfig providerCredentialsConfig) {
    this.providerCredentialsConfig = providerCredentialsConfig;
  }


  public DdidnsrickettsSubAccountListRequestV2 providerType(@javax.annotation.Nullable String providerType) {
    this.providerType = providerType;
    return this;
  }

  /**
   * Get providerType
   * @return providerType
   */
  @javax.annotation.Nullable
  public String getProviderType() {
    return providerType;
  }

  public void setProviderType(@javax.annotation.Nullable String providerType) {
    this.providerType = providerType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DdidnsrickettsSubAccountListRequestV2 ddidnsrickettsSubAccountListRequestV2 = (DdidnsrickettsSubAccountListRequestV2) o;
    return Objects.equals(this.accessType, ddidnsrickettsSubAccountListRequestV2.accessType) &&
        Objects.equals(this.credentialId, ddidnsrickettsSubAccountListRequestV2.credentialId) &&
        Objects.equals(this.fields, ddidnsrickettsSubAccountListRequestV2.fields) &&
        Objects.equals(this.providerCredentialsConfig, ddidnsrickettsSubAccountListRequestV2.providerCredentialsConfig) &&
        Objects.equals(this.providerType, ddidnsrickettsSubAccountListRequestV2.providerType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessType, credentialId, fields, providerCredentialsConfig, providerType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DdidnsrickettsSubAccountListRequestV2 {\n");
    sb.append("    accessType: ").append(toIndentedString(accessType)).append("\n");
    sb.append("    credentialId: ").append(toIndentedString(credentialId)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    providerCredentialsConfig: ").append(toIndentedString(providerCredentialsConfig)).append("\n");
    sb.append("    providerType: ").append(toIndentedString(providerType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access_type");
    openapiFields.add("credential_id");
    openapiFields.add("fields");
    openapiFields.add("provider_credentials_config");
    openapiFields.add("provider_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DdidnsrickettsSubAccountListRequestV2
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DdidnsrickettsSubAccountListRequestV2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DdidnsrickettsSubAccountListRequestV2 is not found in the empty JSON string", DdidnsrickettsSubAccountListRequestV2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DdidnsrickettsSubAccountListRequestV2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DdidnsrickettsSubAccountListRequestV2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("access_type") != null && !jsonObj.get("access_type").isJsonNull()) && !jsonObj.get("access_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_type").toString()));
      }
      if ((jsonObj.get("credential_id") != null && !jsonObj.get("credential_id").isJsonNull()) && !jsonObj.get("credential_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credential_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credential_id").toString()));
      }
      if ((jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull()) && !jsonObj.get("fields").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fields` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fields").toString()));
      }
      // validate the optional field `provider_credentials_config`
      if (jsonObj.get("provider_credentials_config") != null && !jsonObj.get("provider_credentials_config").isJsonNull()) {
        DdidnsrickettsSubAccountProvCredConfig.validateJsonElement(jsonObj.get("provider_credentials_config"));
      }
      if ((jsonObj.get("provider_type") != null && !jsonObj.get("provider_type").isJsonNull()) && !jsonObj.get("provider_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DdidnsrickettsSubAccountListRequestV2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DdidnsrickettsSubAccountListRequestV2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DdidnsrickettsSubAccountListRequestV2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DdidnsrickettsSubAccountListRequestV2.class));

       return (TypeAdapter<T>) new TypeAdapter<DdidnsrickettsSubAccountListRequestV2>() {
           @Override
           public void write(JsonWriter out, DdidnsrickettsSubAccountListRequestV2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DdidnsrickettsSubAccountListRequestV2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DdidnsrickettsSubAccountListRequestV2 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DdidnsrickettsSubAccountListRequestV2
   * @throws IOException if the JSON string is invalid with respect to DdidnsrickettsSubAccountListRequestV2
   */
  public static DdidnsrickettsSubAccountListRequestV2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DdidnsrickettsSubAccountListRequestV2.class);
  }

  /**
   * Convert an instance of DdidnsrickettsSubAccountListRequestV2 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

