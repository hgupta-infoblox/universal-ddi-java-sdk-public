/*
 * Discovery Configuration API V2
 * The Discovery configuration service is a BloxOne Service that provides configuration for accessing and syncing the Cloud assets   Base Paths:  1. provider: **_/api/cloud_discovery/v2/_**  
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DdidnsrickettsAdditionalConfig;
import org.openapitools.client.model.DdidnsrickettsCredentialPreference;
import org.openapitools.client.model.DdidnsrickettsDestination;
import org.openapitools.client.model.DdidnsrickettsSourceConfig;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for DdidnsrickettsDiscoveryConfig
 */
public class DdidnsrickettsDiscoveryConfigTest {
    private final DdidnsrickettsDiscoveryConfig model = new DdidnsrickettsDiscoveryConfig();

    /**
     * Model tests for DdidnsrickettsDiscoveryConfig
     */
    @Test
    public void testDdidnsrickettsDiscoveryConfig() {
        // TODO: test DdidnsrickettsDiscoveryConfig
    }

    /**
     * Test the property 'accountPreference'
     */
    @Test
    public void accountPreferenceTest() {
        // TODO: test accountPreference
    }

    /**
     * Test the property 'additionalConfig'
     */
    @Test
    public void additionalConfigTest() {
        // TODO: test additionalConfig
    }

    /**
     * Test the property 'createdAt'
     */
    @Test
    public void createdAtTest() {
        // TODO: test createdAt
    }

    /**
     * Test the property 'credentialPreference'
     */
    @Test
    public void credentialPreferenceTest() {
        // TODO: test credentialPreference
    }

    /**
     * Test the property 'deletedAt'
     */
    @Test
    public void deletedAtTest() {
        // TODO: test deletedAt
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'desiredState'
     */
    @Test
    public void desiredStateTest() {
        // TODO: test desiredState
    }

    /**
     * Test the property 'destinationTypesEnabled'
     */
    @Test
    public void destinationTypesEnabledTest() {
        // TODO: test destinationTypesEnabled
    }

    /**
     * Test the property 'destinations'
     */
    @Test
    public void destinationsTest() {
        // TODO: test destinations
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'lastSync'
     */
    @Test
    public void lastSyncTest() {
        // TODO: test lastSync
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'providerType'
     */
    @Test
    public void providerTypeTest() {
        // TODO: test providerType
    }

    /**
     * Test the property 'sourceConfigs'
     */
    @Test
    public void sourceConfigsTest() {
        // TODO: test sourceConfigs
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'statusMessage'
     */
    @Test
    public void statusMessageTest() {
        // TODO: test statusMessage
    }

    /**
     * Test the property 'syncInterval'
     */
    @Test
    public void syncIntervalTest() {
        // TODO: test syncInterval
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

    /**
     * Test the property 'updatedAt'
     */
    @Test
    public void updatedAtTest() {
        // TODO: test updatedAt
    }

}
