/*
 * Cloud DNS Forwarder API
 * Allows configuring resources to forward DNS queries from Cloud Providers to B1DDI/NIOS
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DdiCloudDnsForwarderIpAddress;
import org.openapitools.client.model.DdiCloudDnsForwarderPrivateNetwork;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the domain and target IP address information required to create a forwarding configuration that will route dns queries for the specified domain to the proper target.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:24.948083+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class DdiCloudDnsForwarderRule {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DELETED_AT = "deleted_at";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime deletedAt;

  public static final String SERIALIZED_NAME_DESTINATION_IPS = "destination_ips";
  @SerializedName(SERIALIZED_NAME_DESTINATION_IPS)
  @javax.annotation.Nullable
  private List<DdiCloudDnsForwarderIpAddress> destinationIps = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOMAIN_NAME = "domain_name";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  @javax.annotation.Nonnull
  private String domainName;

  public static final String SERIALIZED_NAME_ENDPOINT_ID = "endpoint_id";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_ID)
  @javax.annotation.Nonnull
  private String endpointId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_IDENTITY_ACCOUNT_ID = "identity_account_id";
  @SerializedName(SERIALIZED_NAME_IDENTITY_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String identityAccountId;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  @javax.annotation.Nullable
  private Map<String, Object> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_PROVIDER_RULE_ID = "provider_rule_id";
  @SerializedName(SERIALIZED_NAME_PROVIDER_RULE_ID)
  @javax.annotation.Nullable
  private String providerRuleId;

  public static final String SERIALIZED_NAME_PROVIDER_VIRTUAL_NETWORKS = "provider_virtual_networks";
  @SerializedName(SERIALIZED_NAME_PROVIDER_VIRTUAL_NETWORKS)
  @javax.annotation.Nullable
  private List<DdiCloudDnsForwarderPrivateNetwork> providerVirtualNetworks = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_ZONE_ID = "zone_id";
  @SerializedName(SERIALIZED_NAME_ZONE_ID)
  @javax.annotation.Nonnull
  private String zoneId;

  public DdiCloudDnsForwarderRule() {
  }

  public DdiCloudDnsForwarderRule(
     String id
  ) {
    this();
    this.id = id;
  }

  public DdiCloudDnsForwarderRule createdAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The timestamp when the object was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public DdiCloudDnsForwarderRule deletedAt(@javax.annotation.Nullable OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
    return this;
  }

  /**
   * The timestamp when the object has been deleted. Nil until deletion.
   * @return deletedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }

  public void setDeletedAt(@javax.annotation.Nullable OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
  }


  public DdiCloudDnsForwarderRule destinationIps(@javax.annotation.Nullable List<DdiCloudDnsForwarderIpAddress> destinationIps) {
    this.destinationIps = destinationIps;
    return this;
  }

  public DdiCloudDnsForwarderRule addDestinationIpsItem(DdiCloudDnsForwarderIpAddress destinationIpsItem) {
    if (this.destinationIps == null) {
      this.destinationIps = new ArrayList<>();
    }
    this.destinationIps.add(destinationIpsItem);
    return this;
  }

  /**
   * The destination IP addresses for the DNS servers related to the specified domain.
   * @return destinationIps
   */
  @javax.annotation.Nullable
  public List<DdiCloudDnsForwarderIpAddress> getDestinationIps() {
    return destinationIps;
  }

  public void setDestinationIps(@javax.annotation.Nullable List<DdiCloudDnsForwarderIpAddress> destinationIps) {
    this.destinationIps = destinationIps;
  }


  public DdiCloudDnsForwarderRule domainName(@javax.annotation.Nonnull String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * The domain name for the forwarding rule.
   * @return domainName
   */
  @javax.annotation.Nonnull
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(@javax.annotation.Nonnull String domainName) {
    this.domainName = domainName;
  }


  public DdiCloudDnsForwarderRule endpointId(@javax.annotation.Nonnull String endpointId) {
    this.endpointId = endpointId;
    return this;
  }

  /**
   * (FK) the identifier of the endpoint that this ruleset is associated with.
   * @return endpointId
   */
  @javax.annotation.Nonnull
  public String getEndpointId() {
    return endpointId;
  }

  public void setEndpointId(@javax.annotation.Nonnull String endpointId) {
    this.endpointId = endpointId;
  }


  /**
   * Primary key.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public DdiCloudDnsForwarderRule identityAccountId(@javax.annotation.Nullable String identityAccountId) {
    this.identityAccountId = identityAccountId;
    return this;
  }

  /**
   * Get identityAccountId
   * @return identityAccountId
   */
  @javax.annotation.Nullable
  public String getIdentityAccountId() {
    return identityAccountId;
  }

  public void setIdentityAccountId(@javax.annotation.Nullable String identityAccountId) {
    this.identityAccountId = identityAccountId;
  }


  public DdiCloudDnsForwarderRule metadata(@javax.annotation.Nullable Map<String, Object> metadata) {
    this.metadata = metadata;
    return this;
  }

  public DdiCloudDnsForwarderRule putMetadataItem(String key, Object metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Metadata for Rules object. Provider specific.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, Object> getMetadata() {
    return metadata;
  }

  public void setMetadata(@javax.annotation.Nullable Map<String, Object> metadata) {
    this.metadata = metadata;
  }


  public DdiCloudDnsForwarderRule providerRuleId(@javax.annotation.Nullable String providerRuleId) {
    this.providerRuleId = providerRuleId;
    return this;
  }

  /**
   * Identifier in the cloud for a rule (Azure uses a ruleset object, where AWS uses rule objects).
   * @return providerRuleId
   */
  @javax.annotation.Nullable
  public String getProviderRuleId() {
    return providerRuleId;
  }

  public void setProviderRuleId(@javax.annotation.Nullable String providerRuleId) {
    this.providerRuleId = providerRuleId;
  }


  public DdiCloudDnsForwarderRule providerVirtualNetworks(@javax.annotation.Nullable List<DdiCloudDnsForwarderPrivateNetwork> providerVirtualNetworks) {
    this.providerVirtualNetworks = providerVirtualNetworks;
    return this;
  }

  public DdiCloudDnsForwarderRule addProviderVirtualNetworksItem(DdiCloudDnsForwarderPrivateNetwork providerVirtualNetworksItem) {
    if (this.providerVirtualNetworks == null) {
      this.providerVirtualNetworks = new ArrayList<>();
    }
    this.providerVirtualNetworks.add(providerVirtualNetworksItem);
    return this;
  }

  /**
   * Provider virtual networks asssigned to rule. Solely for API use, not stored in DB.
   * @return providerVirtualNetworks
   */
  @javax.annotation.Nullable
  public List<DdiCloudDnsForwarderPrivateNetwork> getProviderVirtualNetworks() {
    return providerVirtualNetworks;
  }

  public void setProviderVirtualNetworks(@javax.annotation.Nullable List<DdiCloudDnsForwarderPrivateNetwork> providerVirtualNetworks) {
    this.providerVirtualNetworks = providerVirtualNetworks;
  }


  public DdiCloudDnsForwarderRule updatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The timestamp when the object has been updated. Equals to _created_at_ if not updated after creation.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public DdiCloudDnsForwarderRule zoneId(@javax.annotation.Nonnull String zoneId) {
    this.zoneId = zoneId;
    return this;
  }

  /**
   * The zone identifier of the forward zone in the B1DDI DNS apps DB.
   * @return zoneId
   */
  @javax.annotation.Nonnull
  public String getZoneId() {
    return zoneId;
  }

  public void setZoneId(@javax.annotation.Nonnull String zoneId) {
    this.zoneId = zoneId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DdiCloudDnsForwarderRule ddiCloudDnsForwarderRule = (DdiCloudDnsForwarderRule) o;
    return Objects.equals(this.createdAt, ddiCloudDnsForwarderRule.createdAt) &&
        Objects.equals(this.deletedAt, ddiCloudDnsForwarderRule.deletedAt) &&
        Objects.equals(this.destinationIps, ddiCloudDnsForwarderRule.destinationIps) &&
        Objects.equals(this.domainName, ddiCloudDnsForwarderRule.domainName) &&
        Objects.equals(this.endpointId, ddiCloudDnsForwarderRule.endpointId) &&
        Objects.equals(this.id, ddiCloudDnsForwarderRule.id) &&
        Objects.equals(this.identityAccountId, ddiCloudDnsForwarderRule.identityAccountId) &&
        Objects.equals(this.metadata, ddiCloudDnsForwarderRule.metadata) &&
        Objects.equals(this.providerRuleId, ddiCloudDnsForwarderRule.providerRuleId) &&
        Objects.equals(this.providerVirtualNetworks, ddiCloudDnsForwarderRule.providerVirtualNetworks) &&
        Objects.equals(this.updatedAt, ddiCloudDnsForwarderRule.updatedAt) &&
        Objects.equals(this.zoneId, ddiCloudDnsForwarderRule.zoneId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, deletedAt, destinationIps, domainName, endpointId, id, identityAccountId, metadata, providerRuleId, providerVirtualNetworks, updatedAt, zoneId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DdiCloudDnsForwarderRule {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    destinationIps: ").append(toIndentedString(destinationIps)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    endpointId: ").append(toIndentedString(endpointId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identityAccountId: ").append(toIndentedString(identityAccountId)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    providerRuleId: ").append(toIndentedString(providerRuleId)).append("\n");
    sb.append("    providerVirtualNetworks: ").append(toIndentedString(providerVirtualNetworks)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    zoneId: ").append(toIndentedString(zoneId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("deleted_at");
    openapiFields.add("destination_ips");
    openapiFields.add("domain_name");
    openapiFields.add("endpoint_id");
    openapiFields.add("id");
    openapiFields.add("identity_account_id");
    openapiFields.add("metadata");
    openapiFields.add("provider_rule_id");
    openapiFields.add("provider_virtual_networks");
    openapiFields.add("updated_at");
    openapiFields.add("zone_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("domain_name");
    openapiRequiredFields.add("endpoint_id");
    openapiRequiredFields.add("zone_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DdiCloudDnsForwarderRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DdiCloudDnsForwarderRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DdiCloudDnsForwarderRule is not found in the empty JSON string", DdiCloudDnsForwarderRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DdiCloudDnsForwarderRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DdiCloudDnsForwarderRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DdiCloudDnsForwarderRule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("destination_ips") != null && !jsonObj.get("destination_ips").isJsonNull()) {
        JsonArray jsonArraydestinationIps = jsonObj.getAsJsonArray("destination_ips");
        if (jsonArraydestinationIps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("destination_ips").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `destination_ips` to be an array in the JSON string but got `%s`", jsonObj.get("destination_ips").toString()));
          }

          // validate the optional field `destination_ips` (array)
          for (int i = 0; i < jsonArraydestinationIps.size(); i++) {
            DdiCloudDnsForwarderIpAddress.validateJsonElement(jsonArraydestinationIps.get(i));
          };
        }
      }
      if (!jsonObj.get("domain_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain_name").toString()));
      }
      if (!jsonObj.get("endpoint_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint_id").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("identity_account_id") != null && !jsonObj.get("identity_account_id").isJsonNull()) && !jsonObj.get("identity_account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identity_account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identity_account_id").toString()));
      }
      if ((jsonObj.get("provider_rule_id") != null && !jsonObj.get("provider_rule_id").isJsonNull()) && !jsonObj.get("provider_rule_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_rule_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_rule_id").toString()));
      }
      if (jsonObj.get("provider_virtual_networks") != null && !jsonObj.get("provider_virtual_networks").isJsonNull()) {
        JsonArray jsonArrayproviderVirtualNetworks = jsonObj.getAsJsonArray("provider_virtual_networks");
        if (jsonArrayproviderVirtualNetworks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("provider_virtual_networks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `provider_virtual_networks` to be an array in the JSON string but got `%s`", jsonObj.get("provider_virtual_networks").toString()));
          }

          // validate the optional field `provider_virtual_networks` (array)
          for (int i = 0; i < jsonArrayproviderVirtualNetworks.size(); i++) {
            DdiCloudDnsForwarderPrivateNetwork.validateJsonElement(jsonArrayproviderVirtualNetworks.get(i));
          };
        }
      }
      if (!jsonObj.get("zone_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DdiCloudDnsForwarderRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DdiCloudDnsForwarderRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DdiCloudDnsForwarderRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DdiCloudDnsForwarderRule.class));

       return (TypeAdapter<T>) new TypeAdapter<DdiCloudDnsForwarderRule>() {
           @Override
           public void write(JsonWriter out, DdiCloudDnsForwarderRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DdiCloudDnsForwarderRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DdiCloudDnsForwarderRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DdiCloudDnsForwarderRule
   * @throws IOException if the JSON string is invalid with respect to DdiCloudDnsForwarderRule
   */
  public static DdiCloudDnsForwarderRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DdiCloudDnsForwarderRule.class);
  }

  /**
   * Convert an instance of DdiCloudDnsForwarderRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

