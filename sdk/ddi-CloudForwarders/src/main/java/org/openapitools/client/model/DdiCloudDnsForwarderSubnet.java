/*
 * Cloud DNS Forwarder API
 * Allows configuring resources to forward DNS queries from Cloud Providers to B1DDI/NIOS
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DdiCloudDnsForwarderIpAddress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the private network subnet details from a cloud provider.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:24.948083+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class DdiCloudDnsForwarderSubnet {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DELETED_AT = "deleted_at";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime deletedAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_IDENTITY_ACCOUNT_ID = "identity_account_id";
  @SerializedName(SERIALIZED_NAME_IDENTITY_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String identityAccountId;

  public static final String SERIALIZED_NAME_IP_ADDRESSES = "ip_addresses";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESSES)
  @javax.annotation.Nullable
  private List<DdiCloudDnsForwarderIpAddress> ipAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_IP_ALLOCATION_MODE = "ip_allocation_mode";
  @SerializedName(SERIALIZED_NAME_IP_ALLOCATION_MODE)
  @javax.annotation.Nullable
  private String ipAllocationMode;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_PROVIDER_SUBNET_ID = "provider_subnet_id";
  @SerializedName(SERIALIZED_NAME_PROVIDER_SUBNET_ID)
  @javax.annotation.Nullable
  private String providerSubnetId;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Map<String, Object> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  public DdiCloudDnsForwarderSubnet() {
  }

  public DdiCloudDnsForwarderSubnet(
     String id
  ) {
    this();
    this.id = id;
  }

  public DdiCloudDnsForwarderSubnet createdAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The timestamp when the object was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public DdiCloudDnsForwarderSubnet deletedAt(@javax.annotation.Nullable OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
    return this;
  }

  /**
   * The timestamp when the object has been deleted. Nil until deletion.
   * @return deletedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }

  public void setDeletedAt(@javax.annotation.Nullable OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
  }


  /**
   * Primary key.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public DdiCloudDnsForwarderSubnet identityAccountId(@javax.annotation.Nullable String identityAccountId) {
    this.identityAccountId = identityAccountId;
    return this;
  }

  /**
   * Get identityAccountId
   * @return identityAccountId
   */
  @javax.annotation.Nullable
  public String getIdentityAccountId() {
    return identityAccountId;
  }

  public void setIdentityAccountId(@javax.annotation.Nullable String identityAccountId) {
    this.identityAccountId = identityAccountId;
  }


  public DdiCloudDnsForwarderSubnet ipAddresses(@javax.annotation.Nullable List<DdiCloudDnsForwarderIpAddress> ipAddresses) {
    this.ipAddresses = ipAddresses;
    return this;
  }

  public DdiCloudDnsForwarderSubnet addIpAddressesItem(DdiCloudDnsForwarderIpAddress ipAddressesItem) {
    if (this.ipAddresses == null) {
      this.ipAddresses = new ArrayList<>();
    }
    this.ipAddresses.add(ipAddressesItem);
    return this;
  }

  /**
   * Get ipAddresses
   * @return ipAddresses
   */
  @javax.annotation.Nullable
  public List<DdiCloudDnsForwarderIpAddress> getIpAddresses() {
    return ipAddresses;
  }

  public void setIpAddresses(@javax.annotation.Nullable List<DdiCloudDnsForwarderIpAddress> ipAddresses) {
    this.ipAddresses = ipAddresses;
  }


  public DdiCloudDnsForwarderSubnet ipAllocationMode(@javax.annotation.Nullable String ipAllocationMode) {
    this.ipAllocationMode = ipAllocationMode;
    return this;
  }

  /**
   * Ip allocation mode describes how the IP should be allocated, either \&quot;static\&quot;/\&quot;dynamic\&quot;.
   * @return ipAllocationMode
   */
  @javax.annotation.Nullable
  public String getIpAllocationMode() {
    return ipAllocationMode;
  }

  public void setIpAllocationMode(@javax.annotation.Nullable String ipAllocationMode) {
    this.ipAllocationMode = ipAllocationMode;
  }


  public DdiCloudDnsForwarderSubnet name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * User defined name given to Endpoint.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public DdiCloudDnsForwarderSubnet providerSubnetId(@javax.annotation.Nullable String providerSubnetId) {
    this.providerSubnetId = providerSubnetId;
    return this;
  }

  /**
   * The identifier for the subnet on the cloud provider (AWS and Azure).  For GCP, this value is the constant \&quot;gcpreserverdsubnetid\&quot;.
   * @return providerSubnetId
   */
  @javax.annotation.Nullable
  public String getProviderSubnetId() {
    return providerSubnetId;
  }

  public void setProviderSubnetId(@javax.annotation.Nullable String providerSubnetId) {
    this.providerSubnetId = providerSubnetId;
  }


  public DdiCloudDnsForwarderSubnet tags(@javax.annotation.Nullable Map<String, Object> tags) {
    this.tags = tags;
    return this;
  }

  public DdiCloudDnsForwarderSubnet putTagsItem(String key, Object tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, Object> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Map<String, Object> tags) {
    this.tags = tags;
  }


  public DdiCloudDnsForwarderSubnet updatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The timestamp when the object has been updated. Equals to _created_at_ if not updated after creation.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DdiCloudDnsForwarderSubnet ddiCloudDnsForwarderSubnet = (DdiCloudDnsForwarderSubnet) o;
    return Objects.equals(this.createdAt, ddiCloudDnsForwarderSubnet.createdAt) &&
        Objects.equals(this.deletedAt, ddiCloudDnsForwarderSubnet.deletedAt) &&
        Objects.equals(this.id, ddiCloudDnsForwarderSubnet.id) &&
        Objects.equals(this.identityAccountId, ddiCloudDnsForwarderSubnet.identityAccountId) &&
        Objects.equals(this.ipAddresses, ddiCloudDnsForwarderSubnet.ipAddresses) &&
        Objects.equals(this.ipAllocationMode, ddiCloudDnsForwarderSubnet.ipAllocationMode) &&
        Objects.equals(this.name, ddiCloudDnsForwarderSubnet.name) &&
        Objects.equals(this.providerSubnetId, ddiCloudDnsForwarderSubnet.providerSubnetId) &&
        Objects.equals(this.tags, ddiCloudDnsForwarderSubnet.tags) &&
        Objects.equals(this.updatedAt, ddiCloudDnsForwarderSubnet.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, deletedAt, id, identityAccountId, ipAddresses, ipAllocationMode, name, providerSubnetId, tags, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DdiCloudDnsForwarderSubnet {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identityAccountId: ").append(toIndentedString(identityAccountId)).append("\n");
    sb.append("    ipAddresses: ").append(toIndentedString(ipAddresses)).append("\n");
    sb.append("    ipAllocationMode: ").append(toIndentedString(ipAllocationMode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    providerSubnetId: ").append(toIndentedString(providerSubnetId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("deleted_at");
    openapiFields.add("id");
    openapiFields.add("identity_account_id");
    openapiFields.add("ip_addresses");
    openapiFields.add("ip_allocation_mode");
    openapiFields.add("name");
    openapiFields.add("provider_subnet_id");
    openapiFields.add("tags");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DdiCloudDnsForwarderSubnet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DdiCloudDnsForwarderSubnet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DdiCloudDnsForwarderSubnet is not found in the empty JSON string", DdiCloudDnsForwarderSubnet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DdiCloudDnsForwarderSubnet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DdiCloudDnsForwarderSubnet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("identity_account_id") != null && !jsonObj.get("identity_account_id").isJsonNull()) && !jsonObj.get("identity_account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identity_account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identity_account_id").toString()));
      }
      if (jsonObj.get("ip_addresses") != null && !jsonObj.get("ip_addresses").isJsonNull()) {
        JsonArray jsonArrayipAddresses = jsonObj.getAsJsonArray("ip_addresses");
        if (jsonArrayipAddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ip_addresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ip_addresses` to be an array in the JSON string but got `%s`", jsonObj.get("ip_addresses").toString()));
          }

          // validate the optional field `ip_addresses` (array)
          for (int i = 0; i < jsonArrayipAddresses.size(); i++) {
            DdiCloudDnsForwarderIpAddress.validateJsonElement(jsonArrayipAddresses.get(i));
          };
        }
      }
      if ((jsonObj.get("ip_allocation_mode") != null && !jsonObj.get("ip_allocation_mode").isJsonNull()) && !jsonObj.get("ip_allocation_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_allocation_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_allocation_mode").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("provider_subnet_id") != null && !jsonObj.get("provider_subnet_id").isJsonNull()) && !jsonObj.get("provider_subnet_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_subnet_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_subnet_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DdiCloudDnsForwarderSubnet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DdiCloudDnsForwarderSubnet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DdiCloudDnsForwarderSubnet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DdiCloudDnsForwarderSubnet.class));

       return (TypeAdapter<T>) new TypeAdapter<DdiCloudDnsForwarderSubnet>() {
           @Override
           public void write(JsonWriter out, DdiCloudDnsForwarderSubnet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DdiCloudDnsForwarderSubnet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DdiCloudDnsForwarderSubnet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DdiCloudDnsForwarderSubnet
   * @throws IOException if the JSON string is invalid with respect to DdiCloudDnsForwarderSubnet
   */
  public static DdiCloudDnsForwarderSubnet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DdiCloudDnsForwarderSubnet.class);
  }

  /**
   * Convert an instance of DdiCloudDnsForwarderSubnet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

