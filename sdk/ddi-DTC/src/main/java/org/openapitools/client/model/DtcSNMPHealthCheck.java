/*
 * DNS DTC API
 * The DNS DTC is a BloxOne DDI service providing load balanced DNS resolution.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DtcMetadata;
import org.openapitools.client.model.SNMPHealthCheckEntryCheck;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A __SNMPHealthCheck__ (_dtc/health_check_snmp_) represents a DTC __Server__ health check based on the Simple Network Management Protocol (SNMP).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:26.478324+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class DtcSNMPHealthCheck {
  public static final String SERIALIZED_NAME_CHECK_LIST = "check_list";
  @SerializedName(SERIALIZED_NAME_CHECK_LIST)
  @javax.annotation.Nullable
  private List<SNMPHealthCheckEntryCheck> checkList = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_COMMUNITY = "community";
  @SerializedName(SERIALIZED_NAME_COMMUNITY)
  @javax.annotation.Nullable
  private String community;

  public static final String SERIALIZED_NAME_CONTEXT_ENGINE_ID = "context_engine_id";
  @SerializedName(SERIALIZED_NAME_CONTEXT_ENGINE_ID)
  @javax.annotation.Nullable
  private String contextEngineId;

  public static final String SERIALIZED_NAME_CONTEXT_NAME = "context_name";
  @SerializedName(SERIALIZED_NAME_CONTEXT_NAME)
  @javax.annotation.Nullable
  private String contextName;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  @javax.annotation.Nullable
  private Boolean disabled;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  @javax.annotation.Nullable
  private Long interval;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  @javax.annotation.Nullable
  private DtcMetadata metadata;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  @javax.annotation.Nullable
  private Long port;

  public static final String SERIALIZED_NAME_RETRY_DOWN = "retry_down";
  @SerializedName(SERIALIZED_NAME_RETRY_DOWN)
  @javax.annotation.Nullable
  private Long retryDown;

  public static final String SERIALIZED_NAME_RETRY_UP = "retry_up";
  @SerializedName(SERIALIZED_NAME_RETRY_UP)
  @javax.annotation.Nullable
  private Long retryUp;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Object tags;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  @javax.annotation.Nullable
  private Long timeout;

  public static final String SERIALIZED_NAME_USER_SECURITY_MODEL = "user_security_model";
  @SerializedName(SERIALIZED_NAME_USER_SECURITY_MODEL)
  @javax.annotation.Nullable
  private String userSecurityModel;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nonnull
  private String version;

  public DtcSNMPHealthCheck() {
  }

  public DtcSNMPHealthCheck(
     String id
  ) {
    this();
    this.id = id;
  }

  public DtcSNMPHealthCheck checkList(@javax.annotation.Nullable List<SNMPHealthCheckEntryCheck> checkList) {
    this.checkList = checkList;
    return this;
  }

  public DtcSNMPHealthCheck addCheckListItem(SNMPHealthCheckEntryCheck checkListItem) {
    if (this.checkList == null) {
      this.checkList = new ArrayList<>();
    }
    this.checkList.add(checkListItem);
    return this;
  }

  /**
   * List of specific checks for SNMP entries and their values in MIB hierarchy. Supported up to 15 checks.
   * @return checkList
   */
  @javax.annotation.Nullable
  public List<SNMPHealthCheckEntryCheck> getCheckList() {
    return checkList;
  }

  public void setCheckList(@javax.annotation.Nullable List<SNMPHealthCheckEntryCheck> checkList) {
    this.checkList = checkList;
  }


  public DtcSNMPHealthCheck comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Optional. Comment for __SNMPHealthCheck__.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  public DtcSNMPHealthCheck community(@javax.annotation.Nullable String community) {
    this.community = community;
    return this;
  }

  /**
   * Optional. SNMP community string used for authentication. Mandatory for __v1__ and __v2c__ versions, ignored for __v3__.  Defaults to __public__.
   * @return community
   */
  @javax.annotation.Nullable
  public String getCommunity() {
    return community;
  }

  public void setCommunity(@javax.annotation.Nullable String community) {
    this.community = community;
  }


  public DtcSNMPHealthCheck contextEngineId(@javax.annotation.Nullable String contextEngineId) {
    this.contextEngineId = contextEngineId;
    return this;
  }

  /**
   * Optional. Uniquely identifies an SNMP entity that may realize an instance of a context with a particular context name.  Format is an arbitrary string that can contain from 10 to 64 hexadecimal digits (5 to 32 octet numbers).  Ignored for __v1__ and __v2c__ versions.
   * @return contextEngineId
   */
  @javax.annotation.Nullable
  public String getContextEngineId() {
    return contextEngineId;
  }

  public void setContextEngineId(@javax.annotation.Nullable String contextEngineId) {
    this.contextEngineId = contextEngineId;
  }


  public DtcSNMPHealthCheck contextName(@javax.annotation.Nullable String contextName) {
    this.contextName = contextName;
    return this;
  }

  /**
   * Optional. Name of administratively unique context for __v3__ version. Ignored for __v1__ and __v2c__ versions.
   * @return contextName
   */
  @javax.annotation.Nullable
  public String getContextName() {
    return contextName;
  }

  public void setContextName(@javax.annotation.Nullable String contextName) {
    this.contextName = contextName;
  }


  public DtcSNMPHealthCheck disabled(@javax.annotation.Nullable Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Optional. Flag which enables/disables __SNMPHealthCheck__. Defaults to _false_.
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(@javax.annotation.Nullable Boolean disabled) {
    this.disabled = disabled;
  }


  /**
   * The resource identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public DtcSNMPHealthCheck interval(@javax.annotation.Nullable Long interval) {
    this.interval = interval;
    return this;
  }

  /**
   * Optional. Interval value in seconds. The health check runs only for the specified interval and it is measured from the beginning of the previous check cycle. Defaults to _15_.
   * @return interval
   */
  @javax.annotation.Nullable
  public Long getInterval() {
    return interval;
  }

  public void setInterval(@javax.annotation.Nullable Long interval) {
    this.interval = interval;
  }


  public DtcSNMPHealthCheck metadata(@javax.annotation.Nullable DtcMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public DtcMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(@javax.annotation.Nullable DtcMetadata metadata) {
    this.metadata = metadata;
  }


  public DtcSNMPHealthCheck name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Display name of __SNMPHealthCheck__.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public DtcSNMPHealthCheck port(@javax.annotation.Nullable Long port) {
    this.port = port;
    return this;
  }

  /**
   * Optional. Destination UDP port of __SNMPHealthCheck__. Defaults to _161_.
   * @return port
   */
  @javax.annotation.Nullable
  public Long getPort() {
    return port;
  }

  public void setPort(@javax.annotation.Nullable Long port) {
    this.port = port;
  }


  public DtcSNMPHealthCheck retryDown(@javax.annotation.Nullable Long retryDown) {
    this.retryDown = retryDown;
    return this;
  }

  /**
   * Optional. Retry down count. The value determines how many bad health checks in a row must be received by the onprem host from the DTC Server for treating the health check as failed. Defaults to _1_.
   * @return retryDown
   */
  @javax.annotation.Nullable
  public Long getRetryDown() {
    return retryDown;
  }

  public void setRetryDown(@javax.annotation.Nullable Long retryDown) {
    this.retryDown = retryDown;
  }


  public DtcSNMPHealthCheck retryUp(@javax.annotation.Nullable Long retryUp) {
    this.retryUp = retryUp;
    return this;
  }

  /**
   * Optional. Retry up count. The value determines how many good health checks in a row must be received by the onprem host from the DTC Server for treating the health check as successful. Defaults to _1_.
   * @return retryUp
   */
  @javax.annotation.Nullable
  public Long getRetryUp() {
    return retryUp;
  }

  public void setRetryUp(@javax.annotation.Nullable Long retryUp) {
    this.retryUp = retryUp;
  }


  public DtcSNMPHealthCheck tags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Optional. The tags for __SNMPHealthCheck__ in JSON format.
   * @return tags
   */
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
  }


  public DtcSNMPHealthCheck timeout(@javax.annotation.Nullable Long timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Optional. Timeout value in seconds. The health check waits for the specified number of seconds after sending a request. If it does not receive a response within the number of seconds, then the health check is considered as failed. Defaults to _10_.
   * @return timeout
   */
  @javax.annotation.Nullable
  public Long getTimeout() {
    return timeout;
  }

  public void setTimeout(@javax.annotation.Nullable Long timeout) {
    this.timeout = timeout;
  }


  public DtcSNMPHealthCheck userSecurityModel(@javax.annotation.Nullable String userSecurityModel) {
    this.userSecurityModel = userSecurityModel;
    return this;
  }

  /**
   * The resource identifier.
   * @return userSecurityModel
   */
  @javax.annotation.Nullable
  public String getUserSecurityModel() {
    return userSecurityModel;
  }

  public void setUserSecurityModel(@javax.annotation.Nullable String userSecurityModel) {
    this.userSecurityModel = userSecurityModel;
  }


  public DtcSNMPHealthCheck version(@javax.annotation.Nonnull String version) {
    this.version = version;
    return this;
  }

  /**
   * SNMP version.  Allowed values: * v1  - version 1 * v2c - version 2 community * v3  - version 3
   * @return version
   */
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nonnull String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtcSNMPHealthCheck dtcSNMPHealthCheck = (DtcSNMPHealthCheck) o;
    return Objects.equals(this.checkList, dtcSNMPHealthCheck.checkList) &&
        Objects.equals(this.comment, dtcSNMPHealthCheck.comment) &&
        Objects.equals(this.community, dtcSNMPHealthCheck.community) &&
        Objects.equals(this.contextEngineId, dtcSNMPHealthCheck.contextEngineId) &&
        Objects.equals(this.contextName, dtcSNMPHealthCheck.contextName) &&
        Objects.equals(this.disabled, dtcSNMPHealthCheck.disabled) &&
        Objects.equals(this.id, dtcSNMPHealthCheck.id) &&
        Objects.equals(this.interval, dtcSNMPHealthCheck.interval) &&
        Objects.equals(this.metadata, dtcSNMPHealthCheck.metadata) &&
        Objects.equals(this.name, dtcSNMPHealthCheck.name) &&
        Objects.equals(this.port, dtcSNMPHealthCheck.port) &&
        Objects.equals(this.retryDown, dtcSNMPHealthCheck.retryDown) &&
        Objects.equals(this.retryUp, dtcSNMPHealthCheck.retryUp) &&
        Objects.equals(this.tags, dtcSNMPHealthCheck.tags) &&
        Objects.equals(this.timeout, dtcSNMPHealthCheck.timeout) &&
        Objects.equals(this.userSecurityModel, dtcSNMPHealthCheck.userSecurityModel) &&
        Objects.equals(this.version, dtcSNMPHealthCheck.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkList, comment, community, contextEngineId, contextName, disabled, id, interval, metadata, name, port, retryDown, retryUp, tags, timeout, userSecurityModel, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtcSNMPHealthCheck {\n");
    sb.append("    checkList: ").append(toIndentedString(checkList)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    community: ").append(toIndentedString(community)).append("\n");
    sb.append("    contextEngineId: ").append(toIndentedString(contextEngineId)).append("\n");
    sb.append("    contextName: ").append(toIndentedString(contextName)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    retryDown: ").append(toIndentedString(retryDown)).append("\n");
    sb.append("    retryUp: ").append(toIndentedString(retryUp)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    userSecurityModel: ").append(toIndentedString(userSecurityModel)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("check_list");
    openapiFields.add("comment");
    openapiFields.add("community");
    openapiFields.add("context_engine_id");
    openapiFields.add("context_name");
    openapiFields.add("disabled");
    openapiFields.add("id");
    openapiFields.add("interval");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("port");
    openapiFields.add("retry_down");
    openapiFields.add("retry_up");
    openapiFields.add("tags");
    openapiFields.add("timeout");
    openapiFields.add("user_security_model");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DtcSNMPHealthCheck
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DtcSNMPHealthCheck.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtcSNMPHealthCheck is not found in the empty JSON string", DtcSNMPHealthCheck.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DtcSNMPHealthCheck.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DtcSNMPHealthCheck` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DtcSNMPHealthCheck.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("check_list") != null && !jsonObj.get("check_list").isJsonNull()) {
        JsonArray jsonArraycheckList = jsonObj.getAsJsonArray("check_list");
        if (jsonArraycheckList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("check_list").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `check_list` to be an array in the JSON string but got `%s`", jsonObj.get("check_list").toString()));
          }

          // validate the optional field `check_list` (array)
          for (int i = 0; i < jsonArraycheckList.size(); i++) {
            SNMPHealthCheckEntryCheck.validateJsonElement(jsonArraycheckList.get(i));
          };
        }
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("community") != null && !jsonObj.get("community").isJsonNull()) && !jsonObj.get("community").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `community` to be a primitive type in the JSON string but got `%s`", jsonObj.get("community").toString()));
      }
      if ((jsonObj.get("context_engine_id") != null && !jsonObj.get("context_engine_id").isJsonNull()) && !jsonObj.get("context_engine_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `context_engine_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("context_engine_id").toString()));
      }
      if ((jsonObj.get("context_name") != null && !jsonObj.get("context_name").isJsonNull()) && !jsonObj.get("context_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `context_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("context_name").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        DtcMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("user_security_model") != null && !jsonObj.get("user_security_model").isJsonNull()) && !jsonObj.get("user_security_model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_security_model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_security_model").toString()));
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtcSNMPHealthCheck.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtcSNMPHealthCheck' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtcSNMPHealthCheck> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtcSNMPHealthCheck.class));

       return (TypeAdapter<T>) new TypeAdapter<DtcSNMPHealthCheck>() {
           @Override
           public void write(JsonWriter out, DtcSNMPHealthCheck value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DtcSNMPHealthCheck read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DtcSNMPHealthCheck given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DtcSNMPHealthCheck
   * @throws IOException if the JSON string is invalid with respect to DtcSNMPHealthCheck
   */
  public static DtcSNMPHealthCheck fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtcSNMPHealthCheck.class);
  }

  /**
   * Convert an instance of DtcSNMPHealthCheck to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

