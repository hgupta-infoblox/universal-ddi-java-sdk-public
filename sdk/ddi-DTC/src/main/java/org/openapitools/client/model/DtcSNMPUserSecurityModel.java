/*
 * DNS DTC API
 * The DNS DTC is a BloxOne DDI service providing load balanced DNS resolution.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters for user-based security model of SNMPv3.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:26.478324+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class DtcSNMPUserSecurityModel {
  public static final String SERIALIZED_NAME_AUTH_PASSPHRASE = "auth_passphrase";
  @SerializedName(SERIALIZED_NAME_AUTH_PASSPHRASE)
  @javax.annotation.Nullable
  private String authPassphrase;

  public static final String SERIALIZED_NAME_AUTH_PROTOCOL = "auth_protocol";
  @SerializedName(SERIALIZED_NAME_AUTH_PROTOCOL)
  @javax.annotation.Nullable
  private String authProtocol;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_PRIVACY_PASSPHRASE = "privacy_passphrase";
  @SerializedName(SERIALIZED_NAME_PRIVACY_PASSPHRASE)
  @javax.annotation.Nullable
  private String privacyPassphrase;

  public static final String SERIALIZED_NAME_PRIVACY_PROTOCOL = "privacy_protocol";
  @SerializedName(SERIALIZED_NAME_PRIVACY_PROTOCOL)
  @javax.annotation.Nullable
  private String privacyProtocol;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  @javax.annotation.Nullable
  private String username;

  public DtcSNMPUserSecurityModel() {
  }

  public DtcSNMPUserSecurityModel(
     String id
  ) {
    this();
    this.id = id;
  }

  public DtcSNMPUserSecurityModel authPassphrase(@javax.annotation.Nullable String authPassphrase) {
    this.authPassphrase = authPassphrase;
    return this;
  }

  /**
   * User passphrase for authentication. Ignored for __NoAuth__, otherwise mandatory.
   * @return authPassphrase
   */
  @javax.annotation.Nullable
  public String getAuthPassphrase() {
    return authPassphrase;
  }

  public void setAuthPassphrase(@javax.annotation.Nullable String authPassphrase) {
    this.authPassphrase = authPassphrase;
  }


  public DtcSNMPUserSecurityModel authProtocol(@javax.annotation.Nullable String authProtocol) {
    this.authProtocol = authProtocol;
    return this;
  }

  /**
   * Authentication protocol.  Allowed values: * NoAuth * MD5 * SHA  Defaults to __NoAuth__.
   * @return authProtocol
   */
  @javax.annotation.Nullable
  public String getAuthProtocol() {
    return authProtocol;
  }

  public void setAuthProtocol(@javax.annotation.Nullable String authProtocol) {
    this.authProtocol = authProtocol;
  }


  /**
   * The resource identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public DtcSNMPUserSecurityModel privacyPassphrase(@javax.annotation.Nullable String privacyPassphrase) {
    this.privacyPassphrase = privacyPassphrase;
    return this;
  }

  /**
   * User passphrase for privacy. Ignored for __NoPrivacy__, otherwise mandatory.
   * @return privacyPassphrase
   */
  @javax.annotation.Nullable
  public String getPrivacyPassphrase() {
    return privacyPassphrase;
  }

  public void setPrivacyPassphrase(@javax.annotation.Nullable String privacyPassphrase) {
    this.privacyPassphrase = privacyPassphrase;
  }


  public DtcSNMPUserSecurityModel privacyProtocol(@javax.annotation.Nullable String privacyProtocol) {
    this.privacyProtocol = privacyProtocol;
    return this;
  }

  /**
   * Privacy protocol. Must be __NoPrivacy__ if auth_protocol set to __NoAuth__.  Allowed values: * NoPrivacy * DES * AES  Defaults to __NoPrivacy__.
   * @return privacyProtocol
   */
  @javax.annotation.Nullable
  public String getPrivacyProtocol() {
    return privacyProtocol;
  }

  public void setPrivacyProtocol(@javax.annotation.Nullable String privacyProtocol) {
    this.privacyProtocol = privacyProtocol;
  }


  public DtcSNMPUserSecurityModel username(@javax.annotation.Nullable String username) {
    this.username = username;
    return this;
  }

  /**
   * User name with which to associate security information.
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(@javax.annotation.Nullable String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtcSNMPUserSecurityModel dtcSNMPUserSecurityModel = (DtcSNMPUserSecurityModel) o;
    return Objects.equals(this.authPassphrase, dtcSNMPUserSecurityModel.authPassphrase) &&
        Objects.equals(this.authProtocol, dtcSNMPUserSecurityModel.authProtocol) &&
        Objects.equals(this.id, dtcSNMPUserSecurityModel.id) &&
        Objects.equals(this.privacyPassphrase, dtcSNMPUserSecurityModel.privacyPassphrase) &&
        Objects.equals(this.privacyProtocol, dtcSNMPUserSecurityModel.privacyProtocol) &&
        Objects.equals(this.username, dtcSNMPUserSecurityModel.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authPassphrase, authProtocol, id, privacyPassphrase, privacyProtocol, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtcSNMPUserSecurityModel {\n");
    sb.append("    authPassphrase: ").append(toIndentedString(authPassphrase)).append("\n");
    sb.append("    authProtocol: ").append(toIndentedString(authProtocol)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    privacyPassphrase: ").append(toIndentedString(privacyPassphrase)).append("\n");
    sb.append("    privacyProtocol: ").append(toIndentedString(privacyProtocol)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auth_passphrase");
    openapiFields.add("auth_protocol");
    openapiFields.add("id");
    openapiFields.add("privacy_passphrase");
    openapiFields.add("privacy_protocol");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DtcSNMPUserSecurityModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DtcSNMPUserSecurityModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtcSNMPUserSecurityModel is not found in the empty JSON string", DtcSNMPUserSecurityModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DtcSNMPUserSecurityModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DtcSNMPUserSecurityModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("auth_passphrase") != null && !jsonObj.get("auth_passphrase").isJsonNull()) && !jsonObj.get("auth_passphrase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_passphrase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_passphrase").toString()));
      }
      if ((jsonObj.get("auth_protocol") != null && !jsonObj.get("auth_protocol").isJsonNull()) && !jsonObj.get("auth_protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_protocol").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("privacy_passphrase") != null && !jsonObj.get("privacy_passphrase").isJsonNull()) && !jsonObj.get("privacy_passphrase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privacy_passphrase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privacy_passphrase").toString()));
      }
      if ((jsonObj.get("privacy_protocol") != null && !jsonObj.get("privacy_protocol").isJsonNull()) && !jsonObj.get("privacy_protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privacy_protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privacy_protocol").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtcSNMPUserSecurityModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtcSNMPUserSecurityModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtcSNMPUserSecurityModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtcSNMPUserSecurityModel.class));

       return (TypeAdapter<T>) new TypeAdapter<DtcSNMPUserSecurityModel>() {
           @Override
           public void write(JsonWriter out, DtcSNMPUserSecurityModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DtcSNMPUserSecurityModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DtcSNMPUserSecurityModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DtcSNMPUserSecurityModel
   * @throws IOException if the JSON string is invalid with respect to DtcSNMPUserSecurityModel
   */
  public static DtcSNMPUserSecurityModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtcSNMPUserSecurityModel.class);
  }

  /**
   * Convert an instance of DtcSNMPUserSecurityModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

