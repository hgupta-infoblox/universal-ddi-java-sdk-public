/*
 * DNS DTC API
 * The DNS DTC is a BloxOne DDI service providing load balanced DNS resolution.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DtcHeaderRegex;
import org.openapitools.client.model.DtcMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A __HTTPHealthCheck__ (_dtc/health_check_http_) represents a DTC __Server__ health check based on the Hypertext Transfer Protocol (HTTP).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:26.478324+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class DtcHTTPHealthCheck {
  public static final String SERIALIZED_NAME_CHECK_RESPONSE_BODY = "check_response_body";
  @SerializedName(SERIALIZED_NAME_CHECK_RESPONSE_BODY)
  @javax.annotation.Nullable
  private Boolean checkResponseBody;

  public static final String SERIALIZED_NAME_CHECK_RESPONSE_BODY_NEGATIVE = "check_response_body_negative";
  @SerializedName(SERIALIZED_NAME_CHECK_RESPONSE_BODY_NEGATIVE)
  @javax.annotation.Nullable
  private Boolean checkResponseBodyNegative;

  public static final String SERIALIZED_NAME_CHECK_RESPONSE_BODY_REGEX = "check_response_body_regex";
  @SerializedName(SERIALIZED_NAME_CHECK_RESPONSE_BODY_REGEX)
  @javax.annotation.Nullable
  private String checkResponseBodyRegex;

  public static final String SERIALIZED_NAME_CHECK_RESPONSE_HEADER = "check_response_header";
  @SerializedName(SERIALIZED_NAME_CHECK_RESPONSE_HEADER)
  @javax.annotation.Nullable
  private Boolean checkResponseHeader;

  public static final String SERIALIZED_NAME_CHECK_RESPONSE_HEADER_NEGATIVE = "check_response_header_negative";
  @SerializedName(SERIALIZED_NAME_CHECK_RESPONSE_HEADER_NEGATIVE)
  @javax.annotation.Nullable
  private Boolean checkResponseHeaderNegative;

  public static final String SERIALIZED_NAME_CHECK_RESPONSE_HEADER_REGEXES = "check_response_header_regexes";
  @SerializedName(SERIALIZED_NAME_CHECK_RESPONSE_HEADER_REGEXES)
  @javax.annotation.Nullable
  private List<DtcHeaderRegex> checkResponseHeaderRegexes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CODES = "codes";
  @SerializedName(SERIALIZED_NAME_CODES)
  @javax.annotation.Nullable
  private String codes;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  @javax.annotation.Nullable
  private Boolean disabled;

  public static final String SERIALIZED_NAME_HTTPS = "https";
  @SerializedName(SERIALIZED_NAME_HTTPS)
  @javax.annotation.Nullable
  private Boolean https;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  @javax.annotation.Nullable
  private Long interval;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  @javax.annotation.Nullable
  private DtcMetadata metadata;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  @javax.annotation.Nonnull
  private Long port;

  public static final String SERIALIZED_NAME_REQUEST = "request";
  @SerializedName(SERIALIZED_NAME_REQUEST)
  @javax.annotation.Nullable
  private String request;

  public static final String SERIALIZED_NAME_RETRY_DOWN = "retry_down";
  @SerializedName(SERIALIZED_NAME_RETRY_DOWN)
  @javax.annotation.Nullable
  private Long retryDown;

  public static final String SERIALIZED_NAME_RETRY_UP = "retry_up";
  @SerializedName(SERIALIZED_NAME_RETRY_UP)
  @javax.annotation.Nullable
  private Long retryUp;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Object tags;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  @javax.annotation.Nullable
  private Long timeout;

  public DtcHTTPHealthCheck() {
  }

  public DtcHTTPHealthCheck(
     String id
  ) {
    this();
    this.id = id;
  }

  public DtcHTTPHealthCheck checkResponseBody(@javax.annotation.Nullable Boolean checkResponseBody) {
    this.checkResponseBody = checkResponseBody;
    return this;
  }

  /**
   * Optional. Flag which enables checking of the HTTP response body content. Defaults to _false_.
   * @return checkResponseBody
   */
  @javax.annotation.Nullable
  public Boolean getCheckResponseBody() {
    return checkResponseBody;
  }

  public void setCheckResponseBody(@javax.annotation.Nullable Boolean checkResponseBody) {
    this.checkResponseBody = checkResponseBody;
  }


  public DtcHTTPHealthCheck checkResponseBodyNegative(@javax.annotation.Nullable Boolean checkResponseBodyNegative) {
    this.checkResponseBodyNegative = checkResponseBodyNegative;
    return this;
  }

  /**
   * Optional. Flag which changes the meaning of the regex match result. If set to _true_, the response is valid if regular expression matches not found. Defaults to _false_.  The flag is currently not supported.
   * @return checkResponseBodyNegative
   */
  @javax.annotation.Nullable
  public Boolean getCheckResponseBodyNegative() {
    return checkResponseBodyNegative;
  }

  public void setCheckResponseBodyNegative(@javax.annotation.Nullable Boolean checkResponseBodyNegative) {
    this.checkResponseBodyNegative = checkResponseBodyNegative;
  }


  public DtcHTTPHealthCheck checkResponseBodyRegex(@javax.annotation.Nullable String checkResponseBodyRegex) {
    this.checkResponseBodyRegex = checkResponseBodyRegex;
    return this;
  }

  /**
   * Optional. Regular expression to search for a string in the HTTP response body. Error if empty while _check_response_body_ is _true_. Defaults to empty.
   * @return checkResponseBodyRegex
   */
  @javax.annotation.Nullable
  public String getCheckResponseBodyRegex() {
    return checkResponseBodyRegex;
  }

  public void setCheckResponseBodyRegex(@javax.annotation.Nullable String checkResponseBodyRegex) {
    this.checkResponseBodyRegex = checkResponseBodyRegex;
  }


  public DtcHTTPHealthCheck checkResponseHeader(@javax.annotation.Nullable Boolean checkResponseHeader) {
    this.checkResponseHeader = checkResponseHeader;
    return this;
  }

  /**
   * Optional. Flag which enables checking of the HTTP response header(s) content. Defaults to _false_.
   * @return checkResponseHeader
   */
  @javax.annotation.Nullable
  public Boolean getCheckResponseHeader() {
    return checkResponseHeader;
  }

  public void setCheckResponseHeader(@javax.annotation.Nullable Boolean checkResponseHeader) {
    this.checkResponseHeader = checkResponseHeader;
  }


  public DtcHTTPHealthCheck checkResponseHeaderNegative(@javax.annotation.Nullable Boolean checkResponseHeaderNegative) {
    this.checkResponseHeaderNegative = checkResponseHeaderNegative;
    return this;
  }

  /**
   * Optional. Flag which changes the meaning of the header regexes match result. If set to _true_, neither expression matches must be found in their respective headers for the headers to be considered valid. Defaults to _false_.
   * @return checkResponseHeaderNegative
   */
  @javax.annotation.Nullable
  public Boolean getCheckResponseHeaderNegative() {
    return checkResponseHeaderNegative;
  }

  public void setCheckResponseHeaderNegative(@javax.annotation.Nullable Boolean checkResponseHeaderNegative) {
    this.checkResponseHeaderNegative = checkResponseHeaderNegative;
  }


  public DtcHTTPHealthCheck checkResponseHeaderRegexes(@javax.annotation.Nullable List<DtcHeaderRegex> checkResponseHeaderRegexes) {
    this.checkResponseHeaderRegexes = checkResponseHeaderRegexes;
    return this;
  }

  public DtcHTTPHealthCheck addCheckResponseHeaderRegexesItem(DtcHeaderRegex checkResponseHeaderRegexesItem) {
    if (this.checkResponseHeaderRegexes == null) {
      this.checkResponseHeaderRegexes = new ArrayList<>();
    }
    this.checkResponseHeaderRegexes.add(checkResponseHeaderRegexesItem);
    return this;
  }

  /**
   * Optional. List of (header, regular expression) pairs. All expression matches must be found in their respective headers for the headers to be considered valid. Error if empty while _check_response_header_ is _true_. Defaults to empty.
   * @return checkResponseHeaderRegexes
   */
  @javax.annotation.Nullable
  public List<DtcHeaderRegex> getCheckResponseHeaderRegexes() {
    return checkResponseHeaderRegexes;
  }

  public void setCheckResponseHeaderRegexes(@javax.annotation.Nullable List<DtcHeaderRegex> checkResponseHeaderRegexes) {
    this.checkResponseHeaderRegexes = checkResponseHeaderRegexes;
  }


  public DtcHTTPHealthCheck codes(@javax.annotation.Nullable String codes) {
    this.codes = codes;
    return this;
  }

  /**
   * Optional. Response Status Codes meaning the health check is successful. If empty, any code means success. Individual codes and code ranges are supported, ex. \&quot;102,105-107,109-110,120\&quot;.
   * @return codes
   */
  @javax.annotation.Nullable
  public String getCodes() {
    return codes;
  }

  public void setCodes(@javax.annotation.Nullable String codes) {
    this.codes = codes;
  }


  public DtcHTTPHealthCheck comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Optional. Comment for __HTTPHealthCheck__.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  public DtcHTTPHealthCheck disabled(@javax.annotation.Nullable Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Optional. Flag which enables/disables __HTTPHealthCheck__. Defaults to _false_.
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(@javax.annotation.Nullable Boolean disabled) {
    this.disabled = disabled;
  }


  public DtcHTTPHealthCheck https(@javax.annotation.Nullable Boolean https) {
    this.https = https;
    return this;
  }

  /**
   * Optional. Flag which enables Hypertext Transfer Protocol Secure (HTTPS) in a health check. Defaults to _false_.
   * @return https
   */
  @javax.annotation.Nullable
  public Boolean getHttps() {
    return https;
  }

  public void setHttps(@javax.annotation.Nullable Boolean https) {
    this.https = https;
  }


  /**
   * The resource identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public DtcHTTPHealthCheck interval(@javax.annotation.Nullable Long interval) {
    this.interval = interval;
    return this;
  }

  /**
   * Optional. Interval value in seconds. The health check runs only for the specified interval and it is measured from the beginning of the previous check cycle. Defaults to _15_.
   * @return interval
   */
  @javax.annotation.Nullable
  public Long getInterval() {
    return interval;
  }

  public void setInterval(@javax.annotation.Nullable Long interval) {
    this.interval = interval;
  }


  public DtcHTTPHealthCheck metadata(@javax.annotation.Nullable DtcMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public DtcMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(@javax.annotation.Nullable DtcMetadata metadata) {
    this.metadata = metadata;
  }


  public DtcHTTPHealthCheck name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Display name of __HTTPHealthCheck__.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public DtcHTTPHealthCheck port(@javax.annotation.Nonnull Long port) {
    this.port = port;
    return this;
  }

  /**
   * Destination TCP port of __HTTPHealthCheck__.
   * @return port
   */
  @javax.annotation.Nonnull
  public Long getPort() {
    return port;
  }

  public void setPort(@javax.annotation.Nonnull Long port) {
    this.port = port;
  }


  public DtcHTTPHealthCheck request(@javax.annotation.Nullable String request) {
    this.request = request;
    return this;
  }

  /**
   * HTTP request in a text format, it consists of HTTP method, request target, HTTP headers, request body.
   * @return request
   */
  @javax.annotation.Nullable
  public String getRequest() {
    return request;
  }

  public void setRequest(@javax.annotation.Nullable String request) {
    this.request = request;
  }


  public DtcHTTPHealthCheck retryDown(@javax.annotation.Nullable Long retryDown) {
    this.retryDown = retryDown;
    return this;
  }

  /**
   * Optional. Retry down count. The value determines how many bad health checks in a row must be received by the onprem host from the DTC Server for treating the health check as failed. Defaults to _1_.
   * @return retryDown
   */
  @javax.annotation.Nullable
  public Long getRetryDown() {
    return retryDown;
  }

  public void setRetryDown(@javax.annotation.Nullable Long retryDown) {
    this.retryDown = retryDown;
  }


  public DtcHTTPHealthCheck retryUp(@javax.annotation.Nullable Long retryUp) {
    this.retryUp = retryUp;
    return this;
  }

  /**
   * Optional. Retry up count. The value determines how many good health checks in a row must be received by the onprem host from the DTC Server for treating the health check as successful. Defaults to _1_.
   * @return retryUp
   */
  @javax.annotation.Nullable
  public Long getRetryUp() {
    return retryUp;
  }

  public void setRetryUp(@javax.annotation.Nullable Long retryUp) {
    this.retryUp = retryUp;
  }


  public DtcHTTPHealthCheck tags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Optional. The tags for __HTTPHealthCheck__ in JSON format.
   * @return tags
   */
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
  }


  public DtcHTTPHealthCheck timeout(@javax.annotation.Nullable Long timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Optional. Timeout value in seconds. The health check waits for the specified number of seconds after sending a request. If it does not receive a response within the number of seconds, then the health check is considered as failed. Defaults to _10_.
   * @return timeout
   */
  @javax.annotation.Nullable
  public Long getTimeout() {
    return timeout;
  }

  public void setTimeout(@javax.annotation.Nullable Long timeout) {
    this.timeout = timeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtcHTTPHealthCheck dtcHTTPHealthCheck = (DtcHTTPHealthCheck) o;
    return Objects.equals(this.checkResponseBody, dtcHTTPHealthCheck.checkResponseBody) &&
        Objects.equals(this.checkResponseBodyNegative, dtcHTTPHealthCheck.checkResponseBodyNegative) &&
        Objects.equals(this.checkResponseBodyRegex, dtcHTTPHealthCheck.checkResponseBodyRegex) &&
        Objects.equals(this.checkResponseHeader, dtcHTTPHealthCheck.checkResponseHeader) &&
        Objects.equals(this.checkResponseHeaderNegative, dtcHTTPHealthCheck.checkResponseHeaderNegative) &&
        Objects.equals(this.checkResponseHeaderRegexes, dtcHTTPHealthCheck.checkResponseHeaderRegexes) &&
        Objects.equals(this.codes, dtcHTTPHealthCheck.codes) &&
        Objects.equals(this.comment, dtcHTTPHealthCheck.comment) &&
        Objects.equals(this.disabled, dtcHTTPHealthCheck.disabled) &&
        Objects.equals(this.https, dtcHTTPHealthCheck.https) &&
        Objects.equals(this.id, dtcHTTPHealthCheck.id) &&
        Objects.equals(this.interval, dtcHTTPHealthCheck.interval) &&
        Objects.equals(this.metadata, dtcHTTPHealthCheck.metadata) &&
        Objects.equals(this.name, dtcHTTPHealthCheck.name) &&
        Objects.equals(this.port, dtcHTTPHealthCheck.port) &&
        Objects.equals(this.request, dtcHTTPHealthCheck.request) &&
        Objects.equals(this.retryDown, dtcHTTPHealthCheck.retryDown) &&
        Objects.equals(this.retryUp, dtcHTTPHealthCheck.retryUp) &&
        Objects.equals(this.tags, dtcHTTPHealthCheck.tags) &&
        Objects.equals(this.timeout, dtcHTTPHealthCheck.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkResponseBody, checkResponseBodyNegative, checkResponseBodyRegex, checkResponseHeader, checkResponseHeaderNegative, checkResponseHeaderRegexes, codes, comment, disabled, https, id, interval, metadata, name, port, request, retryDown, retryUp, tags, timeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtcHTTPHealthCheck {\n");
    sb.append("    checkResponseBody: ").append(toIndentedString(checkResponseBody)).append("\n");
    sb.append("    checkResponseBodyNegative: ").append(toIndentedString(checkResponseBodyNegative)).append("\n");
    sb.append("    checkResponseBodyRegex: ").append(toIndentedString(checkResponseBodyRegex)).append("\n");
    sb.append("    checkResponseHeader: ").append(toIndentedString(checkResponseHeader)).append("\n");
    sb.append("    checkResponseHeaderNegative: ").append(toIndentedString(checkResponseHeaderNegative)).append("\n");
    sb.append("    checkResponseHeaderRegexes: ").append(toIndentedString(checkResponseHeaderRegexes)).append("\n");
    sb.append("    codes: ").append(toIndentedString(codes)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    https: ").append(toIndentedString(https)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    retryDown: ").append(toIndentedString(retryDown)).append("\n");
    sb.append("    retryUp: ").append(toIndentedString(retryUp)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("check_response_body");
    openapiFields.add("check_response_body_negative");
    openapiFields.add("check_response_body_regex");
    openapiFields.add("check_response_header");
    openapiFields.add("check_response_header_negative");
    openapiFields.add("check_response_header_regexes");
    openapiFields.add("codes");
    openapiFields.add("comment");
    openapiFields.add("disabled");
    openapiFields.add("https");
    openapiFields.add("id");
    openapiFields.add("interval");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("port");
    openapiFields.add("request");
    openapiFields.add("retry_down");
    openapiFields.add("retry_up");
    openapiFields.add("tags");
    openapiFields.add("timeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("port");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DtcHTTPHealthCheck
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DtcHTTPHealthCheck.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtcHTTPHealthCheck is not found in the empty JSON string", DtcHTTPHealthCheck.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DtcHTTPHealthCheck.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DtcHTTPHealthCheck` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DtcHTTPHealthCheck.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("check_response_body_regex") != null && !jsonObj.get("check_response_body_regex").isJsonNull()) && !jsonObj.get("check_response_body_regex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `check_response_body_regex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("check_response_body_regex").toString()));
      }
      if (jsonObj.get("check_response_header_regexes") != null && !jsonObj.get("check_response_header_regexes").isJsonNull()) {
        JsonArray jsonArraycheckResponseHeaderRegexes = jsonObj.getAsJsonArray("check_response_header_regexes");
        if (jsonArraycheckResponseHeaderRegexes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("check_response_header_regexes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `check_response_header_regexes` to be an array in the JSON string but got `%s`", jsonObj.get("check_response_header_regexes").toString()));
          }

          // validate the optional field `check_response_header_regexes` (array)
          for (int i = 0; i < jsonArraycheckResponseHeaderRegexes.size(); i++) {
            DtcHeaderRegex.validateJsonElement(jsonArraycheckResponseHeaderRegexes.get(i));
          };
        }
      }
      if ((jsonObj.get("codes") != null && !jsonObj.get("codes").isJsonNull()) && !jsonObj.get("codes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codes").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        DtcMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("request") != null && !jsonObj.get("request").isJsonNull()) && !jsonObj.get("request").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtcHTTPHealthCheck.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtcHTTPHealthCheck' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtcHTTPHealthCheck> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtcHTTPHealthCheck.class));

       return (TypeAdapter<T>) new TypeAdapter<DtcHTTPHealthCheck>() {
           @Override
           public void write(JsonWriter out, DtcHTTPHealthCheck value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DtcHTTPHealthCheck read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DtcHTTPHealthCheck given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DtcHTTPHealthCheck
   * @throws IOException if the JSON string is invalid with respect to DtcHTTPHealthCheck
   */
  public static DtcHTTPHealthCheck fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtcHTTPHealthCheck.class);
  }

  /**
   * Convert an instance of DtcHTTPHealthCheck to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

