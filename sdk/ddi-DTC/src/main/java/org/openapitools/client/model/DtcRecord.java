/*
 * DNS DTC API
 * The DNS DTC is a BloxOne DDI service providing load balanced DNS resolution.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * __Record__ represents a resource record which is returned in response to load balanced DNS queries.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:26.478324+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class DtcRecord {
  public static final String SERIALIZED_NAME_DNS_RDATA = "dns_rdata";
  @SerializedName(SERIALIZED_NAME_DNS_RDATA)
  @javax.annotation.Nullable
  private String dnsRdata;

  public static final String SERIALIZED_NAME_RDATA = "rdata";
  @SerializedName(SERIALIZED_NAME_RDATA)
  @javax.annotation.Nonnull
  private Object rdata;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private String type;

  public DtcRecord() {
  }

  public DtcRecord(
     String dnsRdata
  ) {
    this();
    this.dnsRdata = dnsRdata;
  }

  /**
   * The DNS protocol textual representation of the record data.
   * @return dnsRdata
   */
  @javax.annotation.Nullable
  public String getDnsRdata() {
    return dnsRdata;
  }



  public DtcRecord rdata(@javax.annotation.Nonnull Object rdata) {
    this.rdata = rdata;
    return this;
  }

  /**
   * JSON representation of resource record data.
   * @return rdata
   */
  @javax.annotation.Nonnull
  public Object getRdata() {
    return rdata;
  }

  public void setRdata(@javax.annotation.Nonnull Object rdata) {
    this.rdata = rdata;
  }


  public DtcRecord type(@javax.annotation.Nonnull String type) {
    this.type = type;
    return this;
  }

  /**
   * Resource record type.  List of supported types: * _A_ (_TYPE1_) * _AAAA_ (_TYPE28_) * _CNAME_ (_TYPE5_) * _HTTPS_ (_TYPE65_) * _SRV_ (_TYPE33_) * _SVCB_ (_TYPE64_)
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtcRecord dtcRecord = (DtcRecord) o;
    return Objects.equals(this.dnsRdata, dtcRecord.dnsRdata) &&
        Objects.equals(this.rdata, dtcRecord.rdata) &&
        Objects.equals(this.type, dtcRecord.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dnsRdata, rdata, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtcRecord {\n");
    sb.append("    dnsRdata: ").append(toIndentedString(dnsRdata)).append("\n");
    sb.append("    rdata: ").append(toIndentedString(rdata)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dns_rdata");
    openapiFields.add("rdata");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("rdata");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DtcRecord
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DtcRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtcRecord is not found in the empty JSON string", DtcRecord.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DtcRecord.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DtcRecord` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DtcRecord.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dns_rdata") != null && !jsonObj.get("dns_rdata").isJsonNull()) && !jsonObj.get("dns_rdata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dns_rdata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dns_rdata").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtcRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtcRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtcRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtcRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<DtcRecord>() {
           @Override
           public void write(JsonWriter out, DtcRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DtcRecord read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DtcRecord given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DtcRecord
   * @throws IOException if the JSON string is invalid with respect to DtcRecord
   */
  public static DtcRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtcRecord.class);
  }

  /**
   * Convert an instance of DtcRecord to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

