/*
 * DNS DTC API
 * The DNS DTC is a BloxOne DDI service providing load balanced DNS resolution.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DtcMetadata;
import org.openapitools.client.model.DtcPoolHealthCheck;
import org.openapitools.client.model.DtcPoolServer;
import org.openapitools.client.model.DtcTTLInheritance;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A __Pool__ (_dtc/pool_) represents a collection of servers, it is associated with a __Policy__ (_dtc/policy_).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:26.478324+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class DtcPool {
  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  @javax.annotation.Nullable
  private Boolean disabled;

  public static final String SERIALIZED_NAME_HEALTH_CHECKS = "health_checks";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECKS)
  @javax.annotation.Nullable
  private List<DtcPoolHealthCheck> healthChecks = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_INHERITANCE_SOURCES = "inheritance_sources";
  @SerializedName(SERIALIZED_NAME_INHERITANCE_SOURCES)
  @javax.annotation.Nullable
  private DtcTTLInheritance inheritanceSources;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  @javax.annotation.Nullable
  private DtcMetadata metadata;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  @javax.annotation.Nonnull
  private String method;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_POOL_AVAILABILITY = "pool_availability";
  @SerializedName(SERIALIZED_NAME_POOL_AVAILABILITY)
  @javax.annotation.Nullable
  private String poolAvailability;

  public static final String SERIALIZED_NAME_POOL_SERVERS_QUORUM = "pool_servers_quorum";
  @SerializedName(SERIALIZED_NAME_POOL_SERVERS_QUORUM)
  @javax.annotation.Nullable
  private Long poolServersQuorum;

  public static final String SERIALIZED_NAME_SERVER_AVAILABILITY = "server_availability";
  @SerializedName(SERIALIZED_NAME_SERVER_AVAILABILITY)
  @javax.annotation.Nullable
  private String serverAvailability;

  public static final String SERIALIZED_NAME_SERVER_HEALTH_CHECKS_QUORUM = "server_health_checks_quorum";
  @SerializedName(SERIALIZED_NAME_SERVER_HEALTH_CHECKS_QUORUM)
  @javax.annotation.Nullable
  private Long serverHealthChecksQuorum;

  public static final String SERIALIZED_NAME_SERVERS = "servers";
  @SerializedName(SERIALIZED_NAME_SERVERS)
  @javax.annotation.Nullable
  private List<DtcPoolServer> servers = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Object tags;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  @javax.annotation.Nullable
  private Long ttl;

  public DtcPool() {
  }

  public DtcPool(
     String id
  ) {
    this();
    this.id = id;
  }

  public DtcPool comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Optional. Comment for __Pool__.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  public DtcPool disabled(@javax.annotation.Nullable Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Optional. Flag which enables/disables __Pool__.  Defaults to _false_.
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(@javax.annotation.Nullable Boolean disabled) {
    this.disabled = disabled;
  }


  public DtcPool healthChecks(@javax.annotation.Nullable List<DtcPoolHealthCheck> healthChecks) {
    this.healthChecks = healthChecks;
    return this;
  }

  public DtcPool addHealthChecksItem(DtcPoolHealthCheck healthChecksItem) {
    if (this.healthChecks == null) {
      this.healthChecks = new ArrayList<>();
    }
    this.healthChecks.add(healthChecksItem);
    return this;
  }

  /**
   * Optional. List of __HealthCheck__ objects IDs assigned to __Pool__.  Defaults to _empty_.
   * @return healthChecks
   */
  @javax.annotation.Nullable
  public List<DtcPoolHealthCheck> getHealthChecks() {
    return healthChecks;
  }

  public void setHealthChecks(@javax.annotation.Nullable List<DtcPoolHealthCheck> healthChecks) {
    this.healthChecks = healthChecks;
  }


  /**
   * The resource identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public DtcPool inheritanceSources(@javax.annotation.Nullable DtcTTLInheritance inheritanceSources) {
    this.inheritanceSources = inheritanceSources;
    return this;
  }

  /**
   * Get inheritanceSources
   * @return inheritanceSources
   */
  @javax.annotation.Nullable
  public DtcTTLInheritance getInheritanceSources() {
    return inheritanceSources;
  }

  public void setInheritanceSources(@javax.annotation.Nullable DtcTTLInheritance inheritanceSources) {
    this.inheritanceSources = inheritanceSources;
  }


  public DtcPool metadata(@javax.annotation.Nullable DtcMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public DtcMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(@javax.annotation.Nullable DtcMetadata metadata) {
    this.metadata = metadata;
  }


  public DtcPool method(@javax.annotation.Nonnull String method) {
    this.method = method;
    return this;
  }

  /**
   * Load balancing method used for selecting __Server__ assigned to __Pool__.  Valid values are: * _round_robin_ If the _round_robin_ load balancing method is selected, BloxOne DDI adjusts the response to a query in a sequential and circular manner, directing clients to pools.  * _ratio_ If _ratio_ load balancing method is selected, BloxOne DDI adjusts the response to a query so that clients are directed to pool using weighted round robin, a load-balancing pattern in which requests are distributed among several resources based on weight assigned to each resource. The distribution of responses over time will be equal for all available pools but the sequence of the responses won&#39;t be guaranteed. When equal weights are assigned for resources (pools) it effectively leads to basic round robin which directs clients to pools in sequential and circular manner.  * _global_availability_ If _global_availability_ load balancing method is selected clients are directed to the first server that is up in the _servers_ list.  Defaults to _round_robin_.
   * @return method
   */
  @javax.annotation.Nonnull
  public String getMethod() {
    return method;
  }

  public void setMethod(@javax.annotation.Nonnull String method) {
    this.method = method;
  }


  public DtcPool name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Display name of __Pool__.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public DtcPool poolAvailability(@javax.annotation.Nullable String poolAvailability) {
    this.poolAvailability = poolAvailability;
    return this;
  }

  /**
   * Optional. Pool Availability setting defines how __Pool__ health is calculated.  Valid values are: * _all_ If _all_ availability selected then __Pool__ is treated healthy when all pool&#39;s servers are healthy. * _quorum_ If _quorum_ availability selected then __Pool__ is treated healthy when at least N pool&#39;s servers are healthy. N is configurable via the value from _pool_servers_quorum_ setting. * _any_ If _any_ availability selected then __Pool__ is treated healthy when at least one pool&#39;s server is healthy.  Defaults to _any_.
   * @return poolAvailability
   */
  @javax.annotation.Nullable
  public String getPoolAvailability() {
    return poolAvailability;
  }

  public void setPoolAvailability(@javax.annotation.Nullable String poolAvailability) {
    this.poolAvailability = poolAvailability;
  }


  public DtcPool poolServersQuorum(@javax.annotation.Nullable Long poolServersQuorum) {
    this.poolServersQuorum = poolServersQuorum;
    return this;
  }

  /**
   * Pool Servers Quorum defines a minimal number of pool&#39;s healthy servers required for treating __Pool__ as healthy when Pool Availability is set to _quorum_.
   * @return poolServersQuorum
   */
  @javax.annotation.Nullable
  public Long getPoolServersQuorum() {
    return poolServersQuorum;
  }

  public void setPoolServersQuorum(@javax.annotation.Nullable Long poolServersQuorum) {
    this.poolServersQuorum = poolServersQuorum;
  }


  public DtcPool serverAvailability(@javax.annotation.Nullable String serverAvailability) {
    this.serverAvailability = serverAvailability;
    return this;
  }

  /**
   * Optional. Server Availability setting defines how __Server__ health is calculated.  Valid values are: * _all_ If _all_ availability selected then __Server__ is treated healthy when all pool&#39;s health checks are positive. * _quorum_ If _quorum_ availability selected then __Server__ is treated healthy when at least N pool&#39;s health checks are positive. N is configurable via the value from _server_health_checks_quorum_ setting. * _any_ If _any_ availability selected then __Server__ is treated healthy when at least one pool&#39;s health check is positive  Defaults to _all_.
   * @return serverAvailability
   */
  @javax.annotation.Nullable
  public String getServerAvailability() {
    return serverAvailability;
  }

  public void setServerAvailability(@javax.annotation.Nullable String serverAvailability) {
    this.serverAvailability = serverAvailability;
  }


  public DtcPool serverHealthChecksQuorum(@javax.annotation.Nullable Long serverHealthChecksQuorum) {
    this.serverHealthChecksQuorum = serverHealthChecksQuorum;
    return this;
  }

  /**
   * Server Health Checks Quorum defines a minimal number of pool&#39;s positive health checks required for treating __Server__ as healthy when Server Availability is set to _quorum_.
   * @return serverHealthChecksQuorum
   */
  @javax.annotation.Nullable
  public Long getServerHealthChecksQuorum() {
    return serverHealthChecksQuorum;
  }

  public void setServerHealthChecksQuorum(@javax.annotation.Nullable Long serverHealthChecksQuorum) {
    this.serverHealthChecksQuorum = serverHealthChecksQuorum;
  }


  public DtcPool servers(@javax.annotation.Nullable List<DtcPoolServer> servers) {
    this.servers = servers;
    return this;
  }

  public DtcPool addServersItem(DtcPoolServer serversItem) {
    if (this.servers == null) {
      this.servers = new ArrayList<>();
    }
    this.servers.add(serversItem);
    return this;
  }

  /**
   * Optional. List of __Server__ objects assigned to __Pool__.  Defaults to _empty_.
   * @return servers
   */
  @javax.annotation.Nullable
  public List<DtcPoolServer> getServers() {
    return servers;
  }

  public void setServers(@javax.annotation.Nullable List<DtcPoolServer> servers) {
    this.servers = servers;
  }


  public DtcPool tags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Optional. The tags for __Pool__ in JSON format.
   * @return tags
   */
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
  }


  public DtcPool ttl(@javax.annotation.Nullable Long ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * Optional. Time to live value (in seconds) to be used for records in DTC response. Unsigned integer, min: 0, max 2147483647 (31-bits per RFC-2181).
   * @return ttl
   */
  @javax.annotation.Nullable
  public Long getTtl() {
    return ttl;
  }

  public void setTtl(@javax.annotation.Nullable Long ttl) {
    this.ttl = ttl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtcPool dtcPool = (DtcPool) o;
    return Objects.equals(this.comment, dtcPool.comment) &&
        Objects.equals(this.disabled, dtcPool.disabled) &&
        Objects.equals(this.healthChecks, dtcPool.healthChecks) &&
        Objects.equals(this.id, dtcPool.id) &&
        Objects.equals(this.inheritanceSources, dtcPool.inheritanceSources) &&
        Objects.equals(this.metadata, dtcPool.metadata) &&
        Objects.equals(this.method, dtcPool.method) &&
        Objects.equals(this.name, dtcPool.name) &&
        Objects.equals(this.poolAvailability, dtcPool.poolAvailability) &&
        Objects.equals(this.poolServersQuorum, dtcPool.poolServersQuorum) &&
        Objects.equals(this.serverAvailability, dtcPool.serverAvailability) &&
        Objects.equals(this.serverHealthChecksQuorum, dtcPool.serverHealthChecksQuorum) &&
        Objects.equals(this.servers, dtcPool.servers) &&
        Objects.equals(this.tags, dtcPool.tags) &&
        Objects.equals(this.ttl, dtcPool.ttl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comment, disabled, healthChecks, id, inheritanceSources, metadata, method, name, poolAvailability, poolServersQuorum, serverAvailability, serverHealthChecksQuorum, servers, tags, ttl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtcPool {\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    healthChecks: ").append(toIndentedString(healthChecks)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inheritanceSources: ").append(toIndentedString(inheritanceSources)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    poolAvailability: ").append(toIndentedString(poolAvailability)).append("\n");
    sb.append("    poolServersQuorum: ").append(toIndentedString(poolServersQuorum)).append("\n");
    sb.append("    serverAvailability: ").append(toIndentedString(serverAvailability)).append("\n");
    sb.append("    serverHealthChecksQuorum: ").append(toIndentedString(serverHealthChecksQuorum)).append("\n");
    sb.append("    servers: ").append(toIndentedString(servers)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comment");
    openapiFields.add("disabled");
    openapiFields.add("health_checks");
    openapiFields.add("id");
    openapiFields.add("inheritance_sources");
    openapiFields.add("metadata");
    openapiFields.add("method");
    openapiFields.add("name");
    openapiFields.add("pool_availability");
    openapiFields.add("pool_servers_quorum");
    openapiFields.add("server_availability");
    openapiFields.add("server_health_checks_quorum");
    openapiFields.add("servers");
    openapiFields.add("tags");
    openapiFields.add("ttl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("method");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DtcPool
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DtcPool.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtcPool is not found in the empty JSON string", DtcPool.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DtcPool.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DtcPool` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DtcPool.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if (jsonObj.get("health_checks") != null && !jsonObj.get("health_checks").isJsonNull()) {
        JsonArray jsonArrayhealthChecks = jsonObj.getAsJsonArray("health_checks");
        if (jsonArrayhealthChecks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("health_checks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `health_checks` to be an array in the JSON string but got `%s`", jsonObj.get("health_checks").toString()));
          }

          // validate the optional field `health_checks` (array)
          for (int i = 0; i < jsonArrayhealthChecks.size(); i++) {
            DtcPoolHealthCheck.validateJsonElement(jsonArrayhealthChecks.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `inheritance_sources`
      if (jsonObj.get("inheritance_sources") != null && !jsonObj.get("inheritance_sources").isJsonNull()) {
        DtcTTLInheritance.validateJsonElement(jsonObj.get("inheritance_sources"));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        DtcMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
      if (!jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("pool_availability") != null && !jsonObj.get("pool_availability").isJsonNull()) && !jsonObj.get("pool_availability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pool_availability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pool_availability").toString()));
      }
      if ((jsonObj.get("server_availability") != null && !jsonObj.get("server_availability").isJsonNull()) && !jsonObj.get("server_availability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server_availability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server_availability").toString()));
      }
      if (jsonObj.get("servers") != null && !jsonObj.get("servers").isJsonNull()) {
        JsonArray jsonArrayservers = jsonObj.getAsJsonArray("servers");
        if (jsonArrayservers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("servers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `servers` to be an array in the JSON string but got `%s`", jsonObj.get("servers").toString()));
          }

          // validate the optional field `servers` (array)
          for (int i = 0; i < jsonArrayservers.size(); i++) {
            DtcPoolServer.validateJsonElement(jsonArrayservers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtcPool.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtcPool' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtcPool> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtcPool.class));

       return (TypeAdapter<T>) new TypeAdapter<DtcPool>() {
           @Override
           public void write(JsonWriter out, DtcPool value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DtcPool read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DtcPool given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DtcPool
   * @throws IOException if the JSON string is invalid with respect to DtcPool
   */
  public static DtcPool fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtcPool.class);
  }

  /**
   * Convert an instance of DtcPool to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

