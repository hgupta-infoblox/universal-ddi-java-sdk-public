/*
 * DNS DTC API
 * The DNS DTC is a BloxOne DDI service providing load balanced DNS resolution.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specific check for an SNMP entry and its value in MIB hierarchy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:26.478324+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class SNMPHealthCheckEntryCheck {
  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_MAX_VALUE = "max_value";
  @SerializedName(SERIALIZED_NAME_MAX_VALUE)
  @javax.annotation.Nullable
  private String maxValue;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  @javax.annotation.Nonnull
  private String operator;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private String type;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  @javax.annotation.Nullable
  private String value;

  public SNMPHealthCheckEntryCheck() {
  }

  public SNMPHealthCheckEntryCheck comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Optional. Comment for __EntryCheck__.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  public SNMPHealthCheckEntryCheck maxValue(@javax.annotation.Nullable String maxValue) {
    this.maxValue = maxValue;
    return this;
  }

  /**
   * Optional. Expected max value of an entry to check against. Used for __in__ operator only, otherwise ignored.
   * @return maxValue
   */
  @javax.annotation.Nullable
  public String getMaxValue() {
    return maxValue;
  }

  public void setMaxValue(@javax.annotation.Nullable String maxValue) {
    this.maxValue = maxValue;
  }


  public SNMPHealthCheckEntryCheck name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Name is a dotted-decimal number that defines the location of the entry in the universal MIB tree.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public SNMPHealthCheckEntryCheck operator(@javax.annotation.Nonnull String operator) {
    this.operator = operator;
    return this;
  }

  /**
   * Operator defines operation to perform on an entry value.  Allowed values: * any - any value must be present * eq  - entry value must be equal to check&#39;s __value__. * leq - entry value must less or equal to check&#39;s __value__. * geq - entry value must be great or equal to check&#39;s __value__. * in  - entry value must be greater or equal than __value__ and less or equal than __max_value__.  Operator __in__ is supported only for __integer__ types.
   * @return operator
   */
  @javax.annotation.Nonnull
  public String getOperator() {
    return operator;
  }

  public void setOperator(@javax.annotation.Nonnull String operator) {
    this.operator = operator;
  }


  public SNMPHealthCheckEntryCheck type(@javax.annotation.Nonnull String type) {
    this.type = type;
    return this;
  }

  /**
   * Type defines type of an entry value.  Allowed values: * string * integer  String type does not support __in__ operator.
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull String type) {
    this.type = type;
  }


  public SNMPHealthCheckEntryCheck value(@javax.annotation.Nullable String value) {
    this.value = value;
    return this;
  }

  /**
   * Optional. Expected value of an entry to check against. Ignored for __any__ operator.
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(@javax.annotation.Nullable String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SNMPHealthCheckEntryCheck snMPHealthCheckEntryCheck = (SNMPHealthCheckEntryCheck) o;
    return Objects.equals(this.comment, snMPHealthCheckEntryCheck.comment) &&
        Objects.equals(this.maxValue, snMPHealthCheckEntryCheck.maxValue) &&
        Objects.equals(this.name, snMPHealthCheckEntryCheck.name) &&
        Objects.equals(this.operator, snMPHealthCheckEntryCheck.operator) &&
        Objects.equals(this.type, snMPHealthCheckEntryCheck.type) &&
        Objects.equals(this.value, snMPHealthCheckEntryCheck.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comment, maxValue, name, operator, type, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SNMPHealthCheckEntryCheck {\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    maxValue: ").append(toIndentedString(maxValue)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comment");
    openapiFields.add("max_value");
    openapiFields.add("name");
    openapiFields.add("operator");
    openapiFields.add("type");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("operator");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SNMPHealthCheckEntryCheck
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SNMPHealthCheckEntryCheck.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SNMPHealthCheckEntryCheck is not found in the empty JSON string", SNMPHealthCheckEntryCheck.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SNMPHealthCheckEntryCheck.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SNMPHealthCheckEntryCheck` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SNMPHealthCheckEntryCheck.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("max_value") != null && !jsonObj.get("max_value").isJsonNull()) && !jsonObj.get("max_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max_value").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("operator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operator").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SNMPHealthCheckEntryCheck.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SNMPHealthCheckEntryCheck' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SNMPHealthCheckEntryCheck> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SNMPHealthCheckEntryCheck.class));

       return (TypeAdapter<T>) new TypeAdapter<SNMPHealthCheckEntryCheck>() {
           @Override
           public void write(JsonWriter out, SNMPHealthCheckEntryCheck value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SNMPHealthCheckEntryCheck read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SNMPHealthCheckEntryCheck given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SNMPHealthCheckEntryCheck
   * @throws IOException if the JSON string is invalid with respect to SNMPHealthCheckEntryCheck
   */
  public static SNMPHealthCheckEntryCheck fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SNMPHealthCheckEntryCheck.class);
  }

  /**
   * Convert an instance of SNMPHealthCheckEntryCheck to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

