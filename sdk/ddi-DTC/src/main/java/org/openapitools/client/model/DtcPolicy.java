/*
 * DNS DTC API
 * The DNS DTC is a BloxOne DDI service providing load balanced DNS resolution.   
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DtcMetadata;
import org.openapitools.client.model.DtcPolicyPool;
import org.openapitools.client.model.DtcTTLInheritance;
import org.openapitools.client.model.DtcTopologyRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A __Policy__ (_dtc/policy_) represents a DNS load balancing policy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:26.478324+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class DtcPolicy {
  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  @javax.annotation.Nullable
  private Boolean disabled;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_INHERITANCE_SOURCES = "inheritance_sources";
  @SerializedName(SERIALIZED_NAME_INHERITANCE_SOURCES)
  @javax.annotation.Nullable
  private DtcTTLInheritance inheritanceSources;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  @javax.annotation.Nullable
  private DtcMetadata metadata;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  @javax.annotation.Nonnull
  private String method;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_POOLS = "pools";
  @SerializedName(SERIALIZED_NAME_POOLS)
  @javax.annotation.Nullable
  private List<DtcPolicyPool> pools = new ArrayList<>();

  public static final String SERIALIZED_NAME_RULES = "rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  @javax.annotation.Nullable
  private List<DtcTopologyRule> rules = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Object tags;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  @javax.annotation.Nullable
  private Long ttl;

  public DtcPolicy() {
  }

  public DtcPolicy(
     String id
  ) {
    this();
    this.id = id;
  }

  public DtcPolicy comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Optional. Comment for __Policy__.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  public DtcPolicy disabled(@javax.annotation.Nullable Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Optional. Flag which enables/disables __Policy__.  Defaults to _false_.
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(@javax.annotation.Nullable Boolean disabled) {
    this.disabled = disabled;
  }


  /**
   * The resource identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public DtcPolicy inheritanceSources(@javax.annotation.Nullable DtcTTLInheritance inheritanceSources) {
    this.inheritanceSources = inheritanceSources;
    return this;
  }

  /**
   * Get inheritanceSources
   * @return inheritanceSources
   */
  @javax.annotation.Nullable
  public DtcTTLInheritance getInheritanceSources() {
    return inheritanceSources;
  }

  public void setInheritanceSources(@javax.annotation.Nullable DtcTTLInheritance inheritanceSources) {
    this.inheritanceSources = inheritanceSources;
  }


  public DtcPolicy metadata(@javax.annotation.Nullable DtcMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public DtcMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(@javax.annotation.Nullable DtcMetadata metadata) {
    this.metadata = metadata;
  }


  public DtcPolicy method(@javax.annotation.Nonnull String method) {
    this.method = method;
    return this;
  }

  /**
   * Load balancing method used for selecting __Pool__ assigned to __Policy__.  Valid values are: * _round_robin_ If the _round_robin_ load balancing method is selected, BloxOne DDI adjusts the response to a query in a sequential and circular manner, directing clients to pools.  * _ratio_ If _ratio_ load balancing method is selected, BloxOne DDI adjusts the response to a query so that clients are directed to pool using weighted round robin, a load-balancing pattern in which requests are distributed among several resources based on weight assigned to each resource. The distribution of responses over time will be equal for all available pools but the sequence of the responses won&#39;t be guaranteed. When equal weights are assigned for resources (pools) it effectively leads to basic round robin configuration which directs clients to pools in a sequential and circular manner.  * _topology_ If _topology_ load balancing method is selected the pools configured for the policy are ignored and topology rules are used instead.  * _global_availability_ If _global_availability_ load balancing method is selected clients are directed to the first pool that is up in the _pools_ list.  Defaults to _round_robin_.
   * @return method
   */
  @javax.annotation.Nonnull
  public String getMethod() {
    return method;
  }

  public void setMethod(@javax.annotation.Nonnull String method) {
    this.method = method;
  }


  public DtcPolicy name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Display name of __Policy__.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public DtcPolicy pools(@javax.annotation.Nullable List<DtcPolicyPool> pools) {
    this.pools = pools;
    return this;
  }

  public DtcPolicy addPoolsItem(DtcPolicyPool poolsItem) {
    if (this.pools == null) {
      this.pools = new ArrayList<>();
    }
    this.pools.add(poolsItem);
    return this;
  }

  /**
   * Optional. List of __Pool__ objects assigned to __Policy__.  Defaults to _empty_.
   * @return pools
   */
  @javax.annotation.Nullable
  public List<DtcPolicyPool> getPools() {
    return pools;
  }

  public void setPools(@javax.annotation.Nullable List<DtcPolicyPool> pools) {
    this.pools = pools;
  }


  public DtcPolicy rules(@javax.annotation.Nullable List<DtcTopologyRule> rules) {
    this.rules = rules;
    return this;
  }

  public DtcPolicy addRulesItem(DtcTopologyRule rulesItem) {
    if (this.rules == null) {
      this.rules = new ArrayList<>();
    }
    this.rules.add(rulesItem);
    return this;
  }

  /**
   * Optional. List of __TopologyRule__ objects defining the resolving strategy for __Policy__.  Defaults to a list of single, default __TopologyRule__.
   * @return rules
   */
  @javax.annotation.Nullable
  public List<DtcTopologyRule> getRules() {
    return rules;
  }

  public void setRules(@javax.annotation.Nullable List<DtcTopologyRule> rules) {
    this.rules = rules;
  }


  public DtcPolicy tags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Optional. The tags for __Policy__ in JSON format.
   * @return tags
   */
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
  }


  public DtcPolicy ttl(@javax.annotation.Nullable Long ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * Optional. Time to live value (in seconds) to be used for records in DTC response. Unsigned integer, min: 0, max 2147483647 (31-bits per RFC-2181).
   * @return ttl
   */
  @javax.annotation.Nullable
  public Long getTtl() {
    return ttl;
  }

  public void setTtl(@javax.annotation.Nullable Long ttl) {
    this.ttl = ttl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtcPolicy dtcPolicy = (DtcPolicy) o;
    return Objects.equals(this.comment, dtcPolicy.comment) &&
        Objects.equals(this.disabled, dtcPolicy.disabled) &&
        Objects.equals(this.id, dtcPolicy.id) &&
        Objects.equals(this.inheritanceSources, dtcPolicy.inheritanceSources) &&
        Objects.equals(this.metadata, dtcPolicy.metadata) &&
        Objects.equals(this.method, dtcPolicy.method) &&
        Objects.equals(this.name, dtcPolicy.name) &&
        Objects.equals(this.pools, dtcPolicy.pools) &&
        Objects.equals(this.rules, dtcPolicy.rules) &&
        Objects.equals(this.tags, dtcPolicy.tags) &&
        Objects.equals(this.ttl, dtcPolicy.ttl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comment, disabled, id, inheritanceSources, metadata, method, name, pools, rules, tags, ttl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtcPolicy {\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inheritanceSources: ").append(toIndentedString(inheritanceSources)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pools: ").append(toIndentedString(pools)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comment");
    openapiFields.add("disabled");
    openapiFields.add("id");
    openapiFields.add("inheritance_sources");
    openapiFields.add("metadata");
    openapiFields.add("method");
    openapiFields.add("name");
    openapiFields.add("pools");
    openapiFields.add("rules");
    openapiFields.add("tags");
    openapiFields.add("ttl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("method");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DtcPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DtcPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtcPolicy is not found in the empty JSON string", DtcPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DtcPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DtcPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DtcPolicy.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `inheritance_sources`
      if (jsonObj.get("inheritance_sources") != null && !jsonObj.get("inheritance_sources").isJsonNull()) {
        DtcTTLInheritance.validateJsonElement(jsonObj.get("inheritance_sources"));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        DtcMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
      if (!jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("pools") != null && !jsonObj.get("pools").isJsonNull()) {
        JsonArray jsonArraypools = jsonObj.getAsJsonArray("pools");
        if (jsonArraypools != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pools").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pools` to be an array in the JSON string but got `%s`", jsonObj.get("pools").toString()));
          }

          // validate the optional field `pools` (array)
          for (int i = 0; i < jsonArraypools.size(); i++) {
            DtcPolicyPool.validateJsonElement(jsonArraypools.get(i));
          };
        }
      }
      if (jsonObj.get("rules") != null && !jsonObj.get("rules").isJsonNull()) {
        JsonArray jsonArrayrules = jsonObj.getAsJsonArray("rules");
        if (jsonArrayrules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rules` to be an array in the JSON string but got `%s`", jsonObj.get("rules").toString()));
          }

          // validate the optional field `rules` (array)
          for (int i = 0; i < jsonArrayrules.size(); i++) {
            DtcTopologyRule.validateJsonElement(jsonArrayrules.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtcPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtcPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtcPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtcPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<DtcPolicy>() {
           @Override
           public void write(JsonWriter out, DtcPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DtcPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DtcPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DtcPolicy
   * @throws IOException if the JSON string is invalid with respect to DtcPolicy
   */
  public static DtcPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtcPolicy.class);
  }

  /**
   * Convert an instance of DtcPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

