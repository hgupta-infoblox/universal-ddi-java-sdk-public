/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IpamsvcASMConfig;
import org.openapitools.client.model.IpamsvcDDNSZone;
import org.openapitools.client.model.IpamsvcDHCPConfig;
import org.openapitools.client.model.IpamsvcDHCPUtilizationThreshold;
import org.openapitools.client.model.IpamsvcKerberosKey;
import org.openapitools.client.model.IpamsvcLoggingConfig;
import org.openapitools.client.model.IpamsvcOptionItem;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for IpamsvcGlobal
 */
public class IpamsvcGlobalTest {
    private final IpamsvcGlobal model = new IpamsvcGlobal();

    /**
     * Model tests for IpamsvcGlobal
     */
    @Test
    public void testIpamsvcGlobal() {
        // TODO: test IpamsvcGlobal
    }

    /**
     * Test the property 'activeSearchEnable'
     */
    @Test
    public void activeSearchEnableTest() {
        // TODO: test activeSearchEnable
    }

    /**
     * Test the property 'asmConfig'
     */
    @Test
    public void asmConfigTest() {
        // TODO: test asmConfig
    }

    /**
     * Test the property 'clientPrincipal'
     */
    @Test
    public void clientPrincipalTest() {
        // TODO: test clientPrincipal
    }

    /**
     * Test the property 'ddnsClientUpdate'
     */
    @Test
    public void ddnsClientUpdateTest() {
        // TODO: test ddnsClientUpdate
    }

    /**
     * Test the property 'ddnsConflictResolutionMode'
     */
    @Test
    public void ddnsConflictResolutionModeTest() {
        // TODO: test ddnsConflictResolutionMode
    }

    /**
     * Test the property 'ddnsDomain'
     */
    @Test
    public void ddnsDomainTest() {
        // TODO: test ddnsDomain
    }

    /**
     * Test the property 'ddnsEnabled'
     */
    @Test
    public void ddnsEnabledTest() {
        // TODO: test ddnsEnabled
    }

    /**
     * Test the property 'ddnsGenerateName'
     */
    @Test
    public void ddnsGenerateNameTest() {
        // TODO: test ddnsGenerateName
    }

    /**
     * Test the property 'ddnsGeneratedPrefix'
     */
    @Test
    public void ddnsGeneratedPrefixTest() {
        // TODO: test ddnsGeneratedPrefix
    }

    /**
     * Test the property 'ddnsSendUpdates'
     */
    @Test
    public void ddnsSendUpdatesTest() {
        // TODO: test ddnsSendUpdates
    }

    /**
     * Test the property 'ddnsTtlPercent'
     */
    @Test
    public void ddnsTtlPercentTest() {
        // TODO: test ddnsTtlPercent
    }

    /**
     * Test the property 'ddnsUpdateOnRenew'
     */
    @Test
    public void ddnsUpdateOnRenewTest() {
        // TODO: test ddnsUpdateOnRenew
    }

    /**
     * Test the property 'ddnsUseConflictResolution'
     */
    @Test
    public void ddnsUseConflictResolutionTest() {
        // TODO: test ddnsUseConflictResolution
    }

    /**
     * Test the property 'ddnsZones'
     */
    @Test
    public void ddnsZonesTest() {
        // TODO: test ddnsZones
    }

    /**
     * Test the property 'dhcpConfig'
     */
    @Test
    public void dhcpConfigTest() {
        // TODO: test dhcpConfig
    }

    /**
     * Test the property 'dhcpOptions'
     */
    @Test
    public void dhcpOptionsTest() {
        // TODO: test dhcpOptions
    }

    /**
     * Test the property 'dhcpOptionsV6'
     */
    @Test
    public void dhcpOptionsV6Test() {
        // TODO: test dhcpOptionsV6
    }

    /**
     * Test the property 'dhcpThreshold'
     */
    @Test
    public void dhcpThresholdTest() {
        // TODO: test dhcpThreshold
    }

    /**
     * Test the property 'gssTsigFallback'
     */
    @Test
    public void gssTsigFallbackTest() {
        // TODO: test gssTsigFallback
    }

    /**
     * Test the property 'headerOptionFilename'
     */
    @Test
    public void headerOptionFilenameTest() {
        // TODO: test headerOptionFilename
    }

    /**
     * Test the property 'headerOptionServerAddress'
     */
    @Test
    public void headerOptionServerAddressTest() {
        // TODO: test headerOptionServerAddress
    }

    /**
     * Test the property 'headerOptionServerName'
     */
    @Test
    public void headerOptionServerNameTest() {
        // TODO: test headerOptionServerName
    }

    /**
     * Test the property 'hostnameRewriteChar'
     */
    @Test
    public void hostnameRewriteCharTest() {
        // TODO: test hostnameRewriteChar
    }

    /**
     * Test the property 'hostnameRewriteEnabled'
     */
    @Test
    public void hostnameRewriteEnabledTest() {
        // TODO: test hostnameRewriteEnabled
    }

    /**
     * Test the property 'hostnameRewriteRegex'
     */
    @Test
    public void hostnameRewriteRegexTest() {
        // TODO: test hostnameRewriteRegex
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'kerberosKdc'
     */
    @Test
    public void kerberosKdcTest() {
        // TODO: test kerberosKdc
    }

    /**
     * Test the property 'kerberosKeys'
     */
    @Test
    public void kerberosKeysTest() {
        // TODO: test kerberosKeys
    }

    /**
     * Test the property 'kerberosRekeyInterval'
     */
    @Test
    public void kerberosRekeyIntervalTest() {
        // TODO: test kerberosRekeyInterval
    }

    /**
     * Test the property 'kerberosRetryInterval'
     */
    @Test
    public void kerberosRetryIntervalTest() {
        // TODO: test kerberosRetryInterval
    }

    /**
     * Test the property 'kerberosTkeyLifetime'
     */
    @Test
    public void kerberosTkeyLifetimeTest() {
        // TODO: test kerberosTkeyLifetime
    }

    /**
     * Test the property 'kerberosTkeyProtocol'
     */
    @Test
    public void kerberosTkeyProtocolTest() {
        // TODO: test kerberosTkeyProtocol
    }

    /**
     * Test the property 'loggingConfiguration'
     */
    @Test
    public void loggingConfigurationTest() {
        // TODO: test loggingConfiguration
    }

    /**
     * Test the property 'preferOption12'
     */
    @Test
    public void preferOption12Test() {
        // TODO: test preferOption12
    }

    /**
     * Test the property 'removeSuffixOption81'
     */
    @Test
    public void removeSuffixOption81Test() {
        // TODO: test removeSuffixOption81
    }

    /**
     * Test the property 'serverPrincipal'
     */
    @Test
    public void serverPrincipalTest() {
        // TODO: test serverPrincipal
    }

    /**
     * Test the property 'vendorSpecificOptionOptionSpace'
     */
    @Test
    public void vendorSpecificOptionOptionSpaceTest() {
        // TODO: test vendorSpecificOptionOptionSpace
    }

}
