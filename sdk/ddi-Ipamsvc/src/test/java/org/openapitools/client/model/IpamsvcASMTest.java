/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for IpamsvcASM
 */
public class IpamsvcASMTest {
    private final IpamsvcASM model = new IpamsvcASM();

    /**
     * Model tests for IpamsvcASM
     */
    @Test
    public void testIpamsvcASM() {
        // TODO: test IpamsvcASM
    }

    /**
     * Test the property 'backEnd'
     */
    @Test
    public void backEndTest() {
        // TODO: test backEnd
    }

    /**
     * Test the property 'backStart'
     */
    @Test
    public void backStartTest() {
        // TODO: test backStart
    }

    /**
     * Test the property 'bothEnd'
     */
    @Test
    public void bothEndTest() {
        // TODO: test bothEnd
    }

    /**
     * Test the property 'bothStart'
     */
    @Test
    public void bothStartTest() {
        // TODO: test bothStart
    }

    /**
     * Test the property 'frontEnd'
     */
    @Test
    public void frontEndTest() {
        // TODO: test frontEnd
    }

    /**
     * Test the property 'frontStart'
     */
    @Test
    public void frontStartTest() {
        // TODO: test frontStart
    }

    /**
     * Test the property 'growth'
     */
    @Test
    public void growthTest() {
        // TODO: test growth
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'lookahead'
     */
    @Test
    public void lookaheadTest() {
        // TODO: test lookahead
    }

    /**
     * Test the property 'rangeEnd'
     */
    @Test
    public void rangeEndTest() {
        // TODO: test rangeEnd
    }

    /**
     * Test the property 'rangeId'
     */
    @Test
    public void rangeIdTest() {
        // TODO: test rangeId
    }

    /**
     * Test the property 'rangeStart'
     */
    @Test
    public void rangeStartTest() {
        // TODO: test rangeStart
    }

    /**
     * Test the property 'subnetAddress'
     */
    @Test
    public void subnetAddressTest() {
        // TODO: test subnetAddress
    }

    /**
     * Test the property 'subnetCidr'
     */
    @Test
    public void subnetCidrTest() {
        // TODO: test subnetCidr
    }

    /**
     * Test the property 'subnetDirection'
     */
    @Test
    public void subnetDirectionTest() {
        // TODO: test subnetDirection
    }

    /**
     * Test the property 'subnetId'
     */
    @Test
    public void subnetIdTest() {
        // TODO: test subnetId
    }

    /**
     * Test the property 'subnetRange'
     */
    @Test
    public void subnetRangeTest() {
        // TODO: test subnetRange
    }

    /**
     * Test the property 'subnetRangeEnd'
     */
    @Test
    public void subnetRangeEndTest() {
        // TODO: test subnetRangeEnd
    }

    /**
     * Test the property 'subnetRangeStart'
     */
    @Test
    public void subnetRangeStartTest() {
        // TODO: test subnetRangeStart
    }

    /**
     * Test the property 'suppress'
     */
    @Test
    public void suppressTest() {
        // TODO: test suppress
    }

    /**
     * Test the property 'suppressTime'
     */
    @Test
    public void suppressTimeTest() {
        // TODO: test suppressTime
    }

    /**
     * Test the property 'thresholdUtilization'
     */
    @Test
    public void thresholdUtilizationTest() {
        // TODO: test thresholdUtilization
    }

    /**
     * Test the property 'update'
     */
    @Test
    public void updateTest() {
        // TODO: test update
    }

    /**
     * Test the property 'utilization'
     */
    @Test
    public void utilizationTest() {
        // TODO: test utilization
    }

}
