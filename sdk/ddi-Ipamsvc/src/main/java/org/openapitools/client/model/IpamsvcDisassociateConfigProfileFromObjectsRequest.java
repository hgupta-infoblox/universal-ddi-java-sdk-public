/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProtobufFieldMask;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DisassociateConfigProfileToObjects disassociates an object to config profiles.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcDisassociateConfigProfileFromObjectsRequest {
  public static final String SERIALIZED_NAME_CONFIG_PROFILE_ID = "config_profile_id";
  @SerializedName(SERIALIZED_NAME_CONFIG_PROFILE_ID)
  @javax.annotation.Nonnull
  private String configProfileId;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  @javax.annotation.Nullable
  private ProtobufFieldMask fields;

  public static final String SERIALIZED_NAME_OBJECT_IDS = "object_ids";
  @SerializedName(SERIALIZED_NAME_OBJECT_IDS)
  @javax.annotation.Nonnull
  private List<String> objectIds = new ArrayList<>();

  public IpamsvcDisassociateConfigProfileFromObjectsRequest() {
  }

  public IpamsvcDisassociateConfigProfileFromObjectsRequest configProfileId(@javax.annotation.Nonnull String configProfileId) {
    this.configProfileId = configProfileId;
    return this;
  }

  /**
   * The resource identifier.
   * @return configProfileId
   */
  @javax.annotation.Nonnull
  public String getConfigProfileId() {
    return configProfileId;
  }

  public void setConfigProfileId(@javax.annotation.Nonnull String configProfileId) {
    this.configProfileId = configProfileId;
  }


  public IpamsvcDisassociateConfigProfileFromObjectsRequest fields(@javax.annotation.Nullable ProtobufFieldMask fields) {
    this.fields = fields;
    return this;
  }

  /**
   * Get fields
   * @return fields
   */
  @javax.annotation.Nullable
  public ProtobufFieldMask getFields() {
    return fields;
  }

  public void setFields(@javax.annotation.Nullable ProtobufFieldMask fields) {
    this.fields = fields;
  }


  public IpamsvcDisassociateConfigProfileFromObjectsRequest objectIds(@javax.annotation.Nonnull List<String> objectIds) {
    this.objectIds = objectIds;
    return this;
  }

  public IpamsvcDisassociateConfigProfileFromObjectsRequest addObjectIdsItem(String objectIdsItem) {
    if (this.objectIds == null) {
      this.objectIds = new ArrayList<>();
    }
    this.objectIds.add(objectIdsItem);
    return this;
  }

  /**
   * The resource identifier.
   * @return objectIds
   */
  @javax.annotation.Nonnull
  public List<String> getObjectIds() {
    return objectIds;
  }

  public void setObjectIds(@javax.annotation.Nonnull List<String> objectIds) {
    this.objectIds = objectIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcDisassociateConfigProfileFromObjectsRequest ipamsvcDisassociateConfigProfileFromObjectsRequest = (IpamsvcDisassociateConfigProfileFromObjectsRequest) o;
    return Objects.equals(this.configProfileId, ipamsvcDisassociateConfigProfileFromObjectsRequest.configProfileId) &&
        Objects.equals(this.fields, ipamsvcDisassociateConfigProfileFromObjectsRequest.fields) &&
        Objects.equals(this.objectIds, ipamsvcDisassociateConfigProfileFromObjectsRequest.objectIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configProfileId, fields, objectIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcDisassociateConfigProfileFromObjectsRequest {\n");
    sb.append("    configProfileId: ").append(toIndentedString(configProfileId)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    objectIds: ").append(toIndentedString(objectIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("config_profile_id");
    openapiFields.add("fields");
    openapiFields.add("object_ids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("config_profile_id");
    openapiRequiredFields.add("object_ids");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcDisassociateConfigProfileFromObjectsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcDisassociateConfigProfileFromObjectsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcDisassociateConfigProfileFromObjectsRequest is not found in the empty JSON string", IpamsvcDisassociateConfigProfileFromObjectsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcDisassociateConfigProfileFromObjectsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcDisassociateConfigProfileFromObjectsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IpamsvcDisassociateConfigProfileFromObjectsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("config_profile_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `config_profile_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("config_profile_id").toString()));
      }
      // validate the optional field `fields`
      if (jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull()) {
        ProtobufFieldMask.validateJsonElement(jsonObj.get("fields"));
      }
      // ensure the required json array is present
      if (jsonObj.get("object_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("object_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `object_ids` to be an array in the JSON string but got `%s`", jsonObj.get("object_ids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcDisassociateConfigProfileFromObjectsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcDisassociateConfigProfileFromObjectsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcDisassociateConfigProfileFromObjectsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcDisassociateConfigProfileFromObjectsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcDisassociateConfigProfileFromObjectsRequest>() {
           @Override
           public void write(JsonWriter out, IpamsvcDisassociateConfigProfileFromObjectsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcDisassociateConfigProfileFromObjectsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcDisassociateConfigProfileFromObjectsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcDisassociateConfigProfileFromObjectsRequest
   * @throws IOException if the JSON string is invalid with respect to IpamsvcDisassociateConfigProfileFromObjectsRequest
   */
  public static IpamsvcDisassociateConfigProfileFromObjectsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcDisassociateConfigProfileFromObjectsRequest.class);
  }

  /**
   * Convert an instance of IpamsvcDisassociateConfigProfileFromObjectsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

