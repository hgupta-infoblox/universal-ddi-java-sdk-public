/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A DHCP Host (_dhcp/host_) object associates DHCP configuraton with hosts.   Automatically created and destroyed based on the hosts known to the platform.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcAssociatedHost {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nullable
  private String address;

  public static final String SERIALIZED_NAME_DHCPV4_SERVICE_STATUS = "dhcpv4_service_status";
  @SerializedName(SERIALIZED_NAME_DHCPV4_SERVICE_STATUS)
  @javax.annotation.Nullable
  private String dhcpv4ServiceStatus;

  public static final String SERIALIZED_NAME_DHCPV6_SERVICE_STATUS = "dhcpv6_service_status";
  @SerializedName(SERIALIZED_NAME_DHCPV6_SERVICE_STATUS)
  @javax.annotation.Nullable
  private String dhcpv6ServiceStatus;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_OPHID = "ophid";
  @SerializedName(SERIALIZED_NAME_OPHID)
  @javax.annotation.Nullable
  private String ophid;

  public IpamsvcAssociatedHost() {
  }

  public IpamsvcAssociatedHost(
     String address, 
     String dhcpv4ServiceStatus, 
     String dhcpv6ServiceStatus, 
     String id, 
     String name, 
     String ophid
  ) {
    this();
    this.address = address;
    this.dhcpv4ServiceStatus = dhcpv4ServiceStatus;
    this.dhcpv6ServiceStatus = dhcpv6ServiceStatus;
    this.id = id;
    this.name = name;
    this.ophid = ophid;
  }

  /**
   * The primary IP address of the on-prem host.
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }



  /**
   * Status of the DHCPv4 service.
   * @return dhcpv4ServiceStatus
   */
  @javax.annotation.Nullable
  public String getDhcpv4ServiceStatus() {
    return dhcpv4ServiceStatus;
  }



  /**
   * Status of the DHCPv6 service.
   * @return dhcpv6ServiceStatus
   */
  @javax.annotation.Nullable
  public String getDhcpv6ServiceStatus() {
    return dhcpv6ServiceStatus;
  }



  /**
   * The resource identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * The DHCP host name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * The on-prem host ID.
   * @return ophid
   */
  @javax.annotation.Nullable
  public String getOphid() {
    return ophid;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcAssociatedHost ipamsvcAssociatedHost = (IpamsvcAssociatedHost) o;
    return Objects.equals(this.address, ipamsvcAssociatedHost.address) &&
        Objects.equals(this.dhcpv4ServiceStatus, ipamsvcAssociatedHost.dhcpv4ServiceStatus) &&
        Objects.equals(this.dhcpv6ServiceStatus, ipamsvcAssociatedHost.dhcpv6ServiceStatus) &&
        Objects.equals(this.id, ipamsvcAssociatedHost.id) &&
        Objects.equals(this.name, ipamsvcAssociatedHost.name) &&
        Objects.equals(this.ophid, ipamsvcAssociatedHost.ophid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, dhcpv4ServiceStatus, dhcpv6ServiceStatus, id, name, ophid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcAssociatedHost {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    dhcpv4ServiceStatus: ").append(toIndentedString(dhcpv4ServiceStatus)).append("\n");
    sb.append("    dhcpv6ServiceStatus: ").append(toIndentedString(dhcpv6ServiceStatus)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ophid: ").append(toIndentedString(ophid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("dhcpv4_service_status");
    openapiFields.add("dhcpv6_service_status");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("ophid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcAssociatedHost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcAssociatedHost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcAssociatedHost is not found in the empty JSON string", IpamsvcAssociatedHost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcAssociatedHost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcAssociatedHost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("dhcpv4_service_status") != null && !jsonObj.get("dhcpv4_service_status").isJsonNull()) && !jsonObj.get("dhcpv4_service_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dhcpv4_service_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dhcpv4_service_status").toString()));
      }
      if ((jsonObj.get("dhcpv6_service_status") != null && !jsonObj.get("dhcpv6_service_status").isJsonNull()) && !jsonObj.get("dhcpv6_service_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dhcpv6_service_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dhcpv6_service_status").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("ophid") != null && !jsonObj.get("ophid").isJsonNull()) && !jsonObj.get("ophid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ophid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ophid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcAssociatedHost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcAssociatedHost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcAssociatedHost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcAssociatedHost.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcAssociatedHost>() {
           @Override
           public void write(JsonWriter out, IpamsvcAssociatedHost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcAssociatedHost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcAssociatedHost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcAssociatedHost
   * @throws IOException if the JSON string is invalid with respect to IpamsvcAssociatedHost
   */
  public static IpamsvcAssociatedHost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcAssociatedHost.class);
  }

  /**
   * Convert an instance of IpamsvcAssociatedHost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

