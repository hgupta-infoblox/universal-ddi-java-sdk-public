/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The __DHCPUtilization__ object represents DHCP utilization statistics for an object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcDHCPUtilization {
  public static final String SERIALIZED_NAME_DHCP_FREE = "dhcp_free";
  @SerializedName(SERIALIZED_NAME_DHCP_FREE)
  @javax.annotation.Nullable
  private String dhcpFree;

  public static final String SERIALIZED_NAME_DHCP_TOTAL = "dhcp_total";
  @SerializedName(SERIALIZED_NAME_DHCP_TOTAL)
  @javax.annotation.Nullable
  private String dhcpTotal;

  public static final String SERIALIZED_NAME_DHCP_USED = "dhcp_used";
  @SerializedName(SERIALIZED_NAME_DHCP_USED)
  @javax.annotation.Nullable
  private String dhcpUsed;

  public static final String SERIALIZED_NAME_DHCP_UTILIZATION = "dhcp_utilization";
  @SerializedName(SERIALIZED_NAME_DHCP_UTILIZATION)
  @javax.annotation.Nullable
  private Long dhcpUtilization;

  public IpamsvcDHCPUtilization() {
  }

  public IpamsvcDHCPUtilization(
     String dhcpFree, 
     String dhcpTotal, 
     String dhcpUsed, 
     Long dhcpUtilization
  ) {
    this();
    this.dhcpFree = dhcpFree;
    this.dhcpTotal = dhcpTotal;
    this.dhcpUsed = dhcpUsed;
    this.dhcpUtilization = dhcpUtilization;
  }

  /**
   * The total free IP addresses in the DHCP ranges in the scope of this object. It can be computed as _dhcp_total_ - _dhcp_used_.
   * @return dhcpFree
   */
  @javax.annotation.Nullable
  public String getDhcpFree() {
    return dhcpFree;
  }



  /**
   * The total IP addresses available in the DHCP ranges in the scope of this object.
   * @return dhcpTotal
   */
  @javax.annotation.Nullable
  public String getDhcpTotal() {
    return dhcpTotal;
  }



  /**
   * The total IP addresses marked as used in the DHCP ranges in the scope of this object.
   * @return dhcpUsed
   */
  @javax.annotation.Nullable
  public String getDhcpUsed() {
    return dhcpUsed;
  }



  /**
   * The percentage of used IP addresses relative to the total IP addresses available in the DHCP ranges in the scope of this object.
   * maximum: 100
   * @return dhcpUtilization
   */
  @javax.annotation.Nullable
  public Long getDhcpUtilization() {
    return dhcpUtilization;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcDHCPUtilization ipamsvcDHCPUtilization = (IpamsvcDHCPUtilization) o;
    return Objects.equals(this.dhcpFree, ipamsvcDHCPUtilization.dhcpFree) &&
        Objects.equals(this.dhcpTotal, ipamsvcDHCPUtilization.dhcpTotal) &&
        Objects.equals(this.dhcpUsed, ipamsvcDHCPUtilization.dhcpUsed) &&
        Objects.equals(this.dhcpUtilization, ipamsvcDHCPUtilization.dhcpUtilization);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dhcpFree, dhcpTotal, dhcpUsed, dhcpUtilization);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcDHCPUtilization {\n");
    sb.append("    dhcpFree: ").append(toIndentedString(dhcpFree)).append("\n");
    sb.append("    dhcpTotal: ").append(toIndentedString(dhcpTotal)).append("\n");
    sb.append("    dhcpUsed: ").append(toIndentedString(dhcpUsed)).append("\n");
    sb.append("    dhcpUtilization: ").append(toIndentedString(dhcpUtilization)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dhcp_free");
    openapiFields.add("dhcp_total");
    openapiFields.add("dhcp_used");
    openapiFields.add("dhcp_utilization");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcDHCPUtilization
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcDHCPUtilization.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcDHCPUtilization is not found in the empty JSON string", IpamsvcDHCPUtilization.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcDHCPUtilization.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcDHCPUtilization` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dhcp_free") != null && !jsonObj.get("dhcp_free").isJsonNull()) && !jsonObj.get("dhcp_free").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dhcp_free` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dhcp_free").toString()));
      }
      if ((jsonObj.get("dhcp_total") != null && !jsonObj.get("dhcp_total").isJsonNull()) && !jsonObj.get("dhcp_total").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dhcp_total` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dhcp_total").toString()));
      }
      if ((jsonObj.get("dhcp_used") != null && !jsonObj.get("dhcp_used").isJsonNull()) && !jsonObj.get("dhcp_used").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dhcp_used` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dhcp_used").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcDHCPUtilization.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcDHCPUtilization' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcDHCPUtilization> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcDHCPUtilization.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcDHCPUtilization>() {
           @Override
           public void write(JsonWriter out, IpamsvcDHCPUtilization value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcDHCPUtilization read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcDHCPUtilization given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcDHCPUtilization
   * @throws IOException if the JSON string is invalid with respect to IpamsvcDHCPUtilization
   */
  public static IpamsvcDHCPUtilization fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcDHCPUtilization.class);
  }

  /**
   * Convert an instance of IpamsvcDHCPUtilization to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

