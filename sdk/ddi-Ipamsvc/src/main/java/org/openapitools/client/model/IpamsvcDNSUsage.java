/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The __DNSUsage__ object tracks DNS usage of a resource record on an address.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcDNSUsage {
  public static final String SERIALIZED_NAME_ABSOLUTE_NAME = "absolute_name";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE_NAME)
  @javax.annotation.Nullable
  private String absoluteName;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nullable
  private String address;

  public static final String SERIALIZED_NAME_DNS_RDATA = "dns_rdata";
  @SerializedName(SERIALIZED_NAME_DNS_RDATA)
  @javax.annotation.Nullable
  private String dnsRdata;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_RECORD = "record";
  @SerializedName(SERIALIZED_NAME_RECORD)
  @javax.annotation.Nullable
  private String record;

  public static final String SERIALIZED_NAME_SPACE = "space";
  @SerializedName(SERIALIZED_NAME_SPACE)
  @javax.annotation.Nullable
  private String space;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_VIEW = "view";
  @SerializedName(SERIALIZED_NAME_VIEW)
  @javax.annotation.Nullable
  private String view;

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @SerializedName(SERIALIZED_NAME_ZONE)
  @javax.annotation.Nullable
  private String zone;

  public IpamsvcDNSUsage() {
  }

  public IpamsvcDNSUsage(
     String absoluteName, 
     String address, 
     String dnsRdata, 
     String id, 
     String name, 
     String type
  ) {
    this();
    this.absoluteName = absoluteName;
    this.address = address;
    this.dnsRdata = dnsRdata;
    this.id = id;
    this.name = name;
    this.type = type;
  }

  /**
   * The absolute name of the resource record in associated zone.
   * @return absoluteName
   */
  @javax.annotation.Nullable
  public String getAbsoluteName() {
    return absoluteName;
  }



  /**
   * The address of the referenced record.
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }



  /**
   * The DNS rdata of the referenced record.
   * @return dnsRdata
   */
  @javax.annotation.Nullable
  public String getDnsRdata() {
    return dnsRdata;
  }



  /**
   * The resource identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * The name in zone of the referenced record.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public IpamsvcDNSUsage record(@javax.annotation.Nullable String record) {
    this.record = record;
    return this;
  }

  /**
   * The resource identifier.
   * @return record
   */
  @javax.annotation.Nullable
  public String getRecord() {
    return record;
  }

  public void setRecord(@javax.annotation.Nullable String record) {
    this.record = record;
  }


  public IpamsvcDNSUsage space(@javax.annotation.Nullable String space) {
    this.space = space;
    return this;
  }

  /**
   * The resource identifier.
   * @return space
   */
  @javax.annotation.Nullable
  public String getSpace() {
    return space;
  }

  public void setSpace(@javax.annotation.Nullable String space) {
    this.space = space;
  }


  /**
   * The type of the referenced record.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }



  public IpamsvcDNSUsage view(@javax.annotation.Nullable String view) {
    this.view = view;
    return this;
  }

  /**
   * The resource identifier.
   * @return view
   */
  @javax.annotation.Nullable
  public String getView() {
    return view;
  }

  public void setView(@javax.annotation.Nullable String view) {
    this.view = view;
  }


  public IpamsvcDNSUsage zone(@javax.annotation.Nullable String zone) {
    this.zone = zone;
    return this;
  }

  /**
   * The resource identifier.
   * @return zone
   */
  @javax.annotation.Nullable
  public String getZone() {
    return zone;
  }

  public void setZone(@javax.annotation.Nullable String zone) {
    this.zone = zone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcDNSUsage ipamsvcDNSUsage = (IpamsvcDNSUsage) o;
    return Objects.equals(this.absoluteName, ipamsvcDNSUsage.absoluteName) &&
        Objects.equals(this.address, ipamsvcDNSUsage.address) &&
        Objects.equals(this.dnsRdata, ipamsvcDNSUsage.dnsRdata) &&
        Objects.equals(this.id, ipamsvcDNSUsage.id) &&
        Objects.equals(this.name, ipamsvcDNSUsage.name) &&
        Objects.equals(this.record, ipamsvcDNSUsage.record) &&
        Objects.equals(this.space, ipamsvcDNSUsage.space) &&
        Objects.equals(this.type, ipamsvcDNSUsage.type) &&
        Objects.equals(this.view, ipamsvcDNSUsage.view) &&
        Objects.equals(this.zone, ipamsvcDNSUsage.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(absoluteName, address, dnsRdata, id, name, record, space, type, view, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcDNSUsage {\n");
    sb.append("    absoluteName: ").append(toIndentedString(absoluteName)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    dnsRdata: ").append(toIndentedString(dnsRdata)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    record: ").append(toIndentedString(record)).append("\n");
    sb.append("    space: ").append(toIndentedString(space)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    view: ").append(toIndentedString(view)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("absolute_name");
    openapiFields.add("address");
    openapiFields.add("dns_rdata");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("record");
    openapiFields.add("space");
    openapiFields.add("type");
    openapiFields.add("view");
    openapiFields.add("zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcDNSUsage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcDNSUsage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcDNSUsage is not found in the empty JSON string", IpamsvcDNSUsage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcDNSUsage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcDNSUsage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("absolute_name") != null && !jsonObj.get("absolute_name").isJsonNull()) && !jsonObj.get("absolute_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `absolute_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("absolute_name").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("dns_rdata") != null && !jsonObj.get("dns_rdata").isJsonNull()) && !jsonObj.get("dns_rdata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dns_rdata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dns_rdata").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("record") != null && !jsonObj.get("record").isJsonNull()) && !jsonObj.get("record").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `record` to be a primitive type in the JSON string but got `%s`", jsonObj.get("record").toString()));
      }
      if ((jsonObj.get("space") != null && !jsonObj.get("space").isJsonNull()) && !jsonObj.get("space").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `space` to be a primitive type in the JSON string but got `%s`", jsonObj.get("space").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("view") != null && !jsonObj.get("view").isJsonNull()) && !jsonObj.get("view").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `view` to be a primitive type in the JSON string but got `%s`", jsonObj.get("view").toString()));
      }
      if ((jsonObj.get("zone") != null && !jsonObj.get("zone").isJsonNull()) && !jsonObj.get("zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcDNSUsage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcDNSUsage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcDNSUsage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcDNSUsage.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcDNSUsage>() {
           @Override
           public void write(JsonWriter out, IpamsvcDNSUsage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcDNSUsage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcDNSUsage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcDNSUsage
   * @throws IOException if the JSON string is invalid with respect to IpamsvcDNSUsage
   */
  public static IpamsvcDNSUsage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcDNSUsage.class);
  }

  /**
   * Convert an instance of IpamsvcDNSUsage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

