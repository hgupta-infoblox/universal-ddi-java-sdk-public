/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IpamsvcBulkCopyIPSpace
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcBulkCopyIPSpace {
  public static final String SERIALIZED_NAME_COPY_DHCP_OPTIONS = "copy_dhcp_options";
  @SerializedName(SERIALIZED_NAME_COPY_DHCP_OPTIONS)
  @javax.annotation.Nullable
  private Boolean copyDhcpOptions;

  public static final String SERIALIZED_NAME_COPY_OBJECTS = "copy_objects";
  @SerializedName(SERIALIZED_NAME_COPY_OBJECTS)
  @javax.annotation.Nonnull
  private List<String> copyObjects = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECURSIVE = "recursive";
  @SerializedName(SERIALIZED_NAME_RECURSIVE)
  @javax.annotation.Nullable
  private Boolean recursive;

  public static final String SERIALIZED_NAME_RETAIN_CHILD_COMPARTMENT = "retain_child_compartment";
  @SerializedName(SERIALIZED_NAME_RETAIN_CHILD_COMPARTMENT)
  @javax.annotation.Nullable
  private Boolean retainChildCompartment;

  public static final String SERIALIZED_NAME_SKIP_ON_ERROR = "skip_on_error";
  @SerializedName(SERIALIZED_NAME_SKIP_ON_ERROR)
  @javax.annotation.Nullable
  private Boolean skipOnError;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  @javax.annotation.Nonnull
  private String target;

  public IpamsvcBulkCopyIPSpace() {
  }

  public IpamsvcBulkCopyIPSpace copyDhcpOptions(@javax.annotation.Nullable Boolean copyDhcpOptions) {
    this.copyDhcpOptions = copyDhcpOptions;
    return this;
  }

  /**
   * Indicates whether dhcp options for IPv4 should be copied or not when objects (_ipam/address_block_ and _ipam/subnet_ only) are copied.  Defaults to _false_.
   * @return copyDhcpOptions
   */
  @javax.annotation.Nullable
  public Boolean getCopyDhcpOptions() {
    return copyDhcpOptions;
  }

  public void setCopyDhcpOptions(@javax.annotation.Nullable Boolean copyDhcpOptions) {
    this.copyDhcpOptions = copyDhcpOptions;
  }


  public IpamsvcBulkCopyIPSpace copyObjects(@javax.annotation.Nonnull List<String> copyObjects) {
    this.copyObjects = copyObjects;
    return this;
  }

  public IpamsvcBulkCopyIPSpace addCopyObjectsItem(String copyObjectsItem) {
    if (this.copyObjects == null) {
      this.copyObjects = new ArrayList<>();
    }
    this.copyObjects.add(copyObjectsItem);
    return this;
  }

  /**
   * The resource identifier.
   * @return copyObjects
   */
  @javax.annotation.Nonnull
  public List<String> getCopyObjects() {
    return copyObjects;
  }

  public void setCopyObjects(@javax.annotation.Nonnull List<String> copyObjects) {
    this.copyObjects = copyObjects;
  }


  public IpamsvcBulkCopyIPSpace recursive(@javax.annotation.Nullable Boolean recursive) {
    this.recursive = recursive;
    return this;
  }

  /**
   * Indicates whether child objects should be copied or not.  Defaults to _false_.
   * @return recursive
   */
  @javax.annotation.Nullable
  public Boolean getRecursive() {
    return recursive;
  }

  public void setRecursive(@javax.annotation.Nullable Boolean recursive) {
    this.recursive = recursive;
  }


  public IpamsvcBulkCopyIPSpace retainChildCompartment(@javax.annotation.Nullable Boolean retainChildCompartment) {
    this.retainChildCompartment = retainChildCompartment;
    return this;
  }

  /**
   * Indicates whether the child objects are going to retain their access view, or inherit from the object to copy into.  Defaults to false
   * @return retainChildCompartment
   */
  @javax.annotation.Nullable
  public Boolean getRetainChildCompartment() {
    return retainChildCompartment;
  }

  public void setRetainChildCompartment(@javax.annotation.Nullable Boolean retainChildCompartment) {
    this.retainChildCompartment = retainChildCompartment;
  }


  public IpamsvcBulkCopyIPSpace skipOnError(@javax.annotation.Nullable Boolean skipOnError) {
    this.skipOnError = skipOnError;
    return this;
  }

  /**
   * Indicates whether copying should skip object in case of error and continue with next, or abort copying in case of error.  Defaults to _false_.
   * @return skipOnError
   */
  @javax.annotation.Nullable
  public Boolean getSkipOnError() {
    return skipOnError;
  }

  public void setSkipOnError(@javax.annotation.Nullable Boolean skipOnError) {
    this.skipOnError = skipOnError;
  }


  public IpamsvcBulkCopyIPSpace target(@javax.annotation.Nonnull String target) {
    this.target = target;
    return this;
  }

  /**
   * The resource identifier.
   * @return target
   */
  @javax.annotation.Nonnull
  public String getTarget() {
    return target;
  }

  public void setTarget(@javax.annotation.Nonnull String target) {
    this.target = target;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcBulkCopyIPSpace ipamsvcBulkCopyIPSpace = (IpamsvcBulkCopyIPSpace) o;
    return Objects.equals(this.copyDhcpOptions, ipamsvcBulkCopyIPSpace.copyDhcpOptions) &&
        Objects.equals(this.copyObjects, ipamsvcBulkCopyIPSpace.copyObjects) &&
        Objects.equals(this.recursive, ipamsvcBulkCopyIPSpace.recursive) &&
        Objects.equals(this.retainChildCompartment, ipamsvcBulkCopyIPSpace.retainChildCompartment) &&
        Objects.equals(this.skipOnError, ipamsvcBulkCopyIPSpace.skipOnError) &&
        Objects.equals(this.target, ipamsvcBulkCopyIPSpace.target);
  }

  @Override
  public int hashCode() {
    return Objects.hash(copyDhcpOptions, copyObjects, recursive, retainChildCompartment, skipOnError, target);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcBulkCopyIPSpace {\n");
    sb.append("    copyDhcpOptions: ").append(toIndentedString(copyDhcpOptions)).append("\n");
    sb.append("    copyObjects: ").append(toIndentedString(copyObjects)).append("\n");
    sb.append("    recursive: ").append(toIndentedString(recursive)).append("\n");
    sb.append("    retainChildCompartment: ").append(toIndentedString(retainChildCompartment)).append("\n");
    sb.append("    skipOnError: ").append(toIndentedString(skipOnError)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("copy_dhcp_options");
    openapiFields.add("copy_objects");
    openapiFields.add("recursive");
    openapiFields.add("retain_child_compartment");
    openapiFields.add("skip_on_error");
    openapiFields.add("target");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("copy_objects");
    openapiRequiredFields.add("target");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcBulkCopyIPSpace
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcBulkCopyIPSpace.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcBulkCopyIPSpace is not found in the empty JSON string", IpamsvcBulkCopyIPSpace.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcBulkCopyIPSpace.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcBulkCopyIPSpace` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IpamsvcBulkCopyIPSpace.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("copy_objects") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("copy_objects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `copy_objects` to be an array in the JSON string but got `%s`", jsonObj.get("copy_objects").toString()));
      }
      if (!jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcBulkCopyIPSpace.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcBulkCopyIPSpace' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcBulkCopyIPSpace> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcBulkCopyIPSpace.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcBulkCopyIPSpace>() {
           @Override
           public void write(JsonWriter out, IpamsvcBulkCopyIPSpace value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcBulkCopyIPSpace read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcBulkCopyIPSpace given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcBulkCopyIPSpace
   * @throws IOException if the JSON string is invalid with respect to IpamsvcBulkCopyIPSpace
   */
  public static IpamsvcBulkCopyIPSpace fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcBulkCopyIPSpace.class);
  }

  /**
   * Convert an instance of IpamsvcBulkCopyIPSpace to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

