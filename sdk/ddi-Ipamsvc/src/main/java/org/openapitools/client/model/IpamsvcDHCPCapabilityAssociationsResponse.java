/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IpamsvcAddressBlock;
import org.openapitools.client.model.IpamsvcIPSpace;
import org.openapitools.client.model.IpamsvcRange;
import org.openapitools.client.model.IpamsvcSubnet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response format to retrieve  __IPSpace__, __AddressBlock__, __Subnet__ and __Range__ associated with universal service DHCP capability.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcDHCPCapabilityAssociationsResponse {
  public static final String SERIALIZED_NAME_ADDRESS_BLOCKS = "address_blocks";
  @SerializedName(SERIALIZED_NAME_ADDRESS_BLOCKS)
  @javax.annotation.Nullable
  private List<IpamsvcAddressBlock> addressBlocks = new ArrayList<>();

  public static final String SERIALIZED_NAME_IP_SPACE = "ip_space";
  @SerializedName(SERIALIZED_NAME_IP_SPACE)
  @javax.annotation.Nullable
  private IpamsvcIPSpace ipSpace;

  public static final String SERIALIZED_NAME_RANGES = "ranges";
  @SerializedName(SERIALIZED_NAME_RANGES)
  @javax.annotation.Nullable
  private List<IpamsvcRange> ranges = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBNETS = "subnets";
  @SerializedName(SERIALIZED_NAME_SUBNETS)
  @javax.annotation.Nullable
  private List<IpamsvcSubnet> subnets = new ArrayList<>();

  public IpamsvcDHCPCapabilityAssociationsResponse() {
  }

  public IpamsvcDHCPCapabilityAssociationsResponse addressBlocks(@javax.annotation.Nullable List<IpamsvcAddressBlock> addressBlocks) {
    this.addressBlocks = addressBlocks;
    return this;
  }

  public IpamsvcDHCPCapabilityAssociationsResponse addAddressBlocksItem(IpamsvcAddressBlock addressBlocksItem) {
    if (this.addressBlocks == null) {
      this.addressBlocks = new ArrayList<>();
    }
    this.addressBlocks.add(addressBlocksItem);
    return this;
  }

  /**
   * The list of address blocks to which the associated subnets and ranges belong.
   * @return addressBlocks
   */
  @javax.annotation.Nullable
  public List<IpamsvcAddressBlock> getAddressBlocks() {
    return addressBlocks;
  }

  public void setAddressBlocks(@javax.annotation.Nullable List<IpamsvcAddressBlock> addressBlocks) {
    this.addressBlocks = addressBlocks;
  }


  public IpamsvcDHCPCapabilityAssociationsResponse ipSpace(@javax.annotation.Nullable IpamsvcIPSpace ipSpace) {
    this.ipSpace = ipSpace;
    return this;
  }

  /**
   * Get ipSpace
   * @return ipSpace
   */
  @javax.annotation.Nullable
  public IpamsvcIPSpace getIpSpace() {
    return ipSpace;
  }

  public void setIpSpace(@javax.annotation.Nullable IpamsvcIPSpace ipSpace) {
    this.ipSpace = ipSpace;
  }


  public IpamsvcDHCPCapabilityAssociationsResponse ranges(@javax.annotation.Nullable List<IpamsvcRange> ranges) {
    this.ranges = ranges;
    return this;
  }

  public IpamsvcDHCPCapabilityAssociationsResponse addRangesItem(IpamsvcRange rangesItem) {
    if (this.ranges == null) {
      this.ranges = new ArrayList<>();
    }
    this.ranges.add(rangesItem);
    return this;
  }

  /**
   * The list of associated ranges.
   * @return ranges
   */
  @javax.annotation.Nullable
  public List<IpamsvcRange> getRanges() {
    return ranges;
  }

  public void setRanges(@javax.annotation.Nullable List<IpamsvcRange> ranges) {
    this.ranges = ranges;
  }


  public IpamsvcDHCPCapabilityAssociationsResponse subnets(@javax.annotation.Nullable List<IpamsvcSubnet> subnets) {
    this.subnets = subnets;
    return this;
  }

  public IpamsvcDHCPCapabilityAssociationsResponse addSubnetsItem(IpamsvcSubnet subnetsItem) {
    if (this.subnets == null) {
      this.subnets = new ArrayList<>();
    }
    this.subnets.add(subnetsItem);
    return this;
  }

  /**
   * The list of associated subnets.
   * @return subnets
   */
  @javax.annotation.Nullable
  public List<IpamsvcSubnet> getSubnets() {
    return subnets;
  }

  public void setSubnets(@javax.annotation.Nullable List<IpamsvcSubnet> subnets) {
    this.subnets = subnets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcDHCPCapabilityAssociationsResponse ipamsvcDHCPCapabilityAssociationsResponse = (IpamsvcDHCPCapabilityAssociationsResponse) o;
    return Objects.equals(this.addressBlocks, ipamsvcDHCPCapabilityAssociationsResponse.addressBlocks) &&
        Objects.equals(this.ipSpace, ipamsvcDHCPCapabilityAssociationsResponse.ipSpace) &&
        Objects.equals(this.ranges, ipamsvcDHCPCapabilityAssociationsResponse.ranges) &&
        Objects.equals(this.subnets, ipamsvcDHCPCapabilityAssociationsResponse.subnets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressBlocks, ipSpace, ranges, subnets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcDHCPCapabilityAssociationsResponse {\n");
    sb.append("    addressBlocks: ").append(toIndentedString(addressBlocks)).append("\n");
    sb.append("    ipSpace: ").append(toIndentedString(ipSpace)).append("\n");
    sb.append("    ranges: ").append(toIndentedString(ranges)).append("\n");
    sb.append("    subnets: ").append(toIndentedString(subnets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address_blocks");
    openapiFields.add("ip_space");
    openapiFields.add("ranges");
    openapiFields.add("subnets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcDHCPCapabilityAssociationsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcDHCPCapabilityAssociationsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcDHCPCapabilityAssociationsResponse is not found in the empty JSON string", IpamsvcDHCPCapabilityAssociationsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcDHCPCapabilityAssociationsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcDHCPCapabilityAssociationsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("address_blocks") != null && !jsonObj.get("address_blocks").isJsonNull()) {
        JsonArray jsonArrayaddressBlocks = jsonObj.getAsJsonArray("address_blocks");
        if (jsonArrayaddressBlocks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("address_blocks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `address_blocks` to be an array in the JSON string but got `%s`", jsonObj.get("address_blocks").toString()));
          }

          // validate the optional field `address_blocks` (array)
          for (int i = 0; i < jsonArrayaddressBlocks.size(); i++) {
            IpamsvcAddressBlock.validateJsonElement(jsonArrayaddressBlocks.get(i));
          };
        }
      }
      // validate the optional field `ip_space`
      if (jsonObj.get("ip_space") != null && !jsonObj.get("ip_space").isJsonNull()) {
        IpamsvcIPSpace.validateJsonElement(jsonObj.get("ip_space"));
      }
      if (jsonObj.get("ranges") != null && !jsonObj.get("ranges").isJsonNull()) {
        JsonArray jsonArrayranges = jsonObj.getAsJsonArray("ranges");
        if (jsonArrayranges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ranges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ranges` to be an array in the JSON string but got `%s`", jsonObj.get("ranges").toString()));
          }

          // validate the optional field `ranges` (array)
          for (int i = 0; i < jsonArrayranges.size(); i++) {
            IpamsvcRange.validateJsonElement(jsonArrayranges.get(i));
          };
        }
      }
      if (jsonObj.get("subnets") != null && !jsonObj.get("subnets").isJsonNull()) {
        JsonArray jsonArraysubnets = jsonObj.getAsJsonArray("subnets");
        if (jsonArraysubnets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subnets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subnets` to be an array in the JSON string but got `%s`", jsonObj.get("subnets").toString()));
          }

          // validate the optional field `subnets` (array)
          for (int i = 0; i < jsonArraysubnets.size(); i++) {
            IpamsvcSubnet.validateJsonElement(jsonArraysubnets.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcDHCPCapabilityAssociationsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcDHCPCapabilityAssociationsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcDHCPCapabilityAssociationsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcDHCPCapabilityAssociationsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcDHCPCapabilityAssociationsResponse>() {
           @Override
           public void write(JsonWriter out, IpamsvcDHCPCapabilityAssociationsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcDHCPCapabilityAssociationsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcDHCPCapabilityAssociationsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcDHCPCapabilityAssociationsResponse
   * @throws IOException if the JSON string is invalid with respect to IpamsvcDHCPCapabilityAssociationsResponse
   */
  public static IpamsvcDHCPCapabilityAssociationsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcDHCPCapabilityAssociationsResponse.class);
  }

  /**
   * Convert an instance of IpamsvcDHCPCapabilityAssociationsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

