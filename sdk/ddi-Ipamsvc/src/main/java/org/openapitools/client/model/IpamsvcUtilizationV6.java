/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IpamsvcInteger128;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The __UtilizationV6__ object represents IPV6 address usage statistics for an object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcUtilizationV6 {
  public static final String SERIALIZED_NAME_ABANDONED = "abandoned";
  @SerializedName(SERIALIZED_NAME_ABANDONED)
  @javax.annotation.Nullable
  private IpamsvcInteger128 abandoned;

  public static final String SERIALIZED_NAME_DYNAMIC = "dynamic";
  @SerializedName(SERIALIZED_NAME_DYNAMIC)
  @javax.annotation.Nullable
  private IpamsvcInteger128 dynamic;

  public static final String SERIALIZED_NAME_STATIC = "static";
  @SerializedName(SERIALIZED_NAME_STATIC)
  @javax.annotation.Nullable
  private IpamsvcInteger128 _static;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  @javax.annotation.Nullable
  private IpamsvcInteger128 total;

  public static final String SERIALIZED_NAME_USED = "used";
  @SerializedName(SERIALIZED_NAME_USED)
  @javax.annotation.Nullable
  private IpamsvcInteger128 used;

  public IpamsvcUtilizationV6() {
  }

  public IpamsvcUtilizationV6 abandoned(@javax.annotation.Nullable IpamsvcInteger128 abandoned) {
    this.abandoned = abandoned;
    return this;
  }

  /**
   * Get abandoned
   * @return abandoned
   */
  @javax.annotation.Nullable
  public IpamsvcInteger128 getAbandoned() {
    return abandoned;
  }

  public void setAbandoned(@javax.annotation.Nullable IpamsvcInteger128 abandoned) {
    this.abandoned = abandoned;
  }


  public IpamsvcUtilizationV6 dynamic(@javax.annotation.Nullable IpamsvcInteger128 dynamic) {
    this.dynamic = dynamic;
    return this;
  }

  /**
   * Get dynamic
   * @return dynamic
   */
  @javax.annotation.Nullable
  public IpamsvcInteger128 getDynamic() {
    return dynamic;
  }

  public void setDynamic(@javax.annotation.Nullable IpamsvcInteger128 dynamic) {
    this.dynamic = dynamic;
  }


  public IpamsvcUtilizationV6 _static(@javax.annotation.Nullable IpamsvcInteger128 _static) {
    this._static = _static;
    return this;
  }

  /**
   * Get _static
   * @return _static
   */
  @javax.annotation.Nullable
  public IpamsvcInteger128 getStatic() {
    return _static;
  }

  public void setStatic(@javax.annotation.Nullable IpamsvcInteger128 _static) {
    this._static = _static;
  }


  public IpamsvcUtilizationV6 total(@javax.annotation.Nullable IpamsvcInteger128 total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public IpamsvcInteger128 getTotal() {
    return total;
  }

  public void setTotal(@javax.annotation.Nullable IpamsvcInteger128 total) {
    this.total = total;
  }


  public IpamsvcUtilizationV6 used(@javax.annotation.Nullable IpamsvcInteger128 used) {
    this.used = used;
    return this;
  }

  /**
   * Get used
   * @return used
   */
  @javax.annotation.Nullable
  public IpamsvcInteger128 getUsed() {
    return used;
  }

  public void setUsed(@javax.annotation.Nullable IpamsvcInteger128 used) {
    this.used = used;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcUtilizationV6 ipamsvcUtilizationV6 = (IpamsvcUtilizationV6) o;
    return Objects.equals(this.abandoned, ipamsvcUtilizationV6.abandoned) &&
        Objects.equals(this.dynamic, ipamsvcUtilizationV6.dynamic) &&
        Objects.equals(this._static, ipamsvcUtilizationV6._static) &&
        Objects.equals(this.total, ipamsvcUtilizationV6.total) &&
        Objects.equals(this.used, ipamsvcUtilizationV6.used);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abandoned, dynamic, _static, total, used);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcUtilizationV6 {\n");
    sb.append("    abandoned: ").append(toIndentedString(abandoned)).append("\n");
    sb.append("    dynamic: ").append(toIndentedString(dynamic)).append("\n");
    sb.append("    _static: ").append(toIndentedString(_static)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    used: ").append(toIndentedString(used)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abandoned");
    openapiFields.add("dynamic");
    openapiFields.add("static");
    openapiFields.add("total");
    openapiFields.add("used");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcUtilizationV6
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcUtilizationV6.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcUtilizationV6 is not found in the empty JSON string", IpamsvcUtilizationV6.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcUtilizationV6.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcUtilizationV6` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `abandoned`
      if (jsonObj.get("abandoned") != null && !jsonObj.get("abandoned").isJsonNull()) {
        IpamsvcInteger128.validateJsonElement(jsonObj.get("abandoned"));
      }
      // validate the optional field `dynamic`
      if (jsonObj.get("dynamic") != null && !jsonObj.get("dynamic").isJsonNull()) {
        IpamsvcInteger128.validateJsonElement(jsonObj.get("dynamic"));
      }
      // validate the optional field `static`
      if (jsonObj.get("static") != null && !jsonObj.get("static").isJsonNull()) {
        IpamsvcInteger128.validateJsonElement(jsonObj.get("static"));
      }
      // validate the optional field `total`
      if (jsonObj.get("total") != null && !jsonObj.get("total").isJsonNull()) {
        IpamsvcInteger128.validateJsonElement(jsonObj.get("total"));
      }
      // validate the optional field `used`
      if (jsonObj.get("used") != null && !jsonObj.get("used").isJsonNull()) {
        IpamsvcInteger128.validateJsonElement(jsonObj.get("used"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcUtilizationV6.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcUtilizationV6' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcUtilizationV6> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcUtilizationV6.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcUtilizationV6>() {
           @Override
           public void write(JsonWriter out, IpamsvcUtilizationV6 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcUtilizationV6 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcUtilizationV6 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcUtilizationV6
   * @throws IOException if the JSON string is invalid with respect to IpamsvcUtilizationV6
   */
  public static IpamsvcUtilizationV6 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcUtilizationV6.class);
  }

  /**
   * Convert an instance of IpamsvcUtilizationV6 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

