/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A __MacAddressItemUpload__ object uploads mac addresses to a large scale hardware filter.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcMacAddressItemUpload {
  public static final String SERIALIZED_NAME_APPEND = "append";
  @SerializedName(SERIALIZED_NAME_APPEND)
  @javax.annotation.Nullable
  private Boolean append;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  @javax.annotation.Nonnull
  private String content;

  public static final String SERIALIZED_NAME_HARDWARE_FILTER_ID = "hardware_filter_id";
  @SerializedName(SERIALIZED_NAME_HARDWARE_FILTER_ID)
  @javax.annotation.Nonnull
  private String hardwareFilterId;

  public IpamsvcMacAddressItemUpload() {
  }

  public IpamsvcMacAddressItemUpload append(@javax.annotation.Nullable Boolean append) {
    this.append = append;
    return this;
  }

  /**
   * If data needs to be appended or overwritten. Defaults to _true_.
   * @return append
   */
  @javax.annotation.Nullable
  public Boolean getAppend() {
    return append;
  }

  public void setAppend(@javax.annotation.Nullable Boolean append) {
    this.append = append;
  }


  public IpamsvcMacAddressItemUpload content(@javax.annotation.Nonnull String content) {
    this.content = content;
    return this;
  }

  /**
   * The content in plain text of the mac addresses to be uploaded to a large scale hardware filter.
   * @return content
   */
  @javax.annotation.Nonnull
  public String getContent() {
    return content;
  }

  public void setContent(@javax.annotation.Nonnull String content) {
    this.content = content;
  }


  public IpamsvcMacAddressItemUpload hardwareFilterId(@javax.annotation.Nonnull String hardwareFilterId) {
    this.hardwareFilterId = hardwareFilterId;
    return this;
  }

  /**
   * The resource identifier.
   * @return hardwareFilterId
   */
  @javax.annotation.Nonnull
  public String getHardwareFilterId() {
    return hardwareFilterId;
  }

  public void setHardwareFilterId(@javax.annotation.Nonnull String hardwareFilterId) {
    this.hardwareFilterId = hardwareFilterId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcMacAddressItemUpload ipamsvcMacAddressItemUpload = (IpamsvcMacAddressItemUpload) o;
    return Objects.equals(this.append, ipamsvcMacAddressItemUpload.append) &&
        Objects.equals(this.content, ipamsvcMacAddressItemUpload.content) &&
        Objects.equals(this.hardwareFilterId, ipamsvcMacAddressItemUpload.hardwareFilterId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(append, content, hardwareFilterId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcMacAddressItemUpload {\n");
    sb.append("    append: ").append(toIndentedString(append)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    hardwareFilterId: ").append(toIndentedString(hardwareFilterId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("append");
    openapiFields.add("content");
    openapiFields.add("hardware_filter_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("content");
    openapiRequiredFields.add("hardware_filter_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcMacAddressItemUpload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcMacAddressItemUpload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcMacAddressItemUpload is not found in the empty JSON string", IpamsvcMacAddressItemUpload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcMacAddressItemUpload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcMacAddressItemUpload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IpamsvcMacAddressItemUpload.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if (!jsonObj.get("hardware_filter_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hardware_filter_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hardware_filter_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcMacAddressItemUpload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcMacAddressItemUpload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcMacAddressItemUpload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcMacAddressItemUpload.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcMacAddressItemUpload>() {
           @Override
           public void write(JsonWriter out, IpamsvcMacAddressItemUpload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcMacAddressItemUpload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcMacAddressItemUpload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcMacAddressItemUpload
   * @throws IOException if the JSON string is invalid with respect to IpamsvcMacAddressItemUpload
   */
  public static IpamsvcMacAddressItemUpload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcMacAddressItemUpload.class);
  }

  /**
   * Convert an instance of IpamsvcMacAddressItemUpload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

