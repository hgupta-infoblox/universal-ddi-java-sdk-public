/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The __DHCPInfo__ object represents the DHCP information associated with an address object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcDHCPInfo {
  public static final String SERIALIZED_NAME_CLIENT_HOSTNAME = "client_hostname";
  @SerializedName(SERIALIZED_NAME_CLIENT_HOSTNAME)
  @javax.annotation.Nullable
  private String clientHostname;

  public static final String SERIALIZED_NAME_CLIENT_HWADDR = "client_hwaddr";
  @SerializedName(SERIALIZED_NAME_CLIENT_HWADDR)
  @javax.annotation.Nullable
  private String clientHwaddr;

  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  @javax.annotation.Nullable
  private String clientId;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  @javax.annotation.Nullable
  private OffsetDateTime end;

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  @javax.annotation.Nullable
  private String fingerprint;

  public static final String SERIALIZED_NAME_IAID = "iaid";
  @SerializedName(SERIALIZED_NAME_IAID)
  @javax.annotation.Nullable
  private Long iaid;

  public static final String SERIALIZED_NAME_LEASE_TYPE = "lease_type";
  @SerializedName(SERIALIZED_NAME_LEASE_TYPE)
  @javax.annotation.Nullable
  private String leaseType;

  public static final String SERIALIZED_NAME_PREFERRED_LIFETIME = "preferred_lifetime";
  @SerializedName(SERIALIZED_NAME_PREFERRED_LIFETIME)
  @javax.annotation.Nullable
  private OffsetDateTime preferredLifetime;

  public static final String SERIALIZED_NAME_REMAIN = "remain";
  @SerializedName(SERIALIZED_NAME_REMAIN)
  @javax.annotation.Nullable
  private Long remain;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  @javax.annotation.Nullable
  private OffsetDateTime start;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nullable
  private String state;

  public static final String SERIALIZED_NAME_STATE_TS = "state_ts";
  @SerializedName(SERIALIZED_NAME_STATE_TS)
  @javax.annotation.Nullable
  private OffsetDateTime stateTs;

  public IpamsvcDHCPInfo() {
  }

  public IpamsvcDHCPInfo(
     String clientHostname, 
     String clientHwaddr, 
     String clientId, 
     OffsetDateTime end, 
     String fingerprint, 
     Long iaid, 
     String leaseType, 
     OffsetDateTime preferredLifetime, 
     Long remain, 
     OffsetDateTime start, 
     String state, 
     OffsetDateTime stateTs
  ) {
    this();
    this.clientHostname = clientHostname;
    this.clientHwaddr = clientHwaddr;
    this.clientId = clientId;
    this.end = end;
    this.fingerprint = fingerprint;
    this.iaid = iaid;
    this.leaseType = leaseType;
    this.preferredLifetime = preferredLifetime;
    this.remain = remain;
    this.start = start;
    this.state = state;
    this.stateTs = stateTs;
  }

  /**
   * The DHCP host name associated with this client.
   * @return clientHostname
   */
  @javax.annotation.Nullable
  public String getClientHostname() {
    return clientHostname;
  }



  /**
   * The hardware address associated with this client.
   * @return clientHwaddr
   */
  @javax.annotation.Nullable
  public String getClientHwaddr() {
    return clientHwaddr;
  }



  /**
   * The ID associated with this client.
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }



  /**
   * The timestamp at which the _state_, when set to _leased_, will be changed to _free_.
   * @return end
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEnd() {
    return end;
  }



  /**
   * The DHCP fingerprint for the associated lease.
   * @return fingerprint
   */
  @javax.annotation.Nullable
  public String getFingerprint() {
    return fingerprint;
  }



  /**
   * Identity Association Identifier (IAID) of the lease. Applicable only for DHCPv6.
   * @return iaid
   */
  @javax.annotation.Nullable
  public Long getIaid() {
    return iaid;
  }



  /**
   * Lease type. Applicable only for address under DHCP control. The value can be empty for address not under DHCP control.  Valid values are: * _DHCPv6NonTemporaryAddress_: DHCPv6 non-temporary address (NA) * _DHCPv6TemporaryAddress_: DHCPv6 temporary address (TA) * _DHCPv6PrefixDelegation_: DHCPv6 prefix delegation (PD) * _DHCPv4_: DHCPv4 lease
   * @return leaseType
   */
  @javax.annotation.Nullable
  public String getLeaseType() {
    return leaseType;
  }



  /**
   * The length of time that a valid address is preferred (i.e., the time until deprecation). When the preferred lifetime expires, the address becomes deprecated on the client. It is still considered leased on the server. Applicable only for DHCPv6.
   * @return preferredLifetime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPreferredLifetime() {
    return preferredLifetime;
  }



  /**
   * The remaining time, in seconds, until which the _state_, when set to _leased_, will remain in that state.
   * @return remain
   */
  @javax.annotation.Nullable
  public Long getRemain() {
    return remain;
  }



  /**
   * The timestamp at which _state_ was first set to _leased_.
   * @return start
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStart() {
    return start;
  }



  /**
   * Indicates the status of this IP address from a DHCP protocol standpoint as:   * _none_: Address is not under DHCP control.   * _free_: Address is under DHCP control but has no lease currently assigned.   * _leased_: Address is under DHCP control and has a lease currently assigned. The lease details are contained in the matching _dhcp/lease_ resource.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }



  /**
   * The timestamp at which the _state_ was last reported.
   * @return stateTs
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStateTs() {
    return stateTs;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcDHCPInfo ipamsvcDHCPInfo = (IpamsvcDHCPInfo) o;
    return Objects.equals(this.clientHostname, ipamsvcDHCPInfo.clientHostname) &&
        Objects.equals(this.clientHwaddr, ipamsvcDHCPInfo.clientHwaddr) &&
        Objects.equals(this.clientId, ipamsvcDHCPInfo.clientId) &&
        Objects.equals(this.end, ipamsvcDHCPInfo.end) &&
        Objects.equals(this.fingerprint, ipamsvcDHCPInfo.fingerprint) &&
        Objects.equals(this.iaid, ipamsvcDHCPInfo.iaid) &&
        Objects.equals(this.leaseType, ipamsvcDHCPInfo.leaseType) &&
        Objects.equals(this.preferredLifetime, ipamsvcDHCPInfo.preferredLifetime) &&
        Objects.equals(this.remain, ipamsvcDHCPInfo.remain) &&
        Objects.equals(this.start, ipamsvcDHCPInfo.start) &&
        Objects.equals(this.state, ipamsvcDHCPInfo.state) &&
        Objects.equals(this.stateTs, ipamsvcDHCPInfo.stateTs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientHostname, clientHwaddr, clientId, end, fingerprint, iaid, leaseType, preferredLifetime, remain, start, state, stateTs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcDHCPInfo {\n");
    sb.append("    clientHostname: ").append(toIndentedString(clientHostname)).append("\n");
    sb.append("    clientHwaddr: ").append(toIndentedString(clientHwaddr)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    iaid: ").append(toIndentedString(iaid)).append("\n");
    sb.append("    leaseType: ").append(toIndentedString(leaseType)).append("\n");
    sb.append("    preferredLifetime: ").append(toIndentedString(preferredLifetime)).append("\n");
    sb.append("    remain: ").append(toIndentedString(remain)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateTs: ").append(toIndentedString(stateTs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("client_hostname");
    openapiFields.add("client_hwaddr");
    openapiFields.add("client_id");
    openapiFields.add("end");
    openapiFields.add("fingerprint");
    openapiFields.add("iaid");
    openapiFields.add("lease_type");
    openapiFields.add("preferred_lifetime");
    openapiFields.add("remain");
    openapiFields.add("start");
    openapiFields.add("state");
    openapiFields.add("state_ts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcDHCPInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcDHCPInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcDHCPInfo is not found in the empty JSON string", IpamsvcDHCPInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcDHCPInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcDHCPInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("client_hostname") != null && !jsonObj.get("client_hostname").isJsonNull()) && !jsonObj.get("client_hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_hostname").toString()));
      }
      if ((jsonObj.get("client_hwaddr") != null && !jsonObj.get("client_hwaddr").isJsonNull()) && !jsonObj.get("client_hwaddr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_hwaddr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_hwaddr").toString()));
      }
      if ((jsonObj.get("client_id") != null && !jsonObj.get("client_id").isJsonNull()) && !jsonObj.get("client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_id").toString()));
      }
      if ((jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull()) && !jsonObj.get("fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
      if ((jsonObj.get("lease_type") != null && !jsonObj.get("lease_type").isJsonNull()) && !jsonObj.get("lease_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lease_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lease_type").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcDHCPInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcDHCPInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcDHCPInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcDHCPInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcDHCPInfo>() {
           @Override
           public void write(JsonWriter out, IpamsvcDHCPInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcDHCPInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcDHCPInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcDHCPInfo
   * @throws IOException if the JSON string is invalid with respect to IpamsvcDHCPInfo
   */
  public static IpamsvcDHCPInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcDHCPInfo.class);
  }

  /**
   * Convert an instance of IpamsvcDHCPInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

