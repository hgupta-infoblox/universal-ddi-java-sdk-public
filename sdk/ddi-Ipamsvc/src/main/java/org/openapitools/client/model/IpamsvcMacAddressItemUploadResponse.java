/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IpamsvcMacAddressItemUploadResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcMacAddressItemUploadResponse {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_HARDWARE_FILTER_ID = "hardware_filter_id";
  @SerializedName(SERIALIZED_NAME_HARDWARE_FILTER_ID)
  @javax.annotation.Nullable
  private String hardwareFilterId;

  public static final String SERIALIZED_NAME_JOB_ID = "job_id";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  @javax.annotation.Nullable
  private String jobId;

  public IpamsvcMacAddressItemUploadResponse() {
  }

  public IpamsvcMacAddressItemUploadResponse description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the resource that was requested to be uploaded.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public IpamsvcMacAddressItemUploadResponse hardwareFilterId(@javax.annotation.Nullable String hardwareFilterId) {
    this.hardwareFilterId = hardwareFilterId;
    return this;
  }

  /**
   * The resource identifier.
   * @return hardwareFilterId
   */
  @javax.annotation.Nullable
  public String getHardwareFilterId() {
    return hardwareFilterId;
  }

  public void setHardwareFilterId(@javax.annotation.Nullable String hardwareFilterId) {
    this.hardwareFilterId = hardwareFilterId;
  }


  public IpamsvcMacAddressItemUploadResponse jobId(@javax.annotation.Nullable String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * An Unique Id to identify upload operation.
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(@javax.annotation.Nullable String jobId) {
    this.jobId = jobId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcMacAddressItemUploadResponse ipamsvcMacAddressItemUploadResponse = (IpamsvcMacAddressItemUploadResponse) o;
    return Objects.equals(this.description, ipamsvcMacAddressItemUploadResponse.description) &&
        Objects.equals(this.hardwareFilterId, ipamsvcMacAddressItemUploadResponse.hardwareFilterId) &&
        Objects.equals(this.jobId, ipamsvcMacAddressItemUploadResponse.jobId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, hardwareFilterId, jobId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcMacAddressItemUploadResponse {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    hardwareFilterId: ").append(toIndentedString(hardwareFilterId)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("hardware_filter_id");
    openapiFields.add("job_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcMacAddressItemUploadResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcMacAddressItemUploadResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcMacAddressItemUploadResponse is not found in the empty JSON string", IpamsvcMacAddressItemUploadResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcMacAddressItemUploadResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcMacAddressItemUploadResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("hardware_filter_id") != null && !jsonObj.get("hardware_filter_id").isJsonNull()) && !jsonObj.get("hardware_filter_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hardware_filter_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hardware_filter_id").toString()));
      }
      if ((jsonObj.get("job_id") != null && !jsonObj.get("job_id").isJsonNull()) && !jsonObj.get("job_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcMacAddressItemUploadResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcMacAddressItemUploadResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcMacAddressItemUploadResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcMacAddressItemUploadResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcMacAddressItemUploadResponse>() {
           @Override
           public void write(JsonWriter out, IpamsvcMacAddressItemUploadResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcMacAddressItemUploadResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcMacAddressItemUploadResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcMacAddressItemUploadResponse
   * @throws IOException if the JSON string is invalid with respect to IpamsvcMacAddressItemUploadResponse
   */
  public static IpamsvcMacAddressItemUploadResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcMacAddressItemUploadResponse.class);
  }

  /**
   * Convert an instance of IpamsvcMacAddressItemUploadResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

