/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An __OptionFilterRule__ object (_dhcp/option_filter_rule_) represents a filter rule to match a DHCP client.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcOptionFilterRule {
  public static final String SERIALIZED_NAME_COMPARE = "compare";
  @SerializedName(SERIALIZED_NAME_COMPARE)
  @javax.annotation.Nonnull
  private String compare;

  public static final String SERIALIZED_NAME_OPTION_CODE = "option_code";
  @SerializedName(SERIALIZED_NAME_OPTION_CODE)
  @javax.annotation.Nonnull
  private String optionCode;

  public static final String SERIALIZED_NAME_OPTION_VALUE = "option_value";
  @SerializedName(SERIALIZED_NAME_OPTION_VALUE)
  @javax.annotation.Nullable
  private String optionValue;

  public static final String SERIALIZED_NAME_SUBSTRING_OFFSET = "substring_offset";
  @SerializedName(SERIALIZED_NAME_SUBSTRING_OFFSET)
  @javax.annotation.Nullable
  private Long substringOffset;

  public IpamsvcOptionFilterRule() {
  }

  public IpamsvcOptionFilterRule compare(@javax.annotation.Nonnull String compare) {
    this.compare = compare;
    return this;
  }

  /**
   * Indicates how to compare the _option_value_ to the client option.  Success by comparison:  * _equals_: value and client option are the same,  * _not_equals_: value and client option are not the same,  * _exists_: client option exists,  * _not_exists_: client option does not exist,  * _text_substring_: value is the specified substring of the option,  * _not_text_substring_: value is not the specified substring of the option.  * _hex_substring_: value is the specified hexadecimal substring of the option,  * _not_hex_substring_: value is not the specified hexadecimal substring of the option.
   * @return compare
   */
  @javax.annotation.Nonnull
  public String getCompare() {
    return compare;
  }

  public void setCompare(@javax.annotation.Nonnull String compare) {
    this.compare = compare;
  }


  public IpamsvcOptionFilterRule optionCode(@javax.annotation.Nonnull String optionCode) {
    this.optionCode = optionCode;
    return this;
  }

  /**
   * The resource identifier.
   * @return optionCode
   */
  @javax.annotation.Nonnull
  public String getOptionCode() {
    return optionCode;
  }

  public void setOptionCode(@javax.annotation.Nonnull String optionCode) {
    this.optionCode = optionCode;
  }


  public IpamsvcOptionFilterRule optionValue(@javax.annotation.Nullable String optionValue) {
    this.optionValue = optionValue;
    return this;
  }

  /**
   * The value to match against.
   * @return optionValue
   */
  @javax.annotation.Nullable
  public String getOptionValue() {
    return optionValue;
  }

  public void setOptionValue(@javax.annotation.Nullable String optionValue) {
    this.optionValue = optionValue;
  }


  public IpamsvcOptionFilterRule substringOffset(@javax.annotation.Nullable Long substringOffset) {
    this.substringOffset = substringOffset;
    return this;
  }

  /**
   * The offset where the substring match starts. This is used only if comparing the _option_value_ using any of the substring modes.
   * @return substringOffset
   */
  @javax.annotation.Nullable
  public Long getSubstringOffset() {
    return substringOffset;
  }

  public void setSubstringOffset(@javax.annotation.Nullable Long substringOffset) {
    this.substringOffset = substringOffset;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcOptionFilterRule ipamsvcOptionFilterRule = (IpamsvcOptionFilterRule) o;
    return Objects.equals(this.compare, ipamsvcOptionFilterRule.compare) &&
        Objects.equals(this.optionCode, ipamsvcOptionFilterRule.optionCode) &&
        Objects.equals(this.optionValue, ipamsvcOptionFilterRule.optionValue) &&
        Objects.equals(this.substringOffset, ipamsvcOptionFilterRule.substringOffset);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compare, optionCode, optionValue, substringOffset);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcOptionFilterRule {\n");
    sb.append("    compare: ").append(toIndentedString(compare)).append("\n");
    sb.append("    optionCode: ").append(toIndentedString(optionCode)).append("\n");
    sb.append("    optionValue: ").append(toIndentedString(optionValue)).append("\n");
    sb.append("    substringOffset: ").append(toIndentedString(substringOffset)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("compare");
    openapiFields.add("option_code");
    openapiFields.add("option_value");
    openapiFields.add("substring_offset");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("compare");
    openapiRequiredFields.add("option_code");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcOptionFilterRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcOptionFilterRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcOptionFilterRule is not found in the empty JSON string", IpamsvcOptionFilterRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcOptionFilterRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcOptionFilterRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IpamsvcOptionFilterRule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("compare").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compare` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compare").toString()));
      }
      if (!jsonObj.get("option_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `option_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("option_code").toString()));
      }
      if ((jsonObj.get("option_value") != null && !jsonObj.get("option_value").isJsonNull()) && !jsonObj.get("option_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `option_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("option_value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcOptionFilterRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcOptionFilterRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcOptionFilterRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcOptionFilterRule.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcOptionFilterRule>() {
           @Override
           public void write(JsonWriter out, IpamsvcOptionFilterRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcOptionFilterRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcOptionFilterRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcOptionFilterRule
   * @throws IOException if the JSON string is invalid with respect to IpamsvcOptionFilterRule
   */
  public static IpamsvcOptionFilterRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcOptionFilterRule.class);
  }

  /**
   * Convert an instance of IpamsvcOptionFilterRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

