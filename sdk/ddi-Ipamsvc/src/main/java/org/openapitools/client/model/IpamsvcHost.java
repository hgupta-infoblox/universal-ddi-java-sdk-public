/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IpamsvcHostAssociatedServer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A DHCP __Host__ (_dhcp/host_) object associates a DHCP Config Profile with an on-prem host.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcHost {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nullable
  private String address;

  public static final String SERIALIZED_NAME_ANYCAST_ADDRESSES = "anycast_addresses";
  @SerializedName(SERIALIZED_NAME_ANYCAST_ADDRESSES)
  @javax.annotation.Nullable
  private List<String> anycastAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASSOCIATED_SERVER = "associated_server";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_SERVER)
  @javax.annotation.Nullable
  private IpamsvcHostAssociatedServer associatedServer;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_CURRENT_VERSION = "current_version";
  @SerializedName(SERIALIZED_NAME_CURRENT_VERSION)
  @javax.annotation.Nullable
  private String currentVersion;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_IP_SPACE = "ip_space";
  @SerializedName(SERIALIZED_NAME_IP_SPACE)
  @javax.annotation.Nullable
  private String ipSpace;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_OPHID = "ophid";
  @SerializedName(SERIALIZED_NAME_OPHID)
  @javax.annotation.Nullable
  private String ophid;

  public static final String SERIALIZED_NAME_PROVIDER_ID = "provider_id";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ID)
  @javax.annotation.Nullable
  private String providerId;

  public static final String SERIALIZED_NAME_SERVER = "server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  @javax.annotation.Nullable
  private String server;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Object tags;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public IpamsvcHost() {
  }

  public IpamsvcHost(
     String address, 
     List<String> anycastAddresses, 
     String comment, 
     String currentVersion, 
     String id, 
     String name, 
     String ophid, 
     String providerId, 
     String type
  ) {
    this();
    this.address = address;
    this.anycastAddresses = anycastAddresses;
    this.comment = comment;
    this.currentVersion = currentVersion;
    this.id = id;
    this.name = name;
    this.ophid = ophid;
    this.providerId = providerId;
    this.type = type;
  }

  /**
   * The primary IP address of the on-prem host.
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }



  /**
   * Anycast address configured to the host. Order is not significant.
   * @return anycastAddresses
   */
  @javax.annotation.Nullable
  public List<String> getAnycastAddresses() {
    return anycastAddresses;
  }



  public IpamsvcHost associatedServer(@javax.annotation.Nullable IpamsvcHostAssociatedServer associatedServer) {
    this.associatedServer = associatedServer;
    return this;
  }

  /**
   * Get associatedServer
   * @return associatedServer
   */
  @javax.annotation.Nullable
  public IpamsvcHostAssociatedServer getAssociatedServer() {
    return associatedServer;
  }

  public void setAssociatedServer(@javax.annotation.Nullable IpamsvcHostAssociatedServer associatedServer) {
    this.associatedServer = associatedServer;
  }


  /**
   * The description for the on-prem host.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }



  /**
   * Current dhcp application version of the host.
   * @return currentVersion
   */
  @javax.annotation.Nullable
  public String getCurrentVersion() {
    return currentVersion;
  }



  /**
   * The resource identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public IpamsvcHost ipSpace(@javax.annotation.Nullable String ipSpace) {
    this.ipSpace = ipSpace;
    return this;
  }

  /**
   * The resource identifier.
   * @return ipSpace
   */
  @javax.annotation.Nullable
  public String getIpSpace() {
    return ipSpace;
  }

  public void setIpSpace(@javax.annotation.Nullable String ipSpace) {
    this.ipSpace = ipSpace;
  }


  /**
   * The display name of the on-prem host.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * The on-prem host ID.
   * @return ophid
   */
  @javax.annotation.Nullable
  public String getOphid() {
    return ophid;
  }



  /**
   * External provider identifier.
   * @return providerId
   */
  @javax.annotation.Nullable
  public String getProviderId() {
    return providerId;
  }



  public IpamsvcHost server(@javax.annotation.Nullable String server) {
    this.server = server;
    return this;
  }

  /**
   * The resource identifier.
   * @return server
   */
  @javax.annotation.Nullable
  public String getServer() {
    return server;
  }

  public void setServer(@javax.annotation.Nullable String server) {
    this.server = server;
  }


  public IpamsvcHost tags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
    return this;
  }

  /**
   * The tags of the on-prem host in JSON format.
   * @return tags
   */
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
  }


  /**
   * Defines the type of host. Allowed values:  * _bloxone_ddi_: host type is BloxOne DDI,  * _microsoft_azure_: host type is Microsoft Azure,  * _amazon_web_service_: host type is Amazon Web Services.  * _microsoft_active_directory_: host type is Microsoft Active Directory.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcHost ipamsvcHost = (IpamsvcHost) o;
    return Objects.equals(this.address, ipamsvcHost.address) &&
        Objects.equals(this.anycastAddresses, ipamsvcHost.anycastAddresses) &&
        Objects.equals(this.associatedServer, ipamsvcHost.associatedServer) &&
        Objects.equals(this.comment, ipamsvcHost.comment) &&
        Objects.equals(this.currentVersion, ipamsvcHost.currentVersion) &&
        Objects.equals(this.id, ipamsvcHost.id) &&
        Objects.equals(this.ipSpace, ipamsvcHost.ipSpace) &&
        Objects.equals(this.name, ipamsvcHost.name) &&
        Objects.equals(this.ophid, ipamsvcHost.ophid) &&
        Objects.equals(this.providerId, ipamsvcHost.providerId) &&
        Objects.equals(this.server, ipamsvcHost.server) &&
        Objects.equals(this.tags, ipamsvcHost.tags) &&
        Objects.equals(this.type, ipamsvcHost.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, anycastAddresses, associatedServer, comment, currentVersion, id, ipSpace, name, ophid, providerId, server, tags, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcHost {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    anycastAddresses: ").append(toIndentedString(anycastAddresses)).append("\n");
    sb.append("    associatedServer: ").append(toIndentedString(associatedServer)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    currentVersion: ").append(toIndentedString(currentVersion)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ipSpace: ").append(toIndentedString(ipSpace)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ophid: ").append(toIndentedString(ophid)).append("\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("anycast_addresses");
    openapiFields.add("associated_server");
    openapiFields.add("comment");
    openapiFields.add("current_version");
    openapiFields.add("id");
    openapiFields.add("ip_space");
    openapiFields.add("name");
    openapiFields.add("ophid");
    openapiFields.add("provider_id");
    openapiFields.add("server");
    openapiFields.add("tags");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcHost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcHost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcHost is not found in the empty JSON string", IpamsvcHost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcHost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcHost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("anycast_addresses") != null && !jsonObj.get("anycast_addresses").isJsonNull() && !jsonObj.get("anycast_addresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `anycast_addresses` to be an array in the JSON string but got `%s`", jsonObj.get("anycast_addresses").toString()));
      }
      // validate the optional field `associated_server`
      if (jsonObj.get("associated_server") != null && !jsonObj.get("associated_server").isJsonNull()) {
        IpamsvcHostAssociatedServer.validateJsonElement(jsonObj.get("associated_server"));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("current_version") != null && !jsonObj.get("current_version").isJsonNull()) && !jsonObj.get("current_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_version").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("ip_space") != null && !jsonObj.get("ip_space").isJsonNull()) && !jsonObj.get("ip_space").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_space` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_space").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("ophid") != null && !jsonObj.get("ophid").isJsonNull()) && !jsonObj.get("ophid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ophid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ophid").toString()));
      }
      if ((jsonObj.get("provider_id") != null && !jsonObj.get("provider_id").isJsonNull()) && !jsonObj.get("provider_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_id").toString()));
      }
      if ((jsonObj.get("server") != null && !jsonObj.get("server").isJsonNull()) && !jsonObj.get("server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcHost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcHost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcHost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcHost.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcHost>() {
           @Override
           public void write(JsonWriter out, IpamsvcHost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcHost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcHost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcHost
   * @throws IOException if the JSON string is invalid with respect to IpamsvcHost
   */
  public static IpamsvcHost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcHost.class);
  }

  /**
   * Convert an instance of IpamsvcHost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

