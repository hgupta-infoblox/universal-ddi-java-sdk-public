/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The __ASMConfig__ object represents Automated Scope Management configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcASMConfig {
  public static final String SERIALIZED_NAME_ASM_THRESHOLD = "asm_threshold";
  @SerializedName(SERIALIZED_NAME_ASM_THRESHOLD)
  @javax.annotation.Nullable
  private Long asmThreshold;

  public static final String SERIALIZED_NAME_ENABLE = "enable";
  @SerializedName(SERIALIZED_NAME_ENABLE)
  @javax.annotation.Nullable
  private Boolean enable;

  public static final String SERIALIZED_NAME_ENABLE_NOTIFICATION = "enable_notification";
  @SerializedName(SERIALIZED_NAME_ENABLE_NOTIFICATION)
  @javax.annotation.Nullable
  private Boolean enableNotification;

  public static final String SERIALIZED_NAME_FORECAST_PERIOD = "forecast_period";
  @SerializedName(SERIALIZED_NAME_FORECAST_PERIOD)
  @javax.annotation.Nullable
  private Long forecastPeriod;

  public static final String SERIALIZED_NAME_GROWTH_FACTOR = "growth_factor";
  @SerializedName(SERIALIZED_NAME_GROWTH_FACTOR)
  @javax.annotation.Nullable
  private Long growthFactor;

  public static final String SERIALIZED_NAME_GROWTH_TYPE = "growth_type";
  @SerializedName(SERIALIZED_NAME_GROWTH_TYPE)
  @javax.annotation.Nullable
  private String growthType;

  public static final String SERIALIZED_NAME_HISTORY = "history";
  @SerializedName(SERIALIZED_NAME_HISTORY)
  @javax.annotation.Nullable
  private Long history;

  public static final String SERIALIZED_NAME_MIN_TOTAL = "min_total";
  @SerializedName(SERIALIZED_NAME_MIN_TOTAL)
  @javax.annotation.Nullable
  private Long minTotal;

  public static final String SERIALIZED_NAME_MIN_UNUSED = "min_unused";
  @SerializedName(SERIALIZED_NAME_MIN_UNUSED)
  @javax.annotation.Nullable
  private Long minUnused;

  public static final String SERIALIZED_NAME_REENABLE_DATE = "reenable_date";
  @SerializedName(SERIALIZED_NAME_REENABLE_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime reenableDate;

  public IpamsvcASMConfig() {
  }

  public IpamsvcASMConfig asmThreshold(@javax.annotation.Nullable Long asmThreshold) {
    this.asmThreshold = asmThreshold;
    return this;
  }

  /**
   * ASM shows the number of addresses forecast to be used _forecast_period_ days in the future, if it is greater than _asm_threshold_ percent * _dhcp_total_ (see _dhcp_utilization_) then the subnet is flagged.
   * @return asmThreshold
   */
  @javax.annotation.Nullable
  public Long getAsmThreshold() {
    return asmThreshold;
  }

  public void setAsmThreshold(@javax.annotation.Nullable Long asmThreshold) {
    this.asmThreshold = asmThreshold;
  }


  public IpamsvcASMConfig enable(@javax.annotation.Nullable Boolean enable) {
    this.enable = enable;
    return this;
  }

  /**
   * Indicates if Automated Scope Management is enabled.
   * @return enable
   */
  @javax.annotation.Nullable
  public Boolean getEnable() {
    return enable;
  }

  public void setEnable(@javax.annotation.Nullable Boolean enable) {
    this.enable = enable;
  }


  public IpamsvcASMConfig enableNotification(@javax.annotation.Nullable Boolean enableNotification) {
    this.enableNotification = enableNotification;
    return this;
  }

  /**
   * Indicates if ASM should send notifications to the user.
   * @return enableNotification
   */
  @javax.annotation.Nullable
  public Boolean getEnableNotification() {
    return enableNotification;
  }

  public void setEnableNotification(@javax.annotation.Nullable Boolean enableNotification) {
    this.enableNotification = enableNotification;
  }


  public IpamsvcASMConfig forecastPeriod(@javax.annotation.Nullable Long forecastPeriod) {
    this.forecastPeriod = forecastPeriod;
    return this;
  }

  /**
   * The forecast period in days.
   * @return forecastPeriod
   */
  @javax.annotation.Nullable
  public Long getForecastPeriod() {
    return forecastPeriod;
  }

  public void setForecastPeriod(@javax.annotation.Nullable Long forecastPeriod) {
    this.forecastPeriod = forecastPeriod;
  }


  public IpamsvcASMConfig growthFactor(@javax.annotation.Nullable Long growthFactor) {
    this.growthFactor = growthFactor;
    return this;
  }

  /**
   * Indicates the growth in the number or percentage of IP addresses.
   * @return growthFactor
   */
  @javax.annotation.Nullable
  public Long getGrowthFactor() {
    return growthFactor;
  }

  public void setGrowthFactor(@javax.annotation.Nullable Long growthFactor) {
    this.growthFactor = growthFactor;
  }


  public IpamsvcASMConfig growthType(@javax.annotation.Nullable String growthType) {
    this.growthType = growthType;
    return this;
  }

  /**
   * The type of factor to use: _percent_ or _count_.
   * @return growthType
   */
  @javax.annotation.Nullable
  public String getGrowthType() {
    return growthType;
  }

  public void setGrowthType(@javax.annotation.Nullable String growthType) {
    this.growthType = growthType;
  }


  public IpamsvcASMConfig history(@javax.annotation.Nullable Long history) {
    this.history = history;
    return this;
  }

  /**
   * The minimum amount of history needed before ASM can run on this subnet.
   * @return history
   */
  @javax.annotation.Nullable
  public Long getHistory() {
    return history;
  }

  public void setHistory(@javax.annotation.Nullable Long history) {
    this.history = history;
  }


  public IpamsvcASMConfig minTotal(@javax.annotation.Nullable Long minTotal) {
    this.minTotal = minTotal;
    return this;
  }

  /**
   * The minimum size of range needed for ASM to run on this subnet.
   * @return minTotal
   */
  @javax.annotation.Nullable
  public Long getMinTotal() {
    return minTotal;
  }

  public void setMinTotal(@javax.annotation.Nullable Long minTotal) {
    this.minTotal = minTotal;
  }


  public IpamsvcASMConfig minUnused(@javax.annotation.Nullable Long minUnused) {
    this.minUnused = minUnused;
    return this;
  }

  /**
   * The minimum percentage of addresses that must be available outside of the DHCP ranges and fixed addresses when making a suggested change..
   * @return minUnused
   */
  @javax.annotation.Nullable
  public Long getMinUnused() {
    return minUnused;
  }

  public void setMinUnused(@javax.annotation.Nullable Long minUnused) {
    this.minUnused = minUnused;
  }


  public IpamsvcASMConfig reenableDate(@javax.annotation.Nullable OffsetDateTime reenableDate) {
    this.reenableDate = reenableDate;
    return this;
  }

  /**
   * Get reenableDate
   * @return reenableDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReenableDate() {
    return reenableDate;
  }

  public void setReenableDate(@javax.annotation.Nullable OffsetDateTime reenableDate) {
    this.reenableDate = reenableDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcASMConfig ipamsvcASMConfig = (IpamsvcASMConfig) o;
    return Objects.equals(this.asmThreshold, ipamsvcASMConfig.asmThreshold) &&
        Objects.equals(this.enable, ipamsvcASMConfig.enable) &&
        Objects.equals(this.enableNotification, ipamsvcASMConfig.enableNotification) &&
        Objects.equals(this.forecastPeriod, ipamsvcASMConfig.forecastPeriod) &&
        Objects.equals(this.growthFactor, ipamsvcASMConfig.growthFactor) &&
        Objects.equals(this.growthType, ipamsvcASMConfig.growthType) &&
        Objects.equals(this.history, ipamsvcASMConfig.history) &&
        Objects.equals(this.minTotal, ipamsvcASMConfig.minTotal) &&
        Objects.equals(this.minUnused, ipamsvcASMConfig.minUnused) &&
        Objects.equals(this.reenableDate, ipamsvcASMConfig.reenableDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asmThreshold, enable, enableNotification, forecastPeriod, growthFactor, growthType, history, minTotal, minUnused, reenableDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcASMConfig {\n");
    sb.append("    asmThreshold: ").append(toIndentedString(asmThreshold)).append("\n");
    sb.append("    enable: ").append(toIndentedString(enable)).append("\n");
    sb.append("    enableNotification: ").append(toIndentedString(enableNotification)).append("\n");
    sb.append("    forecastPeriod: ").append(toIndentedString(forecastPeriod)).append("\n");
    sb.append("    growthFactor: ").append(toIndentedString(growthFactor)).append("\n");
    sb.append("    growthType: ").append(toIndentedString(growthType)).append("\n");
    sb.append("    history: ").append(toIndentedString(history)).append("\n");
    sb.append("    minTotal: ").append(toIndentedString(minTotal)).append("\n");
    sb.append("    minUnused: ").append(toIndentedString(minUnused)).append("\n");
    sb.append("    reenableDate: ").append(toIndentedString(reenableDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asm_threshold");
    openapiFields.add("enable");
    openapiFields.add("enable_notification");
    openapiFields.add("forecast_period");
    openapiFields.add("growth_factor");
    openapiFields.add("growth_type");
    openapiFields.add("history");
    openapiFields.add("min_total");
    openapiFields.add("min_unused");
    openapiFields.add("reenable_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcASMConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcASMConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcASMConfig is not found in the empty JSON string", IpamsvcASMConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcASMConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcASMConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("growth_type") != null && !jsonObj.get("growth_type").isJsonNull()) && !jsonObj.get("growth_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `growth_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("growth_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcASMConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcASMConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcASMConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcASMConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcASMConfig>() {
           @Override
           public void write(JsonWriter out, IpamsvcASMConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcASMConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcASMConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcASMConfig
   * @throws IOException if the JSON string is invalid with respect to IpamsvcASMConfig
   */
  public static IpamsvcASMConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcASMConfig.class);
  }

  /**
   * Convert an instance of IpamsvcASMConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

