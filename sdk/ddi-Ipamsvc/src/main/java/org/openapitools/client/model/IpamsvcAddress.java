/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IpamsvcDHCPInfo;
import org.openapitools.client.model.IpamsvcName;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An __Address__ object (_ipam/address_) represents any single IP address within a given IP space.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcAddress {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nonnull
  private String address;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_COMPARTMENT_ID = "compartment_id";
  @SerializedName(SERIALIZED_NAME_COMPARTMENT_ID)
  @javax.annotation.Nullable
  private String compartmentId;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DHCP_INFO = "dhcp_info";
  @SerializedName(SERIALIZED_NAME_DHCP_INFO)
  @javax.annotation.Nullable
  private IpamsvcDHCPInfo dhcpInfo;

  public static final String SERIALIZED_NAME_DISABLE_DHCP = "disable_dhcp";
  @SerializedName(SERIALIZED_NAME_DISABLE_DHCP)
  @javax.annotation.Nullable
  private Boolean disableDhcp;

  public static final String SERIALIZED_NAME_DISCOVERY_ATTRS = "discovery_attrs";
  @SerializedName(SERIALIZED_NAME_DISCOVERY_ATTRS)
  @javax.annotation.Nullable
  private Object discoveryAttrs;

  public static final String SERIALIZED_NAME_DISCOVERY_METADATA = "discovery_metadata";
  @SerializedName(SERIALIZED_NAME_DISCOVERY_METADATA)
  @javax.annotation.Nullable
  private Object discoveryMetadata;

  public static final String SERIALIZED_NAME_EXTERNAL_KEYS = "external_keys";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_KEYS)
  @javax.annotation.Nullable
  private Object externalKeys;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  @javax.annotation.Nullable
  private String host;

  public static final String SERIALIZED_NAME_HWADDR = "hwaddr";
  @SerializedName(SERIALIZED_NAME_HWADDR)
  @javax.annotation.Nullable
  private String hwaddr;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_INTERFACE = "interface";
  @SerializedName(SERIALIZED_NAME_INTERFACE)
  @javax.annotation.Nullable
  private String _interface;

  public static final String SERIALIZED_NAME_NAMES = "names";
  @SerializedName(SERIALIZED_NAME_NAMES)
  @javax.annotation.Nullable
  private List<IpamsvcName> names = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  @javax.annotation.Nullable
  private String parent;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  @javax.annotation.Nullable
  private String protocol;

  public static final String SERIALIZED_NAME_RANGE = "range";
  @SerializedName(SERIALIZED_NAME_RANGE)
  @javax.annotation.Nullable
  private String range;

  public static final String SERIALIZED_NAME_SPACE = "space";
  @SerializedName(SERIALIZED_NAME_SPACE)
  @javax.annotation.Nonnull
  private String space;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nullable
  private String state;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Object tags;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_USAGE = "usage";
  @SerializedName(SERIALIZED_NAME_USAGE)
  @javax.annotation.Nullable
  private List<String> usage = new ArrayList<>();

  public IpamsvcAddress() {
  }

  public IpamsvcAddress(
     String compartmentId, 
     OffsetDateTime createdAt, 
     Boolean disableDhcp, 
     String id, 
     String protocol, 
     String state, 
     OffsetDateTime updatedAt, 
     List<String> usage
  ) {
    this();
    this.compartmentId = compartmentId;
    this.createdAt = createdAt;
    this.disableDhcp = disableDhcp;
    this.id = id;
    this.protocol = protocol;
    this.state = state;
    this.updatedAt = updatedAt;
    this.usage = usage;
  }

  public IpamsvcAddress address(@javax.annotation.Nonnull String address) {
    this.address = address;
    return this;
  }

  /**
   * The address in form \&quot;a.b.c.d\&quot;.
   * @return address
   */
  @javax.annotation.Nonnull
  public String getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nonnull String address) {
    this.address = address;
  }


  public IpamsvcAddress comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * The description for the address object. May contain 0 to 1024 characters. Can include UTF-8.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  /**
   * The access view associated with the object. If no access view is associated with the object, the value defaults to empty.
   * @return compartmentId
   */
  @javax.annotation.Nullable
  public String getCompartmentId() {
    return compartmentId;
  }



  /**
   * Time when the object has been created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public IpamsvcAddress dhcpInfo(@javax.annotation.Nullable IpamsvcDHCPInfo dhcpInfo) {
    this.dhcpInfo = dhcpInfo;
    return this;
  }

  /**
   * Get dhcpInfo
   * @return dhcpInfo
   */
  @javax.annotation.Nullable
  public IpamsvcDHCPInfo getDhcpInfo() {
    return dhcpInfo;
  }

  public void setDhcpInfo(@javax.annotation.Nullable IpamsvcDHCPInfo dhcpInfo) {
    this.dhcpInfo = dhcpInfo;
  }


  /**
   * Read only. Represent the value of the same field in the associated _dhcp/fixed_address_ object.
   * @return disableDhcp
   */
  @javax.annotation.Nullable
  public Boolean getDisableDhcp() {
    return disableDhcp;
  }



  public IpamsvcAddress discoveryAttrs(@javax.annotation.Nullable Object discoveryAttrs) {
    this.discoveryAttrs = discoveryAttrs;
    return this;
  }

  /**
   * The discovery attributes for this address in JSON format.
   * @return discoveryAttrs
   */
  @javax.annotation.Nullable
  public Object getDiscoveryAttrs() {
    return discoveryAttrs;
  }

  public void setDiscoveryAttrs(@javax.annotation.Nullable Object discoveryAttrs) {
    this.discoveryAttrs = discoveryAttrs;
  }


  public IpamsvcAddress discoveryMetadata(@javax.annotation.Nullable Object discoveryMetadata) {
    this.discoveryMetadata = discoveryMetadata;
    return this;
  }

  /**
   * The discovery metadata for this address in JSON format.
   * @return discoveryMetadata
   */
  @javax.annotation.Nullable
  public Object getDiscoveryMetadata() {
    return discoveryMetadata;
  }

  public void setDiscoveryMetadata(@javax.annotation.Nullable Object discoveryMetadata) {
    this.discoveryMetadata = discoveryMetadata;
  }


  public IpamsvcAddress externalKeys(@javax.annotation.Nullable Object externalKeys) {
    this.externalKeys = externalKeys;
    return this;
  }

  /**
   * The external keys (source key) for this address in JSON format.
   * @return externalKeys
   */
  @javax.annotation.Nullable
  public Object getExternalKeys() {
    return externalKeys;
  }

  public void setExternalKeys(@javax.annotation.Nullable Object externalKeys) {
    this.externalKeys = externalKeys;
  }


  public IpamsvcAddress host(@javax.annotation.Nullable String host) {
    this.host = host;
    return this;
  }

  /**
   * The resource identifier.
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }

  public void setHost(@javax.annotation.Nullable String host) {
    this.host = host;
  }


  public IpamsvcAddress hwaddr(@javax.annotation.Nullable String hwaddr) {
    this.hwaddr = hwaddr;
    return this;
  }

  /**
   * The hardware address associated with this IP address.
   * @return hwaddr
   */
  @javax.annotation.Nullable
  public String getHwaddr() {
    return hwaddr;
  }

  public void setHwaddr(@javax.annotation.Nullable String hwaddr) {
    this.hwaddr = hwaddr;
  }


  /**
   * The resource identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public IpamsvcAddress _interface(@javax.annotation.Nullable String _interface) {
    this._interface = _interface;
    return this;
  }

  /**
   * The name of the network interface card (NIC) associated with the address, if any.
   * @return _interface
   */
  @javax.annotation.Nullable
  public String getInterface() {
    return _interface;
  }

  public void setInterface(@javax.annotation.Nullable String _interface) {
    this._interface = _interface;
  }


  public IpamsvcAddress names(@javax.annotation.Nullable List<IpamsvcName> names) {
    this.names = names;
    return this;
  }

  public IpamsvcAddress addNamesItem(IpamsvcName namesItem) {
    if (this.names == null) {
      this.names = new ArrayList<>();
    }
    this.names.add(namesItem);
    return this;
  }

  /**
   * The list of all names associated with this address.
   * @return names
   */
  @javax.annotation.Nullable
  public List<IpamsvcName> getNames() {
    return names;
  }

  public void setNames(@javax.annotation.Nullable List<IpamsvcName> names) {
    this.names = names;
  }


  public IpamsvcAddress parent(@javax.annotation.Nullable String parent) {
    this.parent = parent;
    return this;
  }

  /**
   * The resource identifier.
   * @return parent
   */
  @javax.annotation.Nullable
  public String getParent() {
    return parent;
  }

  public void setParent(@javax.annotation.Nullable String parent) {
    this.parent = parent;
  }


  /**
   * The type of protocol (_ip4_ or _ip6_).
   * @return protocol
   */
  @javax.annotation.Nullable
  public String getProtocol() {
    return protocol;
  }



  public IpamsvcAddress range(@javax.annotation.Nullable String range) {
    this.range = range;
    return this;
  }

  /**
   * The resource identifier.
   * @return range
   */
  @javax.annotation.Nullable
  public String getRange() {
    return range;
  }

  public void setRange(@javax.annotation.Nullable String range) {
    this.range = range;
  }


  public IpamsvcAddress space(@javax.annotation.Nonnull String space) {
    this.space = space;
    return this;
  }

  /**
   * The resource identifier.
   * @return space
   */
  @javax.annotation.Nonnull
  public String getSpace() {
    return space;
  }

  public void setSpace(@javax.annotation.Nonnull String space) {
    this.space = space;
  }


  /**
   * The state of the address (_used_ or _free_).
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }



  public IpamsvcAddress tags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
    return this;
  }

  /**
   * The tags for this address in JSON format.
   * @return tags
   */
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
  }


  /**
   * Time when the object has been updated. Equals to _created_at_ if not updated after creation.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }



  /**
   * The usage is a combination of indicators, each tracking a specific associated use. Listed below are usage indicators with their meaning:  usage indicator        | description  ---------------------- | --------------------------------  _IPAM_                 |  Address was created by the IPAM component.  _IPAM_, _RESERVED_     |  Address was created by the API call _ipam/address_ or _ipam/host_.  _IPAM_, _NETWORK_      |  Address was automatically created by the IPAM component and is the network address of the parent subnet.  _IPAM_, _BROADCAST_    |  Address was automatically created by the IPAM component and is the broadcast address of the parent subnet.  _DHCP_                 |  Address was created by the DHCP component.  _DHCP_, _FIXEDADDRESS_ |  Address was created by the API call _dhcp/fixed_address_.  _DHCP_, _LEASED_       |  An active lease for that address was issued by a DHCP server.  _DHCP_, _DISABLED_     |  Address is disabled.  _DNS_                  |  Address is used by one or more DNS records.  _DISCOVERED_           |  Address is discovered by some network discovery probe like Network Insight or NetMRI in NIOS.
   * @return usage
   */
  @javax.annotation.Nullable
  public List<String> getUsage() {
    return usage;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcAddress ipamsvcAddress = (IpamsvcAddress) o;
    return Objects.equals(this.address, ipamsvcAddress.address) &&
        Objects.equals(this.comment, ipamsvcAddress.comment) &&
        Objects.equals(this.compartmentId, ipamsvcAddress.compartmentId) &&
        Objects.equals(this.createdAt, ipamsvcAddress.createdAt) &&
        Objects.equals(this.dhcpInfo, ipamsvcAddress.dhcpInfo) &&
        Objects.equals(this.disableDhcp, ipamsvcAddress.disableDhcp) &&
        Objects.equals(this.discoveryAttrs, ipamsvcAddress.discoveryAttrs) &&
        Objects.equals(this.discoveryMetadata, ipamsvcAddress.discoveryMetadata) &&
        Objects.equals(this.externalKeys, ipamsvcAddress.externalKeys) &&
        Objects.equals(this.host, ipamsvcAddress.host) &&
        Objects.equals(this.hwaddr, ipamsvcAddress.hwaddr) &&
        Objects.equals(this.id, ipamsvcAddress.id) &&
        Objects.equals(this._interface, ipamsvcAddress._interface) &&
        Objects.equals(this.names, ipamsvcAddress.names) &&
        Objects.equals(this.parent, ipamsvcAddress.parent) &&
        Objects.equals(this.protocol, ipamsvcAddress.protocol) &&
        Objects.equals(this.range, ipamsvcAddress.range) &&
        Objects.equals(this.space, ipamsvcAddress.space) &&
        Objects.equals(this.state, ipamsvcAddress.state) &&
        Objects.equals(this.tags, ipamsvcAddress.tags) &&
        Objects.equals(this.updatedAt, ipamsvcAddress.updatedAt) &&
        Objects.equals(this.usage, ipamsvcAddress.usage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, comment, compartmentId, createdAt, dhcpInfo, disableDhcp, discoveryAttrs, discoveryMetadata, externalKeys, host, hwaddr, id, _interface, names, parent, protocol, range, space, state, tags, updatedAt, usage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcAddress {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    compartmentId: ").append(toIndentedString(compartmentId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    dhcpInfo: ").append(toIndentedString(dhcpInfo)).append("\n");
    sb.append("    disableDhcp: ").append(toIndentedString(disableDhcp)).append("\n");
    sb.append("    discoveryAttrs: ").append(toIndentedString(discoveryAttrs)).append("\n");
    sb.append("    discoveryMetadata: ").append(toIndentedString(discoveryMetadata)).append("\n");
    sb.append("    externalKeys: ").append(toIndentedString(externalKeys)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    hwaddr: ").append(toIndentedString(hwaddr)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    _interface: ").append(toIndentedString(_interface)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("    space: ").append(toIndentedString(space)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("comment");
    openapiFields.add("compartment_id");
    openapiFields.add("created_at");
    openapiFields.add("dhcp_info");
    openapiFields.add("disable_dhcp");
    openapiFields.add("discovery_attrs");
    openapiFields.add("discovery_metadata");
    openapiFields.add("external_keys");
    openapiFields.add("host");
    openapiFields.add("hwaddr");
    openapiFields.add("id");
    openapiFields.add("interface");
    openapiFields.add("names");
    openapiFields.add("parent");
    openapiFields.add("protocol");
    openapiFields.add("range");
    openapiFields.add("space");
    openapiFields.add("state");
    openapiFields.add("tags");
    openapiFields.add("updated_at");
    openapiFields.add("usage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("space");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcAddress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcAddress is not found in the empty JSON string", IpamsvcAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IpamsvcAddress.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("compartment_id") != null && !jsonObj.get("compartment_id").isJsonNull()) && !jsonObj.get("compartment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compartment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compartment_id").toString()));
      }
      // validate the optional field `dhcp_info`
      if (jsonObj.get("dhcp_info") != null && !jsonObj.get("dhcp_info").isJsonNull()) {
        IpamsvcDHCPInfo.validateJsonElement(jsonObj.get("dhcp_info"));
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("hwaddr") != null && !jsonObj.get("hwaddr").isJsonNull()) && !jsonObj.get("hwaddr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hwaddr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hwaddr").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("interface") != null && !jsonObj.get("interface").isJsonNull()) && !jsonObj.get("interface").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interface` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interface").toString()));
      }
      if (jsonObj.get("names") != null && !jsonObj.get("names").isJsonNull()) {
        JsonArray jsonArraynames = jsonObj.getAsJsonArray("names");
        if (jsonArraynames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("names").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `names` to be an array in the JSON string but got `%s`", jsonObj.get("names").toString()));
          }

          // validate the optional field `names` (array)
          for (int i = 0; i < jsonArraynames.size(); i++) {
            IpamsvcName.validateJsonElement(jsonArraynames.get(i));
          };
        }
      }
      if ((jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) && !jsonObj.get("parent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      if ((jsonObj.get("range") != null && !jsonObj.get("range").isJsonNull()) && !jsonObj.get("range").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `range` to be a primitive type in the JSON string but got `%s`", jsonObj.get("range").toString()));
      }
      if (!jsonObj.get("space").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `space` to be a primitive type in the JSON string but got `%s`", jsonObj.get("space").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("usage") != null && !jsonObj.get("usage").isJsonNull() && !jsonObj.get("usage").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `usage` to be an array in the JSON string but got `%s`", jsonObj.get("usage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcAddress>() {
           @Override
           public void write(JsonWriter out, IpamsvcAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcAddress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcAddress
   * @throws IOException if the JSON string is invalid with respect to IpamsvcAddress
   */
  public static IpamsvcAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcAddress.class);
  }

  /**
   * Convert an instance of IpamsvcAddress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

