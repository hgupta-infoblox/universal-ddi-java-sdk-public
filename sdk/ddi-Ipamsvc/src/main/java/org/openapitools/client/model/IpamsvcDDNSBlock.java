/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IpamsvcDDNSZone;
import org.openapitools.client.model.IpamsvcKerberosKey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The dynamic DNS configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcDDNSBlock {
  public static final String SERIALIZED_NAME_CLIENT_PRINCIPAL = "client_principal";
  @SerializedName(SERIALIZED_NAME_CLIENT_PRINCIPAL)
  @javax.annotation.Nullable
  private String clientPrincipal;

  public static final String SERIALIZED_NAME_DDNS_DOMAIN = "ddns_domain";
  @SerializedName(SERIALIZED_NAME_DDNS_DOMAIN)
  @javax.annotation.Nullable
  private String ddnsDomain;

  public static final String SERIALIZED_NAME_DDNS_ENABLED = "ddns_enabled";
  @SerializedName(SERIALIZED_NAME_DDNS_ENABLED)
  @javax.annotation.Nullable
  private Boolean ddnsEnabled;

  public static final String SERIALIZED_NAME_DDNS_SEND_UPDATES = "ddns_send_updates";
  @SerializedName(SERIALIZED_NAME_DDNS_SEND_UPDATES)
  @javax.annotation.Nullable
  private Boolean ddnsSendUpdates;

  public static final String SERIALIZED_NAME_DDNS_ZONES = "ddns_zones";
  @SerializedName(SERIALIZED_NAME_DDNS_ZONES)
  @javax.annotation.Nullable
  private List<IpamsvcDDNSZone> ddnsZones = new ArrayList<>();

  public static final String SERIALIZED_NAME_GSS_TSIG_FALLBACK = "gss_tsig_fallback";
  @SerializedName(SERIALIZED_NAME_GSS_TSIG_FALLBACK)
  @javax.annotation.Nullable
  private Boolean gssTsigFallback;

  public static final String SERIALIZED_NAME_KERBEROS_KDC = "kerberos_kdc";
  @SerializedName(SERIALIZED_NAME_KERBEROS_KDC)
  @javax.annotation.Nullable
  private String kerberosKdc;

  public static final String SERIALIZED_NAME_KERBEROS_KEYS = "kerberos_keys";
  @SerializedName(SERIALIZED_NAME_KERBEROS_KEYS)
  @javax.annotation.Nullable
  private List<IpamsvcKerberosKey> kerberosKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_KERBEROS_REKEY_INTERVAL = "kerberos_rekey_interval";
  @SerializedName(SERIALIZED_NAME_KERBEROS_REKEY_INTERVAL)
  @javax.annotation.Nullable
  private Long kerberosRekeyInterval;

  public static final String SERIALIZED_NAME_KERBEROS_RETRY_INTERVAL = "kerberos_retry_interval";
  @SerializedName(SERIALIZED_NAME_KERBEROS_RETRY_INTERVAL)
  @javax.annotation.Nullable
  private Long kerberosRetryInterval;

  public static final String SERIALIZED_NAME_KERBEROS_TKEY_LIFETIME = "kerberos_tkey_lifetime";
  @SerializedName(SERIALIZED_NAME_KERBEROS_TKEY_LIFETIME)
  @javax.annotation.Nullable
  private Long kerberosTkeyLifetime;

  public static final String SERIALIZED_NAME_KERBEROS_TKEY_PROTOCOL = "kerberos_tkey_protocol";
  @SerializedName(SERIALIZED_NAME_KERBEROS_TKEY_PROTOCOL)
  @javax.annotation.Nullable
  private String kerberosTkeyProtocol;

  public static final String SERIALIZED_NAME_SERVER_PRINCIPAL = "server_principal";
  @SerializedName(SERIALIZED_NAME_SERVER_PRINCIPAL)
  @javax.annotation.Nullable
  private String serverPrincipal;

  public IpamsvcDDNSBlock() {
  }

  public IpamsvcDDNSBlock clientPrincipal(@javax.annotation.Nullable String clientPrincipal) {
    this.clientPrincipal = clientPrincipal;
    return this;
  }

  /**
   * The Kerberos principal name. It uses the typical Kerberos notation: &lt;SERVICE-NAME&gt;/&lt;server-domain-name&gt;@&lt;REALM&gt;.  Defaults to empty.
   * @return clientPrincipal
   */
  @javax.annotation.Nullable
  public String getClientPrincipal() {
    return clientPrincipal;
  }

  public void setClientPrincipal(@javax.annotation.Nullable String clientPrincipal) {
    this.clientPrincipal = clientPrincipal;
  }


  public IpamsvcDDNSBlock ddnsDomain(@javax.annotation.Nullable String ddnsDomain) {
    this.ddnsDomain = ddnsDomain;
    return this;
  }

  /**
   * The domain name for DDNS.
   * @return ddnsDomain
   */
  @javax.annotation.Nullable
  public String getDdnsDomain() {
    return ddnsDomain;
  }

  public void setDdnsDomain(@javax.annotation.Nullable String ddnsDomain) {
    this.ddnsDomain = ddnsDomain;
  }


  public IpamsvcDDNSBlock ddnsEnabled(@javax.annotation.Nullable Boolean ddnsEnabled) {
    this.ddnsEnabled = ddnsEnabled;
    return this;
  }

  /**
   * Indicates if DDNS is enabled.
   * @return ddnsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getDdnsEnabled() {
    return ddnsEnabled;
  }

  public void setDdnsEnabled(@javax.annotation.Nullable Boolean ddnsEnabled) {
    this.ddnsEnabled = ddnsEnabled;
  }


  public IpamsvcDDNSBlock ddnsSendUpdates(@javax.annotation.Nullable Boolean ddnsSendUpdates) {
    this.ddnsSendUpdates = ddnsSendUpdates;
    return this;
  }

  /**
   * Determines if DDNS updates are enabled at this level.
   * @return ddnsSendUpdates
   */
  @javax.annotation.Nullable
  public Boolean getDdnsSendUpdates() {
    return ddnsSendUpdates;
  }

  public void setDdnsSendUpdates(@javax.annotation.Nullable Boolean ddnsSendUpdates) {
    this.ddnsSendUpdates = ddnsSendUpdates;
  }


  public IpamsvcDDNSBlock ddnsZones(@javax.annotation.Nullable List<IpamsvcDDNSZone> ddnsZones) {
    this.ddnsZones = ddnsZones;
    return this;
  }

  public IpamsvcDDNSBlock addDdnsZonesItem(IpamsvcDDNSZone ddnsZonesItem) {
    if (this.ddnsZones == null) {
      this.ddnsZones = new ArrayList<>();
    }
    this.ddnsZones.add(ddnsZonesItem);
    return this;
  }

  /**
   * The list of DDNS zones.
   * @return ddnsZones
   */
  @javax.annotation.Nullable
  public List<IpamsvcDDNSZone> getDdnsZones() {
    return ddnsZones;
  }

  public void setDdnsZones(@javax.annotation.Nullable List<IpamsvcDDNSZone> ddnsZones) {
    this.ddnsZones = ddnsZones;
  }


  public IpamsvcDDNSBlock gssTsigFallback(@javax.annotation.Nullable Boolean gssTsigFallback) {
    this.gssTsigFallback = gssTsigFallback;
    return this;
  }

  /**
   * The behavior when GSS-TSIG should be used (a matching external DNS server is configured) but no GSS-TSIG key is available. If configured to _false_ (the default) this DNS server is skipped, if configured to _true_ the DNS server is ignored and the DNS update is sent with the configured DHCP-DDNS protection e.g. TSIG key or without any protection when none was configured.  Defaults to _false_.
   * @return gssTsigFallback
   */
  @javax.annotation.Nullable
  public Boolean getGssTsigFallback() {
    return gssTsigFallback;
  }

  public void setGssTsigFallback(@javax.annotation.Nullable Boolean gssTsigFallback) {
    this.gssTsigFallback = gssTsigFallback;
  }


  public IpamsvcDDNSBlock kerberosKdc(@javax.annotation.Nullable String kerberosKdc) {
    this.kerberosKdc = kerberosKdc;
    return this;
  }

  /**
   * Address of Kerberos Key Distribution Center.  Defaults to empty.
   * @return kerberosKdc
   */
  @javax.annotation.Nullable
  public String getKerberosKdc() {
    return kerberosKdc;
  }

  public void setKerberosKdc(@javax.annotation.Nullable String kerberosKdc) {
    this.kerberosKdc = kerberosKdc;
  }


  public IpamsvcDDNSBlock kerberosKeys(@javax.annotation.Nullable List<IpamsvcKerberosKey> kerberosKeys) {
    this.kerberosKeys = kerberosKeys;
    return this;
  }

  public IpamsvcDDNSBlock addKerberosKeysItem(IpamsvcKerberosKey kerberosKeysItem) {
    if (this.kerberosKeys == null) {
      this.kerberosKeys = new ArrayList<>();
    }
    this.kerberosKeys.add(kerberosKeysItem);
    return this;
  }

  /**
   * _kerberos_keys_ contains a list of keys for GSS-TSIG signed dynamic updates.  Defaults to empty.
   * @return kerberosKeys
   */
  @javax.annotation.Nullable
  public List<IpamsvcKerberosKey> getKerberosKeys() {
    return kerberosKeys;
  }

  public void setKerberosKeys(@javax.annotation.Nullable List<IpamsvcKerberosKey> kerberosKeys) {
    this.kerberosKeys = kerberosKeys;
  }


  public IpamsvcDDNSBlock kerberosRekeyInterval(@javax.annotation.Nullable Long kerberosRekeyInterval) {
    this.kerberosRekeyInterval = kerberosRekeyInterval;
    return this;
  }

  /**
   * Time interval (in seconds) the keys for each configured external DNS server are checked for rekeying, i.e. a new key is created to replace the current usable one when its age is greater than the rekey_interval value.  Defaults to 120 seconds.
   * @return kerberosRekeyInterval
   */
  @javax.annotation.Nullable
  public Long getKerberosRekeyInterval() {
    return kerberosRekeyInterval;
  }

  public void setKerberosRekeyInterval(@javax.annotation.Nullable Long kerberosRekeyInterval) {
    this.kerberosRekeyInterval = kerberosRekeyInterval;
  }


  public IpamsvcDDNSBlock kerberosRetryInterval(@javax.annotation.Nullable Long kerberosRetryInterval) {
    this.kerberosRetryInterval = kerberosRetryInterval;
    return this;
  }

  /**
   * Time interval (in seconds) to retry to create a key if any error occurred previously for any configured external DNS server.  Defaults to 30 seconds.
   * @return kerberosRetryInterval
   */
  @javax.annotation.Nullable
  public Long getKerberosRetryInterval() {
    return kerberosRetryInterval;
  }

  public void setKerberosRetryInterval(@javax.annotation.Nullable Long kerberosRetryInterval) {
    this.kerberosRetryInterval = kerberosRetryInterval;
  }


  public IpamsvcDDNSBlock kerberosTkeyLifetime(@javax.annotation.Nullable Long kerberosTkeyLifetime) {
    this.kerberosTkeyLifetime = kerberosTkeyLifetime;
    return this;
  }

  /**
   * Lifetime (in seconds) of GSS-TSIG keys in the TKEY protocol.  Defaults to 160 seconds.
   * @return kerberosTkeyLifetime
   */
  @javax.annotation.Nullable
  public Long getKerberosTkeyLifetime() {
    return kerberosTkeyLifetime;
  }

  public void setKerberosTkeyLifetime(@javax.annotation.Nullable Long kerberosTkeyLifetime) {
    this.kerberosTkeyLifetime = kerberosTkeyLifetime;
  }


  public IpamsvcDDNSBlock kerberosTkeyProtocol(@javax.annotation.Nullable String kerberosTkeyProtocol) {
    this.kerberosTkeyProtocol = kerberosTkeyProtocol;
    return this;
  }

  /**
   * Determines which protocol is used to establish the security context with the external DNS servers, TCP or UDP.  Defaults to _tcp_.
   * @return kerberosTkeyProtocol
   */
  @javax.annotation.Nullable
  public String getKerberosTkeyProtocol() {
    return kerberosTkeyProtocol;
  }

  public void setKerberosTkeyProtocol(@javax.annotation.Nullable String kerberosTkeyProtocol) {
    this.kerberosTkeyProtocol = kerberosTkeyProtocol;
  }


  public IpamsvcDDNSBlock serverPrincipal(@javax.annotation.Nullable String serverPrincipal) {
    this.serverPrincipal = serverPrincipal;
    return this;
  }

  /**
   * The Kerberos principal name of the external DNS server that will receive updates.  Defaults to empty.
   * @return serverPrincipal
   */
  @javax.annotation.Nullable
  public String getServerPrincipal() {
    return serverPrincipal;
  }

  public void setServerPrincipal(@javax.annotation.Nullable String serverPrincipal) {
    this.serverPrincipal = serverPrincipal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcDDNSBlock ipamsvcDDNSBlock = (IpamsvcDDNSBlock) o;
    return Objects.equals(this.clientPrincipal, ipamsvcDDNSBlock.clientPrincipal) &&
        Objects.equals(this.ddnsDomain, ipamsvcDDNSBlock.ddnsDomain) &&
        Objects.equals(this.ddnsEnabled, ipamsvcDDNSBlock.ddnsEnabled) &&
        Objects.equals(this.ddnsSendUpdates, ipamsvcDDNSBlock.ddnsSendUpdates) &&
        Objects.equals(this.ddnsZones, ipamsvcDDNSBlock.ddnsZones) &&
        Objects.equals(this.gssTsigFallback, ipamsvcDDNSBlock.gssTsigFallback) &&
        Objects.equals(this.kerberosKdc, ipamsvcDDNSBlock.kerberosKdc) &&
        Objects.equals(this.kerberosKeys, ipamsvcDDNSBlock.kerberosKeys) &&
        Objects.equals(this.kerberosRekeyInterval, ipamsvcDDNSBlock.kerberosRekeyInterval) &&
        Objects.equals(this.kerberosRetryInterval, ipamsvcDDNSBlock.kerberosRetryInterval) &&
        Objects.equals(this.kerberosTkeyLifetime, ipamsvcDDNSBlock.kerberosTkeyLifetime) &&
        Objects.equals(this.kerberosTkeyProtocol, ipamsvcDDNSBlock.kerberosTkeyProtocol) &&
        Objects.equals(this.serverPrincipal, ipamsvcDDNSBlock.serverPrincipal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientPrincipal, ddnsDomain, ddnsEnabled, ddnsSendUpdates, ddnsZones, gssTsigFallback, kerberosKdc, kerberosKeys, kerberosRekeyInterval, kerberosRetryInterval, kerberosTkeyLifetime, kerberosTkeyProtocol, serverPrincipal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcDDNSBlock {\n");
    sb.append("    clientPrincipal: ").append(toIndentedString(clientPrincipal)).append("\n");
    sb.append("    ddnsDomain: ").append(toIndentedString(ddnsDomain)).append("\n");
    sb.append("    ddnsEnabled: ").append(toIndentedString(ddnsEnabled)).append("\n");
    sb.append("    ddnsSendUpdates: ").append(toIndentedString(ddnsSendUpdates)).append("\n");
    sb.append("    ddnsZones: ").append(toIndentedString(ddnsZones)).append("\n");
    sb.append("    gssTsigFallback: ").append(toIndentedString(gssTsigFallback)).append("\n");
    sb.append("    kerberosKdc: ").append(toIndentedString(kerberosKdc)).append("\n");
    sb.append("    kerberosKeys: ").append(toIndentedString(kerberosKeys)).append("\n");
    sb.append("    kerberosRekeyInterval: ").append(toIndentedString(kerberosRekeyInterval)).append("\n");
    sb.append("    kerberosRetryInterval: ").append(toIndentedString(kerberosRetryInterval)).append("\n");
    sb.append("    kerberosTkeyLifetime: ").append(toIndentedString(kerberosTkeyLifetime)).append("\n");
    sb.append("    kerberosTkeyProtocol: ").append(toIndentedString(kerberosTkeyProtocol)).append("\n");
    sb.append("    serverPrincipal: ").append(toIndentedString(serverPrincipal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("client_principal");
    openapiFields.add("ddns_domain");
    openapiFields.add("ddns_enabled");
    openapiFields.add("ddns_send_updates");
    openapiFields.add("ddns_zones");
    openapiFields.add("gss_tsig_fallback");
    openapiFields.add("kerberos_kdc");
    openapiFields.add("kerberos_keys");
    openapiFields.add("kerberos_rekey_interval");
    openapiFields.add("kerberos_retry_interval");
    openapiFields.add("kerberos_tkey_lifetime");
    openapiFields.add("kerberos_tkey_protocol");
    openapiFields.add("server_principal");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcDDNSBlock
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcDDNSBlock.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcDDNSBlock is not found in the empty JSON string", IpamsvcDDNSBlock.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcDDNSBlock.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcDDNSBlock` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("client_principal") != null && !jsonObj.get("client_principal").isJsonNull()) && !jsonObj.get("client_principal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_principal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_principal").toString()));
      }
      if ((jsonObj.get("ddns_domain") != null && !jsonObj.get("ddns_domain").isJsonNull()) && !jsonObj.get("ddns_domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ddns_domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ddns_domain").toString()));
      }
      if (jsonObj.get("ddns_zones") != null && !jsonObj.get("ddns_zones").isJsonNull()) {
        JsonArray jsonArrayddnsZones = jsonObj.getAsJsonArray("ddns_zones");
        if (jsonArrayddnsZones != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ddns_zones").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ddns_zones` to be an array in the JSON string but got `%s`", jsonObj.get("ddns_zones").toString()));
          }

          // validate the optional field `ddns_zones` (array)
          for (int i = 0; i < jsonArrayddnsZones.size(); i++) {
            IpamsvcDDNSZone.validateJsonElement(jsonArrayddnsZones.get(i));
          };
        }
      }
      if ((jsonObj.get("kerberos_kdc") != null && !jsonObj.get("kerberos_kdc").isJsonNull()) && !jsonObj.get("kerberos_kdc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kerberos_kdc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kerberos_kdc").toString()));
      }
      if (jsonObj.get("kerberos_keys") != null && !jsonObj.get("kerberos_keys").isJsonNull()) {
        JsonArray jsonArraykerberosKeys = jsonObj.getAsJsonArray("kerberos_keys");
        if (jsonArraykerberosKeys != null) {
          // ensure the json data is an array
          if (!jsonObj.get("kerberos_keys").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `kerberos_keys` to be an array in the JSON string but got `%s`", jsonObj.get("kerberos_keys").toString()));
          }

          // validate the optional field `kerberos_keys` (array)
          for (int i = 0; i < jsonArraykerberosKeys.size(); i++) {
            IpamsvcKerberosKey.validateJsonElement(jsonArraykerberosKeys.get(i));
          };
        }
      }
      if ((jsonObj.get("kerberos_tkey_protocol") != null && !jsonObj.get("kerberos_tkey_protocol").isJsonNull()) && !jsonObj.get("kerberos_tkey_protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kerberos_tkey_protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kerberos_tkey_protocol").toString()));
      }
      if ((jsonObj.get("server_principal") != null && !jsonObj.get("server_principal").isJsonNull()) && !jsonObj.get("server_principal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server_principal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server_principal").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcDDNSBlock.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcDDNSBlock' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcDDNSBlock> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcDDNSBlock.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcDDNSBlock>() {
           @Override
           public void write(JsonWriter out, IpamsvcDDNSBlock value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcDDNSBlock read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcDDNSBlock given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcDDNSBlock
   * @throws IOException if the JSON string is invalid with respect to IpamsvcDDNSBlock
   */
  public static IpamsvcDDNSBlock fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcDDNSBlock.class);
  }

  /**
   * Convert an instance of IpamsvcDDNSBlock to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

