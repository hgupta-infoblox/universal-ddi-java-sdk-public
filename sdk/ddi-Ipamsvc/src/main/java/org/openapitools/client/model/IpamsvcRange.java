/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InheritanceAssignedHost;
import org.openapitools.client.model.IpamsvcAccessFilter;
import org.openapitools.client.model.IpamsvcDHCPOptionsInheritance;
import org.openapitools.client.model.IpamsvcExclusionRange;
import org.openapitools.client.model.IpamsvcOptionItem;
import org.openapitools.client.model.IpamsvcUtilization;
import org.openapitools.client.model.IpamsvcUtilizationThreshold;
import org.openapitools.client.model.IpamsvcUtilizationV6;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A __Range__ object (_ipam/range_) represents a set of contiguous IP addresses in the same IP space with no gap, expressed as a (start, end) pair within a given subnet that are grouped together for administrative purpose and protocol management. The start and end values are not required to align with CIDR boundaries. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcRange {
  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_COMPARTMENT_ID = "compartment_id";
  @SerializedName(SERIALIZED_NAME_COMPARTMENT_ID)
  @javax.annotation.Nullable
  private String compartmentId;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DHCP_HOST = "dhcp_host";
  @SerializedName(SERIALIZED_NAME_DHCP_HOST)
  @javax.annotation.Nullable
  private String dhcpHost;

  public static final String SERIALIZED_NAME_DHCP_OPTIONS = "dhcp_options";
  @SerializedName(SERIALIZED_NAME_DHCP_OPTIONS)
  @javax.annotation.Nullable
  private List<IpamsvcOptionItem> dhcpOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISABLE_DHCP = "disable_dhcp";
  @SerializedName(SERIALIZED_NAME_DISABLE_DHCP)
  @javax.annotation.Nullable
  private Boolean disableDhcp;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  @javax.annotation.Nonnull
  private String end;

  public static final String SERIALIZED_NAME_EXCLUSION_RANGES = "exclusion_ranges";
  @SerializedName(SERIALIZED_NAME_EXCLUSION_RANGES)
  @javax.annotation.Nullable
  private List<IpamsvcExclusionRange> exclusionRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  @javax.annotation.Nullable
  private List<IpamsvcAccessFilter> filters = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_INHERITANCE_ASSIGNED_HOSTS = "inheritance_assigned_hosts";
  @SerializedName(SERIALIZED_NAME_INHERITANCE_ASSIGNED_HOSTS)
  @javax.annotation.Nullable
  private List<InheritanceAssignedHost> inheritanceAssignedHosts = new ArrayList<>();

  public static final String SERIALIZED_NAME_INHERITANCE_PARENT = "inheritance_parent";
  @SerializedName(SERIALIZED_NAME_INHERITANCE_PARENT)
  @javax.annotation.Nullable
  private String inheritanceParent;

  public static final String SERIALIZED_NAME_INHERITANCE_SOURCES = "inheritance_sources";
  @SerializedName(SERIALIZED_NAME_INHERITANCE_SOURCES)
  @javax.annotation.Nullable
  private IpamsvcDHCPOptionsInheritance inheritanceSources;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  @javax.annotation.Nullable
  private String parent;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  @javax.annotation.Nullable
  private String protocol;

  public static final String SERIALIZED_NAME_SPACE = "space";
  @SerializedName(SERIALIZED_NAME_SPACE)
  @javax.annotation.Nonnull
  private String space;

  public static final String SERIALIZED_NAME_SPACE_NAME = "space_name";
  @SerializedName(SERIALIZED_NAME_SPACE_NAME)
  @javax.annotation.Nullable
  private String spaceName;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  @javax.annotation.Nonnull
  private String start;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Object tags;

  public static final String SERIALIZED_NAME_THRESHOLD = "threshold";
  @SerializedName(SERIALIZED_NAME_THRESHOLD)
  @javax.annotation.Nullable
  private IpamsvcUtilizationThreshold threshold;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_UTILIZATION = "utilization";
  @SerializedName(SERIALIZED_NAME_UTILIZATION)
  @javax.annotation.Nullable
  private IpamsvcUtilization utilization;

  public static final String SERIALIZED_NAME_UTILIZATION_V6 = "utilization_v6";
  @SerializedName(SERIALIZED_NAME_UTILIZATION_V6)
  @javax.annotation.Nullable
  private IpamsvcUtilizationV6 utilizationV6;

  public IpamsvcRange() {
  }

  public IpamsvcRange(
     String compartmentId, 
     OffsetDateTime createdAt, 
     String id, 
     List<InheritanceAssignedHost> inheritanceAssignedHosts, 
     String protocol, 
     String spaceName, 
     OffsetDateTime updatedAt
  ) {
    this();
    this.compartmentId = compartmentId;
    this.createdAt = createdAt;
    this.id = id;
    this.inheritanceAssignedHosts = inheritanceAssignedHosts;
    this.protocol = protocol;
    this.spaceName = spaceName;
    this.updatedAt = updatedAt;
  }

  public IpamsvcRange comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * The description for the range. May contain 0 to 1024 characters. Can include UTF-8.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  /**
   * The access view associated with the object. If no access view is associated with the object, the value defaults to empty.
   * @return compartmentId
   */
  @javax.annotation.Nullable
  public String getCompartmentId() {
    return compartmentId;
  }



  /**
   * Time when the object has been created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public IpamsvcRange dhcpHost(@javax.annotation.Nullable String dhcpHost) {
    this.dhcpHost = dhcpHost;
    return this;
  }

  /**
   * The resource identifier.
   * @return dhcpHost
   */
  @javax.annotation.Nullable
  public String getDhcpHost() {
    return dhcpHost;
  }

  public void setDhcpHost(@javax.annotation.Nullable String dhcpHost) {
    this.dhcpHost = dhcpHost;
  }


  public IpamsvcRange dhcpOptions(@javax.annotation.Nullable List<IpamsvcOptionItem> dhcpOptions) {
    this.dhcpOptions = dhcpOptions;
    return this;
  }

  public IpamsvcRange addDhcpOptionsItem(IpamsvcOptionItem dhcpOptionsItem) {
    if (this.dhcpOptions == null) {
      this.dhcpOptions = new ArrayList<>();
    }
    this.dhcpOptions.add(dhcpOptionsItem);
    return this;
  }

  /**
   * The list of DHCP options. May be either a specific option or a group of options.
   * @return dhcpOptions
   */
  @javax.annotation.Nullable
  public List<IpamsvcOptionItem> getDhcpOptions() {
    return dhcpOptions;
  }

  public void setDhcpOptions(@javax.annotation.Nullable List<IpamsvcOptionItem> dhcpOptions) {
    this.dhcpOptions = dhcpOptions;
  }


  public IpamsvcRange disableDhcp(@javax.annotation.Nullable Boolean disableDhcp) {
    this.disableDhcp = disableDhcp;
    return this;
  }

  /**
   * Optional. _true_ to disable object. A disabled object is effectively non-existent when generating configuration.  Defaults to _false_.
   * @return disableDhcp
   */
  @javax.annotation.Nullable
  public Boolean getDisableDhcp() {
    return disableDhcp;
  }

  public void setDisableDhcp(@javax.annotation.Nullable Boolean disableDhcp) {
    this.disableDhcp = disableDhcp;
  }


  public IpamsvcRange end(@javax.annotation.Nonnull String end) {
    this.end = end;
    return this;
  }

  /**
   * The end IP address of the range.
   * @return end
   */
  @javax.annotation.Nonnull
  public String getEnd() {
    return end;
  }

  public void setEnd(@javax.annotation.Nonnull String end) {
    this.end = end;
  }


  public IpamsvcRange exclusionRanges(@javax.annotation.Nullable List<IpamsvcExclusionRange> exclusionRanges) {
    this.exclusionRanges = exclusionRanges;
    return this;
  }

  public IpamsvcRange addExclusionRangesItem(IpamsvcExclusionRange exclusionRangesItem) {
    if (this.exclusionRanges == null) {
      this.exclusionRanges = new ArrayList<>();
    }
    this.exclusionRanges.add(exclusionRangesItem);
    return this;
  }

  /**
   * The list of all exclusion ranges in the scope of the range.
   * @return exclusionRanges
   */
  @javax.annotation.Nullable
  public List<IpamsvcExclusionRange> getExclusionRanges() {
    return exclusionRanges;
  }

  public void setExclusionRanges(@javax.annotation.Nullable List<IpamsvcExclusionRange> exclusionRanges) {
    this.exclusionRanges = exclusionRanges;
  }


  public IpamsvcRange filters(@javax.annotation.Nullable List<IpamsvcAccessFilter> filters) {
    this.filters = filters;
    return this;
  }

  public IpamsvcRange addFiltersItem(IpamsvcAccessFilter filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

  /**
   * The list of all allow/deny filters of the range.
   * @return filters
   */
  @javax.annotation.Nullable
  public List<IpamsvcAccessFilter> getFilters() {
    return filters;
  }

  public void setFilters(@javax.annotation.Nullable List<IpamsvcAccessFilter> filters) {
    this.filters = filters;
  }


  /**
   * The resource identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * The list of the inheritance assigned hosts of the object.
   * @return inheritanceAssignedHosts
   */
  @javax.annotation.Nullable
  public List<InheritanceAssignedHost> getInheritanceAssignedHosts() {
    return inheritanceAssignedHosts;
  }



  public IpamsvcRange inheritanceParent(@javax.annotation.Nullable String inheritanceParent) {
    this.inheritanceParent = inheritanceParent;
    return this;
  }

  /**
   * The resource identifier.
   * @return inheritanceParent
   */
  @javax.annotation.Nullable
  public String getInheritanceParent() {
    return inheritanceParent;
  }

  public void setInheritanceParent(@javax.annotation.Nullable String inheritanceParent) {
    this.inheritanceParent = inheritanceParent;
  }


  public IpamsvcRange inheritanceSources(@javax.annotation.Nullable IpamsvcDHCPOptionsInheritance inheritanceSources) {
    this.inheritanceSources = inheritanceSources;
    return this;
  }

  /**
   * Get inheritanceSources
   * @return inheritanceSources
   */
  @javax.annotation.Nullable
  public IpamsvcDHCPOptionsInheritance getInheritanceSources() {
    return inheritanceSources;
  }

  public void setInheritanceSources(@javax.annotation.Nullable IpamsvcDHCPOptionsInheritance inheritanceSources) {
    this.inheritanceSources = inheritanceSources;
  }


  public IpamsvcRange name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the range. May contain 1 to 256 characters. Can include UTF-8.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public IpamsvcRange parent(@javax.annotation.Nullable String parent) {
    this.parent = parent;
    return this;
  }

  /**
   * The resource identifier.
   * @return parent
   */
  @javax.annotation.Nullable
  public String getParent() {
    return parent;
  }

  public void setParent(@javax.annotation.Nullable String parent) {
    this.parent = parent;
  }


  /**
   * The type of protocol (_ip4_ or _ip6_).
   * @return protocol
   */
  @javax.annotation.Nullable
  public String getProtocol() {
    return protocol;
  }



  public IpamsvcRange space(@javax.annotation.Nonnull String space) {
    this.space = space;
    return this;
  }

  /**
   * The resource identifier.
   * @return space
   */
  @javax.annotation.Nonnull
  public String getSpace() {
    return space;
  }

  public void setSpace(@javax.annotation.Nonnull String space) {
    this.space = space;
  }


  /**
   * The name of the IP Space the range belongs to.
   * @return spaceName
   */
  @javax.annotation.Nullable
  public String getSpaceName() {
    return spaceName;
  }



  public IpamsvcRange start(@javax.annotation.Nonnull String start) {
    this.start = start;
    return this;
  }

  /**
   * The start IP address of the range.
   * @return start
   */
  @javax.annotation.Nonnull
  public String getStart() {
    return start;
  }

  public void setStart(@javax.annotation.Nonnull String start) {
    this.start = start;
  }


  public IpamsvcRange tags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
    return this;
  }

  /**
   * The tags for the range in JSON format.
   * @return tags
   */
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
  }


  public IpamsvcRange threshold(@javax.annotation.Nullable IpamsvcUtilizationThreshold threshold) {
    this.threshold = threshold;
    return this;
  }

  /**
   * Get threshold
   * @return threshold
   */
  @javax.annotation.Nullable
  public IpamsvcUtilizationThreshold getThreshold() {
    return threshold;
  }

  public void setThreshold(@javax.annotation.Nullable IpamsvcUtilizationThreshold threshold) {
    this.threshold = threshold;
  }


  /**
   * Time when the object has been updated. Equals to _created_at_ if not updated after creation.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }



  public IpamsvcRange utilization(@javax.annotation.Nullable IpamsvcUtilization utilization) {
    this.utilization = utilization;
    return this;
  }

  /**
   * Get utilization
   * @return utilization
   */
  @javax.annotation.Nullable
  public IpamsvcUtilization getUtilization() {
    return utilization;
  }

  public void setUtilization(@javax.annotation.Nullable IpamsvcUtilization utilization) {
    this.utilization = utilization;
  }


  public IpamsvcRange utilizationV6(@javax.annotation.Nullable IpamsvcUtilizationV6 utilizationV6) {
    this.utilizationV6 = utilizationV6;
    return this;
  }

  /**
   * Get utilizationV6
   * @return utilizationV6
   */
  @javax.annotation.Nullable
  public IpamsvcUtilizationV6 getUtilizationV6() {
    return utilizationV6;
  }

  public void setUtilizationV6(@javax.annotation.Nullable IpamsvcUtilizationV6 utilizationV6) {
    this.utilizationV6 = utilizationV6;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcRange ipamsvcRange = (IpamsvcRange) o;
    return Objects.equals(this.comment, ipamsvcRange.comment) &&
        Objects.equals(this.compartmentId, ipamsvcRange.compartmentId) &&
        Objects.equals(this.createdAt, ipamsvcRange.createdAt) &&
        Objects.equals(this.dhcpHost, ipamsvcRange.dhcpHost) &&
        Objects.equals(this.dhcpOptions, ipamsvcRange.dhcpOptions) &&
        Objects.equals(this.disableDhcp, ipamsvcRange.disableDhcp) &&
        Objects.equals(this.end, ipamsvcRange.end) &&
        Objects.equals(this.exclusionRanges, ipamsvcRange.exclusionRanges) &&
        Objects.equals(this.filters, ipamsvcRange.filters) &&
        Objects.equals(this.id, ipamsvcRange.id) &&
        Objects.equals(this.inheritanceAssignedHosts, ipamsvcRange.inheritanceAssignedHosts) &&
        Objects.equals(this.inheritanceParent, ipamsvcRange.inheritanceParent) &&
        Objects.equals(this.inheritanceSources, ipamsvcRange.inheritanceSources) &&
        Objects.equals(this.name, ipamsvcRange.name) &&
        Objects.equals(this.parent, ipamsvcRange.parent) &&
        Objects.equals(this.protocol, ipamsvcRange.protocol) &&
        Objects.equals(this.space, ipamsvcRange.space) &&
        Objects.equals(this.spaceName, ipamsvcRange.spaceName) &&
        Objects.equals(this.start, ipamsvcRange.start) &&
        Objects.equals(this.tags, ipamsvcRange.tags) &&
        Objects.equals(this.threshold, ipamsvcRange.threshold) &&
        Objects.equals(this.updatedAt, ipamsvcRange.updatedAt) &&
        Objects.equals(this.utilization, ipamsvcRange.utilization) &&
        Objects.equals(this.utilizationV6, ipamsvcRange.utilizationV6);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comment, compartmentId, createdAt, dhcpHost, dhcpOptions, disableDhcp, end, exclusionRanges, filters, id, inheritanceAssignedHosts, inheritanceParent, inheritanceSources, name, parent, protocol, space, spaceName, start, tags, threshold, updatedAt, utilization, utilizationV6);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcRange {\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    compartmentId: ").append(toIndentedString(compartmentId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    dhcpHost: ").append(toIndentedString(dhcpHost)).append("\n");
    sb.append("    dhcpOptions: ").append(toIndentedString(dhcpOptions)).append("\n");
    sb.append("    disableDhcp: ").append(toIndentedString(disableDhcp)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    exclusionRanges: ").append(toIndentedString(exclusionRanges)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inheritanceAssignedHosts: ").append(toIndentedString(inheritanceAssignedHosts)).append("\n");
    sb.append("    inheritanceParent: ").append(toIndentedString(inheritanceParent)).append("\n");
    sb.append("    inheritanceSources: ").append(toIndentedString(inheritanceSources)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    space: ").append(toIndentedString(space)).append("\n");
    sb.append("    spaceName: ").append(toIndentedString(spaceName)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    utilization: ").append(toIndentedString(utilization)).append("\n");
    sb.append("    utilizationV6: ").append(toIndentedString(utilizationV6)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comment");
    openapiFields.add("compartment_id");
    openapiFields.add("created_at");
    openapiFields.add("dhcp_host");
    openapiFields.add("dhcp_options");
    openapiFields.add("disable_dhcp");
    openapiFields.add("end");
    openapiFields.add("exclusion_ranges");
    openapiFields.add("filters");
    openapiFields.add("id");
    openapiFields.add("inheritance_assigned_hosts");
    openapiFields.add("inheritance_parent");
    openapiFields.add("inheritance_sources");
    openapiFields.add("name");
    openapiFields.add("parent");
    openapiFields.add("protocol");
    openapiFields.add("space");
    openapiFields.add("space_name");
    openapiFields.add("start");
    openapiFields.add("tags");
    openapiFields.add("threshold");
    openapiFields.add("updated_at");
    openapiFields.add("utilization");
    openapiFields.add("utilization_v6");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("end");
    openapiRequiredFields.add("space");
    openapiRequiredFields.add("start");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcRange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcRange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcRange is not found in the empty JSON string", IpamsvcRange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcRange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcRange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IpamsvcRange.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("compartment_id") != null && !jsonObj.get("compartment_id").isJsonNull()) && !jsonObj.get("compartment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compartment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compartment_id").toString()));
      }
      if ((jsonObj.get("dhcp_host") != null && !jsonObj.get("dhcp_host").isJsonNull()) && !jsonObj.get("dhcp_host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dhcp_host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dhcp_host").toString()));
      }
      if (jsonObj.get("dhcp_options") != null && !jsonObj.get("dhcp_options").isJsonNull()) {
        JsonArray jsonArraydhcpOptions = jsonObj.getAsJsonArray("dhcp_options");
        if (jsonArraydhcpOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dhcp_options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dhcp_options` to be an array in the JSON string but got `%s`", jsonObj.get("dhcp_options").toString()));
          }

          // validate the optional field `dhcp_options` (array)
          for (int i = 0; i < jsonArraydhcpOptions.size(); i++) {
            IpamsvcOptionItem.validateJsonElement(jsonArraydhcpOptions.get(i));
          };
        }
      }
      if (!jsonObj.get("end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end").toString()));
      }
      if (jsonObj.get("exclusion_ranges") != null && !jsonObj.get("exclusion_ranges").isJsonNull()) {
        JsonArray jsonArrayexclusionRanges = jsonObj.getAsJsonArray("exclusion_ranges");
        if (jsonArrayexclusionRanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exclusion_ranges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exclusion_ranges` to be an array in the JSON string but got `%s`", jsonObj.get("exclusion_ranges").toString()));
          }

          // validate the optional field `exclusion_ranges` (array)
          for (int i = 0; i < jsonArrayexclusionRanges.size(); i++) {
            IpamsvcExclusionRange.validateJsonElement(jsonArrayexclusionRanges.get(i));
          };
        }
      }
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
        if (jsonArrayfilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
          }

          // validate the optional field `filters` (array)
          for (int i = 0; i < jsonArrayfilters.size(); i++) {
            IpamsvcAccessFilter.validateJsonElement(jsonArrayfilters.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("inheritance_assigned_hosts") != null && !jsonObj.get("inheritance_assigned_hosts").isJsonNull()) {
        JsonArray jsonArrayinheritanceAssignedHosts = jsonObj.getAsJsonArray("inheritance_assigned_hosts");
        if (jsonArrayinheritanceAssignedHosts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inheritance_assigned_hosts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inheritance_assigned_hosts` to be an array in the JSON string but got `%s`", jsonObj.get("inheritance_assigned_hosts").toString()));
          }

          // validate the optional field `inheritance_assigned_hosts` (array)
          for (int i = 0; i < jsonArrayinheritanceAssignedHosts.size(); i++) {
            InheritanceAssignedHost.validateJsonElement(jsonArrayinheritanceAssignedHosts.get(i));
          };
        }
      }
      if ((jsonObj.get("inheritance_parent") != null && !jsonObj.get("inheritance_parent").isJsonNull()) && !jsonObj.get("inheritance_parent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inheritance_parent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inheritance_parent").toString()));
      }
      // validate the optional field `inheritance_sources`
      if (jsonObj.get("inheritance_sources") != null && !jsonObj.get("inheritance_sources").isJsonNull()) {
        IpamsvcDHCPOptionsInheritance.validateJsonElement(jsonObj.get("inheritance_sources"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) && !jsonObj.get("parent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      if (!jsonObj.get("space").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `space` to be a primitive type in the JSON string but got `%s`", jsonObj.get("space").toString()));
      }
      if ((jsonObj.get("space_name") != null && !jsonObj.get("space_name").isJsonNull()) && !jsonObj.get("space_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `space_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("space_name").toString()));
      }
      if (!jsonObj.get("start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start").toString()));
      }
      // validate the optional field `threshold`
      if (jsonObj.get("threshold") != null && !jsonObj.get("threshold").isJsonNull()) {
        IpamsvcUtilizationThreshold.validateJsonElement(jsonObj.get("threshold"));
      }
      // validate the optional field `utilization`
      if (jsonObj.get("utilization") != null && !jsonObj.get("utilization").isJsonNull()) {
        IpamsvcUtilization.validateJsonElement(jsonObj.get("utilization"));
      }
      // validate the optional field `utilization_v6`
      if (jsonObj.get("utilization_v6") != null && !jsonObj.get("utilization_v6").isJsonNull()) {
        IpamsvcUtilizationV6.validateJsonElement(jsonObj.get("utilization_v6"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcRange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcRange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcRange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcRange.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcRange>() {
           @Override
           public void write(JsonWriter out, IpamsvcRange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcRange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcRange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcRange
   * @throws IOException if the JSON string is invalid with respect to IpamsvcRange
   */
  public static IpamsvcRange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcRange.class);
  }

  /**
   * Convert an instance of IpamsvcRange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

