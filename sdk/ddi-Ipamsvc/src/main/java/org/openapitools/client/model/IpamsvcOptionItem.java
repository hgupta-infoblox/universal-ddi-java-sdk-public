/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An item (_dhcp/option_item_) in a list of DHCP options. May be either a specific option or a group of options.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcOptionItem {
  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  @javax.annotation.Nullable
  private String group;

  public static final String SERIALIZED_NAME_OPTION_CODE = "option_code";
  @SerializedName(SERIALIZED_NAME_OPTION_CODE)
  @javax.annotation.Nullable
  private String optionCode;

  public static final String SERIALIZED_NAME_OPTION_VALUE = "option_value";
  @SerializedName(SERIALIZED_NAME_OPTION_VALUE)
  @javax.annotation.Nullable
  private String optionValue;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public IpamsvcOptionItem() {
  }

  public IpamsvcOptionItem group(@javax.annotation.Nullable String group) {
    this.group = group;
    return this;
  }

  /**
   * The resource identifier.
   * @return group
   */
  @javax.annotation.Nullable
  public String getGroup() {
    return group;
  }

  public void setGroup(@javax.annotation.Nullable String group) {
    this.group = group;
  }


  public IpamsvcOptionItem optionCode(@javax.annotation.Nullable String optionCode) {
    this.optionCode = optionCode;
    return this;
  }

  /**
   * The resource identifier.
   * @return optionCode
   */
  @javax.annotation.Nullable
  public String getOptionCode() {
    return optionCode;
  }

  public void setOptionCode(@javax.annotation.Nullable String optionCode) {
    this.optionCode = optionCode;
  }


  public IpamsvcOptionItem optionValue(@javax.annotation.Nullable String optionValue) {
    this.optionValue = optionValue;
    return this;
  }

  /**
   * The option value.
   * @return optionValue
   */
  @javax.annotation.Nullable
  public String getOptionValue() {
    return optionValue;
  }

  public void setOptionValue(@javax.annotation.Nullable String optionValue) {
    this.optionValue = optionValue;
  }


  public IpamsvcOptionItem type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of item.  Valid values are: * _group_ * _option_
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcOptionItem ipamsvcOptionItem = (IpamsvcOptionItem) o;
    return Objects.equals(this.group, ipamsvcOptionItem.group) &&
        Objects.equals(this.optionCode, ipamsvcOptionItem.optionCode) &&
        Objects.equals(this.optionValue, ipamsvcOptionItem.optionValue) &&
        Objects.equals(this.type, ipamsvcOptionItem.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(group, optionCode, optionValue, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcOptionItem {\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    optionCode: ").append(toIndentedString(optionCode)).append("\n");
    sb.append("    optionValue: ").append(toIndentedString(optionValue)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("group");
    openapiFields.add("option_code");
    openapiFields.add("option_value");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcOptionItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcOptionItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcOptionItem is not found in the empty JSON string", IpamsvcOptionItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcOptionItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcOptionItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) && !jsonObj.get("group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group").toString()));
      }
      if ((jsonObj.get("option_code") != null && !jsonObj.get("option_code").isJsonNull()) && !jsonObj.get("option_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `option_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("option_code").toString()));
      }
      if ((jsonObj.get("option_value") != null && !jsonObj.get("option_value").isJsonNull()) && !jsonObj.get("option_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `option_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("option_value").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcOptionItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcOptionItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcOptionItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcOptionItem.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcOptionItem>() {
           @Override
           public void write(JsonWriter out, IpamsvcOptionItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcOptionItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcOptionItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcOptionItem
   * @throws IOException if the JSON string is invalid with respect to IpamsvcOptionItem
   */
  public static IpamsvcOptionItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcOptionItem.class);
  }

  /**
   * Convert an instance of IpamsvcOptionItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

