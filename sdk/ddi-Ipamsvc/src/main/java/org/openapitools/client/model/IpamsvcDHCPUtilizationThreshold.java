/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A __DHCPUtilizationThreshold__ object represents threshold settings for DHCP utilization.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcDHCPUtilizationThreshold {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  @javax.annotation.Nonnull
  private Boolean enabled;

  public static final String SERIALIZED_NAME_HIGH = "high";
  @SerializedName(SERIALIZED_NAME_HIGH)
  @javax.annotation.Nonnull
  private Long high;

  public static final String SERIALIZED_NAME_LOW = "low";
  @SerializedName(SERIALIZED_NAME_LOW)
  @javax.annotation.Nonnull
  private Long low;

  public IpamsvcDHCPUtilizationThreshold() {
  }

  public IpamsvcDHCPUtilizationThreshold enabled(@javax.annotation.Nonnull Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Indicates whether the DHCP utilization threshold is enabled or not.
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(@javax.annotation.Nonnull Boolean enabled) {
    this.enabled = enabled;
  }


  public IpamsvcDHCPUtilizationThreshold high(@javax.annotation.Nonnull Long high) {
    this.high = high;
    return this;
  }

  /**
   * The high threshold value for DHCP utilization in percentage.
   * maximum: 100
   * @return high
   */
  @javax.annotation.Nonnull
  public Long getHigh() {
    return high;
  }

  public void setHigh(@javax.annotation.Nonnull Long high) {
    this.high = high;
  }


  public IpamsvcDHCPUtilizationThreshold low(@javax.annotation.Nonnull Long low) {
    this.low = low;
    return this;
  }

  /**
   * The low threshold value for DHCP utilization in percentage.
   * maximum: 100
   * @return low
   */
  @javax.annotation.Nonnull
  public Long getLow() {
    return low;
  }

  public void setLow(@javax.annotation.Nonnull Long low) {
    this.low = low;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcDHCPUtilizationThreshold ipamsvcDHCPUtilizationThreshold = (IpamsvcDHCPUtilizationThreshold) o;
    return Objects.equals(this.enabled, ipamsvcDHCPUtilizationThreshold.enabled) &&
        Objects.equals(this.high, ipamsvcDHCPUtilizationThreshold.high) &&
        Objects.equals(this.low, ipamsvcDHCPUtilizationThreshold.low);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, high, low);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcDHCPUtilizationThreshold {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    high: ").append(toIndentedString(high)).append("\n");
    sb.append("    low: ").append(toIndentedString(low)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("high");
    openapiFields.add("low");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("high");
    openapiRequiredFields.add("low");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcDHCPUtilizationThreshold
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcDHCPUtilizationThreshold.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcDHCPUtilizationThreshold is not found in the empty JSON string", IpamsvcDHCPUtilizationThreshold.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcDHCPUtilizationThreshold.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcDHCPUtilizationThreshold` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IpamsvcDHCPUtilizationThreshold.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcDHCPUtilizationThreshold.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcDHCPUtilizationThreshold' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcDHCPUtilizationThreshold> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcDHCPUtilizationThreshold.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcDHCPUtilizationThreshold>() {
           @Override
           public void write(JsonWriter out, IpamsvcDHCPUtilizationThreshold value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcDHCPUtilizationThreshold read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcDHCPUtilizationThreshold given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcDHCPUtilizationThreshold
   * @throws IOException if the JSON string is invalid with respect to IpamsvcDHCPUtilizationThreshold
   */
  public static IpamsvcDHCPUtilizationThreshold fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcDHCPUtilizationThreshold.class);
  }

  /**
   * Convert an instance of IpamsvcDHCPUtilizationThreshold to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

