/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IpamsvcAssociatedHost;
import org.openapitools.client.model.IpamsvcHostAssociatedServer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A DHCP Service (_dhcp/service_) object associates DHCP configuration with the DHCP host services.   Automatically created and destroyed based on the hosts known to the platform.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcDHCPServiceInstance {
  public static final String SERIALIZED_NAME_ASSOCIATED_HOSTS = "associated_hosts";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_HOSTS)
  @javax.annotation.Nullable
  private List<IpamsvcAssociatedHost> associatedHosts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASSOCIATED_SERVER = "associated_server";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_SERVER)
  @javax.annotation.Nullable
  private IpamsvcHostAssociatedServer associatedServer;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_IP_SPACE = "ip_space";
  @SerializedName(SERIALIZED_NAME_IP_SPACE)
  @javax.annotation.Nullable
  private String ipSpace;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_PROVIDER_TYPE = "provider_type";
  @SerializedName(SERIALIZED_NAME_PROVIDER_TYPE)
  @javax.annotation.Nullable
  private String providerType;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Object tags;

  public IpamsvcDHCPServiceInstance() {
  }

  public IpamsvcDHCPServiceInstance(
     String comment, 
     String id, 
     String name, 
     String providerType
  ) {
    this();
    this.comment = comment;
    this.id = id;
    this.name = name;
    this.providerType = providerType;
  }

  public IpamsvcDHCPServiceInstance associatedHosts(@javax.annotation.Nullable List<IpamsvcAssociatedHost> associatedHosts) {
    this.associatedHosts = associatedHosts;
    return this;
  }

  public IpamsvcDHCPServiceInstance addAssociatedHostsItem(IpamsvcAssociatedHost associatedHostsItem) {
    if (this.associatedHosts == null) {
      this.associatedHosts = new ArrayList<>();
    }
    this.associatedHosts.add(associatedHostsItem);
    return this;
  }

  /**
   * Get associatedHosts
   * @return associatedHosts
   */
  @javax.annotation.Nullable
  public List<IpamsvcAssociatedHost> getAssociatedHosts() {
    return associatedHosts;
  }

  public void setAssociatedHosts(@javax.annotation.Nullable List<IpamsvcAssociatedHost> associatedHosts) {
    this.associatedHosts = associatedHosts;
  }


  public IpamsvcDHCPServiceInstance associatedServer(@javax.annotation.Nullable IpamsvcHostAssociatedServer associatedServer) {
    this.associatedServer = associatedServer;
    return this;
  }

  /**
   * Get associatedServer
   * @return associatedServer
   */
  @javax.annotation.Nullable
  public IpamsvcHostAssociatedServer getAssociatedServer() {
    return associatedServer;
  }

  public void setAssociatedServer(@javax.annotation.Nullable IpamsvcHostAssociatedServer associatedServer) {
    this.associatedServer = associatedServer;
  }


  /**
   * The comment for the service.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }



  /**
   * The resource identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public IpamsvcDHCPServiceInstance ipSpace(@javax.annotation.Nullable String ipSpace) {
    this.ipSpace = ipSpace;
    return this;
  }

  /**
   * The resource identifier.
   * @return ipSpace
   */
  @javax.annotation.Nullable
  public String getIpSpace() {
    return ipSpace;
  }

  public void setIpSpace(@javax.annotation.Nullable String ipSpace) {
    this.ipSpace = ipSpace;
  }


  /**
   * The display name of the service.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Defines the type of external provider. Allowed values:  * _bloxone_ddi_: provider type is BloxOne DDI,  * _microsoft_azure_: provider type is Microsoft Azure,  * _amazon_web_service_: provider type is Amazon Web Services,  * _microsoft_active_directory_: provider type is Microsoft Active Directory,  * _nios_ddi_: provider type is Google Cloud Platform.
   * @return providerType
   */
  @javax.annotation.Nullable
  public String getProviderType() {
    return providerType;
  }



  public IpamsvcDHCPServiceInstance tags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
    return this;
  }

  /**
   * The tags of the service host in JSON format.
   * @return tags
   */
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcDHCPServiceInstance ipamsvcDHCPServiceInstance = (IpamsvcDHCPServiceInstance) o;
    return Objects.equals(this.associatedHosts, ipamsvcDHCPServiceInstance.associatedHosts) &&
        Objects.equals(this.associatedServer, ipamsvcDHCPServiceInstance.associatedServer) &&
        Objects.equals(this.comment, ipamsvcDHCPServiceInstance.comment) &&
        Objects.equals(this.id, ipamsvcDHCPServiceInstance.id) &&
        Objects.equals(this.ipSpace, ipamsvcDHCPServiceInstance.ipSpace) &&
        Objects.equals(this.name, ipamsvcDHCPServiceInstance.name) &&
        Objects.equals(this.providerType, ipamsvcDHCPServiceInstance.providerType) &&
        Objects.equals(this.tags, ipamsvcDHCPServiceInstance.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(associatedHosts, associatedServer, comment, id, ipSpace, name, providerType, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcDHCPServiceInstance {\n");
    sb.append("    associatedHosts: ").append(toIndentedString(associatedHosts)).append("\n");
    sb.append("    associatedServer: ").append(toIndentedString(associatedServer)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ipSpace: ").append(toIndentedString(ipSpace)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    providerType: ").append(toIndentedString(providerType)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("associated_hosts");
    openapiFields.add("associated_server");
    openapiFields.add("comment");
    openapiFields.add("id");
    openapiFields.add("ip_space");
    openapiFields.add("name");
    openapiFields.add("provider_type");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcDHCPServiceInstance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcDHCPServiceInstance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcDHCPServiceInstance is not found in the empty JSON string", IpamsvcDHCPServiceInstance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcDHCPServiceInstance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcDHCPServiceInstance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("associated_hosts") != null && !jsonObj.get("associated_hosts").isJsonNull()) {
        JsonArray jsonArrayassociatedHosts = jsonObj.getAsJsonArray("associated_hosts");
        if (jsonArrayassociatedHosts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("associated_hosts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `associated_hosts` to be an array in the JSON string but got `%s`", jsonObj.get("associated_hosts").toString()));
          }

          // validate the optional field `associated_hosts` (array)
          for (int i = 0; i < jsonArrayassociatedHosts.size(); i++) {
            IpamsvcAssociatedHost.validateJsonElement(jsonArrayassociatedHosts.get(i));
          };
        }
      }
      // validate the optional field `associated_server`
      if (jsonObj.get("associated_server") != null && !jsonObj.get("associated_server").isJsonNull()) {
        IpamsvcHostAssociatedServer.validateJsonElement(jsonObj.get("associated_server"));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("ip_space") != null && !jsonObj.get("ip_space").isJsonNull()) && !jsonObj.get("ip_space").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_space` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_space").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("provider_type") != null && !jsonObj.get("provider_type").isJsonNull()) && !jsonObj.get("provider_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcDHCPServiceInstance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcDHCPServiceInstance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcDHCPServiceInstance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcDHCPServiceInstance.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcDHCPServiceInstance>() {
           @Override
           public void write(JsonWriter out, IpamsvcDHCPServiceInstance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcDHCPServiceInstance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcDHCPServiceInstance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcDHCPServiceInstance
   * @throws IOException if the JSON string is invalid with respect to IpamsvcDHCPServiceInstance
   */
  public static IpamsvcDHCPServiceInstance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcDHCPServiceInstance.class);
  }

  /**
   * Convert an instance of IpamsvcDHCPServiceInstance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

