/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IpamsvcDHCPPacketStats;
import org.openapitools.client.model.IpamsvcHAGroup;
import org.openapitools.client.model.IpamsvcHost;
import org.openapitools.client.model.IpamsvcSubnet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response format to retrieve __HAGroup__, __Subnet__ and __DHCPPacketStats__ objects associated with the DHCP __Host__ object. The host in question is also included in the output, for the convenience reasons.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcHostAssociationsResponse {
  public static final String SERIALIZED_NAME_DHCP_PKT_STATS = "dhcp_pkt_stats";
  @SerializedName(SERIALIZED_NAME_DHCP_PKT_STATS)
  @javax.annotation.Nullable
  private IpamsvcDHCPPacketStats dhcpPktStats;

  public static final String SERIALIZED_NAME_HA_GROUPS = "ha_groups";
  @SerializedName(SERIALIZED_NAME_HA_GROUPS)
  @javax.annotation.Nullable
  private List<IpamsvcHAGroup> haGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  @javax.annotation.Nullable
  private IpamsvcHost host;

  public static final String SERIALIZED_NAME_SUBNETS = "subnets";
  @SerializedName(SERIALIZED_NAME_SUBNETS)
  @javax.annotation.Nullable
  private List<IpamsvcSubnet> subnets = new ArrayList<>();

  public IpamsvcHostAssociationsResponse() {
  }

  public IpamsvcHostAssociationsResponse dhcpPktStats(@javax.annotation.Nullable IpamsvcDHCPPacketStats dhcpPktStats) {
    this.dhcpPktStats = dhcpPktStats;
    return this;
  }

  /**
   * Get dhcpPktStats
   * @return dhcpPktStats
   */
  @javax.annotation.Nullable
  public IpamsvcDHCPPacketStats getDhcpPktStats() {
    return dhcpPktStats;
  }

  public void setDhcpPktStats(@javax.annotation.Nullable IpamsvcDHCPPacketStats dhcpPktStats) {
    this.dhcpPktStats = dhcpPktStats;
  }


  public IpamsvcHostAssociationsResponse haGroups(@javax.annotation.Nullable List<IpamsvcHAGroup> haGroups) {
    this.haGroups = haGroups;
    return this;
  }

  public IpamsvcHostAssociationsResponse addHaGroupsItem(IpamsvcHAGroup haGroupsItem) {
    if (this.haGroups == null) {
      this.haGroups = new ArrayList<>();
    }
    this.haGroups.add(haGroupsItem);
    return this;
  }

  /**
   * The list of HA groups.
   * @return haGroups
   */
  @javax.annotation.Nullable
  public List<IpamsvcHAGroup> getHaGroups() {
    return haGroups;
  }

  public void setHaGroups(@javax.annotation.Nullable List<IpamsvcHAGroup> haGroups) {
    this.haGroups = haGroups;
  }


  public IpamsvcHostAssociationsResponse host(@javax.annotation.Nullable IpamsvcHost host) {
    this.host = host;
    return this;
  }

  /**
   * Get host
   * @return host
   */
  @javax.annotation.Nullable
  public IpamsvcHost getHost() {
    return host;
  }

  public void setHost(@javax.annotation.Nullable IpamsvcHost host) {
    this.host = host;
  }


  public IpamsvcHostAssociationsResponse subnets(@javax.annotation.Nullable List<IpamsvcSubnet> subnets) {
    this.subnets = subnets;
    return this;
  }

  public IpamsvcHostAssociationsResponse addSubnetsItem(IpamsvcSubnet subnetsItem) {
    if (this.subnets == null) {
      this.subnets = new ArrayList<>();
    }
    this.subnets.add(subnetsItem);
    return this;
  }

  /**
   * The list of subnets.
   * @return subnets
   */
  @javax.annotation.Nullable
  public List<IpamsvcSubnet> getSubnets() {
    return subnets;
  }

  public void setSubnets(@javax.annotation.Nullable List<IpamsvcSubnet> subnets) {
    this.subnets = subnets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcHostAssociationsResponse ipamsvcHostAssociationsResponse = (IpamsvcHostAssociationsResponse) o;
    return Objects.equals(this.dhcpPktStats, ipamsvcHostAssociationsResponse.dhcpPktStats) &&
        Objects.equals(this.haGroups, ipamsvcHostAssociationsResponse.haGroups) &&
        Objects.equals(this.host, ipamsvcHostAssociationsResponse.host) &&
        Objects.equals(this.subnets, ipamsvcHostAssociationsResponse.subnets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dhcpPktStats, haGroups, host, subnets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcHostAssociationsResponse {\n");
    sb.append("    dhcpPktStats: ").append(toIndentedString(dhcpPktStats)).append("\n");
    sb.append("    haGroups: ").append(toIndentedString(haGroups)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    subnets: ").append(toIndentedString(subnets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dhcp_pkt_stats");
    openapiFields.add("ha_groups");
    openapiFields.add("host");
    openapiFields.add("subnets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcHostAssociationsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcHostAssociationsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcHostAssociationsResponse is not found in the empty JSON string", IpamsvcHostAssociationsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcHostAssociationsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcHostAssociationsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dhcp_pkt_stats`
      if (jsonObj.get("dhcp_pkt_stats") != null && !jsonObj.get("dhcp_pkt_stats").isJsonNull()) {
        IpamsvcDHCPPacketStats.validateJsonElement(jsonObj.get("dhcp_pkt_stats"));
      }
      if (jsonObj.get("ha_groups") != null && !jsonObj.get("ha_groups").isJsonNull()) {
        JsonArray jsonArrayhaGroups = jsonObj.getAsJsonArray("ha_groups");
        if (jsonArrayhaGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ha_groups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ha_groups` to be an array in the JSON string but got `%s`", jsonObj.get("ha_groups").toString()));
          }

          // validate the optional field `ha_groups` (array)
          for (int i = 0; i < jsonArrayhaGroups.size(); i++) {
            IpamsvcHAGroup.validateJsonElement(jsonArrayhaGroups.get(i));
          };
        }
      }
      // validate the optional field `host`
      if (jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) {
        IpamsvcHost.validateJsonElement(jsonObj.get("host"));
      }
      if (jsonObj.get("subnets") != null && !jsonObj.get("subnets").isJsonNull()) {
        JsonArray jsonArraysubnets = jsonObj.getAsJsonArray("subnets");
        if (jsonArraysubnets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subnets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subnets` to be an array in the JSON string but got `%s`", jsonObj.get("subnets").toString()));
          }

          // validate the optional field `subnets` (array)
          for (int i = 0; i < jsonArraysubnets.size(); i++) {
            IpamsvcSubnet.validateJsonElement(jsonArraysubnets.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcHostAssociationsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcHostAssociationsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcHostAssociationsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcHostAssociationsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcHostAssociationsResponse>() {
           @Override
           public void write(JsonWriter out, IpamsvcHostAssociationsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcHostAssociationsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcHostAssociationsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcHostAssociationsResponse
   * @throws IOException if the JSON string is invalid with respect to IpamsvcHostAssociationsResponse
   */
  public static IpamsvcHostAssociationsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcHostAssociationsResponse.class);
  }

  /**
   * Convert an instance of IpamsvcHostAssociationsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

