/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ASM enable group of fields.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcAsmEnableBlock {
  public static final String SERIALIZED_NAME_ENABLE = "enable";
  @SerializedName(SERIALIZED_NAME_ENABLE)
  @javax.annotation.Nullable
  private Boolean enable;

  public static final String SERIALIZED_NAME_ENABLE_NOTIFICATION = "enable_notification";
  @SerializedName(SERIALIZED_NAME_ENABLE_NOTIFICATION)
  @javax.annotation.Nullable
  private Boolean enableNotification;

  public static final String SERIALIZED_NAME_REENABLE_DATE = "reenable_date";
  @SerializedName(SERIALIZED_NAME_REENABLE_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime reenableDate;

  public IpamsvcAsmEnableBlock() {
  }

  public IpamsvcAsmEnableBlock enable(@javax.annotation.Nullable Boolean enable) {
    this.enable = enable;
    return this;
  }

  /**
   * Indicates whether Automated Scope Management is enabled or not.
   * @return enable
   */
  @javax.annotation.Nullable
  public Boolean getEnable() {
    return enable;
  }

  public void setEnable(@javax.annotation.Nullable Boolean enable) {
    this.enable = enable;
  }


  public IpamsvcAsmEnableBlock enableNotification(@javax.annotation.Nullable Boolean enableNotification) {
    this.enableNotification = enableNotification;
    return this;
  }

  /**
   * Indicates whether sending notifications to the users is enabled or not.
   * @return enableNotification
   */
  @javax.annotation.Nullable
  public Boolean getEnableNotification() {
    return enableNotification;
  }

  public void setEnableNotification(@javax.annotation.Nullable Boolean enableNotification) {
    this.enableNotification = enableNotification;
  }


  public IpamsvcAsmEnableBlock reenableDate(@javax.annotation.Nullable OffsetDateTime reenableDate) {
    this.reenableDate = reenableDate;
    return this;
  }

  /**
   * The date at which notifications will be re-enabled automatically.
   * @return reenableDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReenableDate() {
    return reenableDate;
  }

  public void setReenableDate(@javax.annotation.Nullable OffsetDateTime reenableDate) {
    this.reenableDate = reenableDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcAsmEnableBlock ipamsvcAsmEnableBlock = (IpamsvcAsmEnableBlock) o;
    return Objects.equals(this.enable, ipamsvcAsmEnableBlock.enable) &&
        Objects.equals(this.enableNotification, ipamsvcAsmEnableBlock.enableNotification) &&
        Objects.equals(this.reenableDate, ipamsvcAsmEnableBlock.reenableDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enable, enableNotification, reenableDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcAsmEnableBlock {\n");
    sb.append("    enable: ").append(toIndentedString(enable)).append("\n");
    sb.append("    enableNotification: ").append(toIndentedString(enableNotification)).append("\n");
    sb.append("    reenableDate: ").append(toIndentedString(reenableDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enable");
    openapiFields.add("enable_notification");
    openapiFields.add("reenable_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcAsmEnableBlock
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcAsmEnableBlock.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcAsmEnableBlock is not found in the empty JSON string", IpamsvcAsmEnableBlock.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcAsmEnableBlock.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcAsmEnableBlock` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcAsmEnableBlock.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcAsmEnableBlock' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcAsmEnableBlock> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcAsmEnableBlock.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcAsmEnableBlock>() {
           @Override
           public void write(JsonWriter out, IpamsvcAsmEnableBlock value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcAsmEnableBlock read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcAsmEnableBlock given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcAsmEnableBlock
   * @throws IOException if the JSON string is invalid with respect to IpamsvcAsmEnableBlock
   */
  public static IpamsvcAsmEnableBlock fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcAsmEnableBlock.class);
  }

  /**
   * Convert an instance of IpamsvcAsmEnableBlock to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

