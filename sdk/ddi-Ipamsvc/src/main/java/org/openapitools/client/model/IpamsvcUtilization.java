/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The __Utilization__ object represents IP address usage statistics for an object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcUtilization {
  public static final String SERIALIZED_NAME_ABANDON_UTILIZATION = "abandon_utilization";
  @SerializedName(SERIALIZED_NAME_ABANDON_UTILIZATION)
  @javax.annotation.Nullable
  private Long abandonUtilization;

  public static final String SERIALIZED_NAME_ABANDONED = "abandoned";
  @SerializedName(SERIALIZED_NAME_ABANDONED)
  @javax.annotation.Nullable
  private String abandoned;

  public static final String SERIALIZED_NAME_DYNAMIC = "dynamic";
  @SerializedName(SERIALIZED_NAME_DYNAMIC)
  @javax.annotation.Nullable
  private String dynamic;

  public static final String SERIALIZED_NAME_FREE = "free";
  @SerializedName(SERIALIZED_NAME_FREE)
  @javax.annotation.Nullable
  private String free;

  public static final String SERIALIZED_NAME_STATIC = "static";
  @SerializedName(SERIALIZED_NAME_STATIC)
  @javax.annotation.Nullable
  private String _static;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  @javax.annotation.Nullable
  private String total;

  public static final String SERIALIZED_NAME_USED = "used";
  @SerializedName(SERIALIZED_NAME_USED)
  @javax.annotation.Nullable
  private String used;

  public static final String SERIALIZED_NAME_UTILIZATION = "utilization";
  @SerializedName(SERIALIZED_NAME_UTILIZATION)
  @javax.annotation.Nullable
  private Long utilization;

  public IpamsvcUtilization() {
  }

  public IpamsvcUtilization(
     Long abandonUtilization, 
     String abandoned, 
     String dynamic, 
     String free, 
     String _static, 
     String total, 
     String used, 
     Long utilization
  ) {
    this();
    this.abandonUtilization = abandonUtilization;
    this.abandoned = abandoned;
    this.dynamic = dynamic;
    this.free = free;
    this._static = _static;
    this.total = total;
    this.used = used;
    this.utilization = utilization;
  }

  /**
   * The percentage of abandoned IP addresses relative to the total IP addresses available in the scope of the object.
   * maximum: 100
   * @return abandonUtilization
   */
  @javax.annotation.Nullable
  public Long getAbandonUtilization() {
    return abandonUtilization;
  }



  /**
   * The number of IP addresses in the scope of the object which are in the abandoned state (issued by a DHCP server and then declined by the client).
   * @return abandoned
   */
  @javax.annotation.Nullable
  public String getAbandoned() {
    return abandoned;
  }



  /**
   * The number of IP addresses handed out by DHCP in the scope of the object. This includes all leased addresses, fixed addresses that are defined but not currently leased and abandoned leases.
   * @return dynamic
   */
  @javax.annotation.Nullable
  public String getDynamic() {
    return dynamic;
  }



  /**
   * The number of IP addresses available in the scope of the object.
   * @return free
   */
  @javax.annotation.Nullable
  public String getFree() {
    return free;
  }



  /**
   * The number of defined IP addresses such as reservations or DNS records. It can be computed as _static_ &#x3D; _used_ - _dynamic_.
   * @return _static
   */
  @javax.annotation.Nullable
  public String getStatic() {
    return _static;
  }



  /**
   * The total number of IP addresses available in the scope of the object.
   * @return total
   */
  @javax.annotation.Nullable
  public String getTotal() {
    return total;
  }



  /**
   * The number of IP addresses used in the scope of the object.
   * @return used
   */
  @javax.annotation.Nullable
  public String getUsed() {
    return used;
  }



  /**
   * The percentage of used IP addresses relative to the total IP addresses available in the scope of the object.
   * maximum: 100
   * @return utilization
   */
  @javax.annotation.Nullable
  public Long getUtilization() {
    return utilization;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcUtilization ipamsvcUtilization = (IpamsvcUtilization) o;
    return Objects.equals(this.abandonUtilization, ipamsvcUtilization.abandonUtilization) &&
        Objects.equals(this.abandoned, ipamsvcUtilization.abandoned) &&
        Objects.equals(this.dynamic, ipamsvcUtilization.dynamic) &&
        Objects.equals(this.free, ipamsvcUtilization.free) &&
        Objects.equals(this._static, ipamsvcUtilization._static) &&
        Objects.equals(this.total, ipamsvcUtilization.total) &&
        Objects.equals(this.used, ipamsvcUtilization.used) &&
        Objects.equals(this.utilization, ipamsvcUtilization.utilization);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abandonUtilization, abandoned, dynamic, free, _static, total, used, utilization);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcUtilization {\n");
    sb.append("    abandonUtilization: ").append(toIndentedString(abandonUtilization)).append("\n");
    sb.append("    abandoned: ").append(toIndentedString(abandoned)).append("\n");
    sb.append("    dynamic: ").append(toIndentedString(dynamic)).append("\n");
    sb.append("    free: ").append(toIndentedString(free)).append("\n");
    sb.append("    _static: ").append(toIndentedString(_static)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    used: ").append(toIndentedString(used)).append("\n");
    sb.append("    utilization: ").append(toIndentedString(utilization)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abandon_utilization");
    openapiFields.add("abandoned");
    openapiFields.add("dynamic");
    openapiFields.add("free");
    openapiFields.add("static");
    openapiFields.add("total");
    openapiFields.add("used");
    openapiFields.add("utilization");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcUtilization
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcUtilization.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcUtilization is not found in the empty JSON string", IpamsvcUtilization.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcUtilization.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcUtilization` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("abandoned") != null && !jsonObj.get("abandoned").isJsonNull()) && !jsonObj.get("abandoned").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abandoned` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abandoned").toString()));
      }
      if ((jsonObj.get("dynamic") != null && !jsonObj.get("dynamic").isJsonNull()) && !jsonObj.get("dynamic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dynamic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dynamic").toString()));
      }
      if ((jsonObj.get("free") != null && !jsonObj.get("free").isJsonNull()) && !jsonObj.get("free").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `free` to be a primitive type in the JSON string but got `%s`", jsonObj.get("free").toString()));
      }
      if ((jsonObj.get("static") != null && !jsonObj.get("static").isJsonNull()) && !jsonObj.get("static").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `static` to be a primitive type in the JSON string but got `%s`", jsonObj.get("static").toString()));
      }
      if ((jsonObj.get("total") != null && !jsonObj.get("total").isJsonNull()) && !jsonObj.get("total").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total").toString()));
      }
      if ((jsonObj.get("used") != null && !jsonObj.get("used").isJsonNull()) && !jsonObj.get("used").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `used` to be a primitive type in the JSON string but got `%s`", jsonObj.get("used").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcUtilization.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcUtilization' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcUtilization> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcUtilization.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcUtilization>() {
           @Override
           public void write(JsonWriter out, IpamsvcUtilization value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcUtilization read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcUtilization given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcUtilization
   * @throws IOException if the JSON string is invalid with respect to IpamsvcUtilization
   */
  public static IpamsvcUtilization fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcUtilization.class);
  }

  /**
   * Convert an instance of IpamsvcUtilization to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

