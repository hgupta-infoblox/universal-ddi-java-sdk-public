/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IpamsvcHAGroupHeartbeats;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An __HAGroupHost__ object (_dhcp/ha_group_host_) represents an on-prem host belonging to an HA Group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcHAGroupHost {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nullable
  private String address;

  public static final String SERIALIZED_NAME_HEARTBEATS = "heartbeats";
  @SerializedName(SERIALIZED_NAME_HEARTBEATS)
  @javax.annotation.Nullable
  private List<IpamsvcHAGroupHeartbeats> heartbeats = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  @javax.annotation.Nonnull
  private String host;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  @javax.annotation.Nullable
  private Long port;

  public static final String SERIALIZED_NAME_PORT_V6 = "port_v6";
  @SerializedName(SERIALIZED_NAME_PORT_V6)
  @javax.annotation.Nullable
  private Long portV6;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  @javax.annotation.Nullable
  private String role;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nullable
  private String state;

  public static final String SERIALIZED_NAME_STATE_V6 = "state_v6";
  @SerializedName(SERIALIZED_NAME_STATE_V6)
  @javax.annotation.Nullable
  private String stateV6;

  public IpamsvcHAGroupHost() {
  }

  public IpamsvcHAGroupHost(
     Long port, 
     Long portV6
  ) {
    this();
    this.port = port;
    this.portV6 = portV6;
  }

  public IpamsvcHAGroupHost address(@javax.annotation.Nullable String address) {
    this.address = address;
    return this;
  }

  /**
   * The address on which this host listens.
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nullable String address) {
    this.address = address;
  }


  public IpamsvcHAGroupHost heartbeats(@javax.annotation.Nullable List<IpamsvcHAGroupHeartbeats> heartbeats) {
    this.heartbeats = heartbeats;
    return this;
  }

  public IpamsvcHAGroupHost addHeartbeatsItem(IpamsvcHAGroupHeartbeats heartbeatsItem) {
    if (this.heartbeats == null) {
      this.heartbeats = new ArrayList<>();
    }
    this.heartbeats.add(heartbeatsItem);
    return this;
  }

  /**
   * Last successful heartbeat received from its peer/s. This field is set when the _collect_stats_ is set to _true_ in the _GET_ _/dhcp/ha_group_ request.
   * @return heartbeats
   */
  @javax.annotation.Nullable
  public List<IpamsvcHAGroupHeartbeats> getHeartbeats() {
    return heartbeats;
  }

  public void setHeartbeats(@javax.annotation.Nullable List<IpamsvcHAGroupHeartbeats> heartbeats) {
    this.heartbeats = heartbeats;
  }


  public IpamsvcHAGroupHost host(@javax.annotation.Nonnull String host) {
    this.host = host;
    return this;
  }

  /**
   * The resource identifier.
   * @return host
   */
  @javax.annotation.Nonnull
  public String getHost() {
    return host;
  }

  public void setHost(@javax.annotation.Nonnull String host) {
    this.host = host;
  }


  /**
   * The HA port.
   * @return port
   */
  @javax.annotation.Nullable
  public Long getPort() {
    return port;
  }



  /**
   * The HA port used for IPv6 communication.
   * @return portV6
   */
  @javax.annotation.Nullable
  public Long getPortV6() {
    return portV6;
  }



  public IpamsvcHAGroupHost role(@javax.annotation.Nullable String role) {
    this.role = role;
    return this;
  }

  /**
   * The role of this host in the HA relationship: _active_ or _passive_.
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(@javax.annotation.Nullable String role) {
    this.role = role;
  }


  public IpamsvcHAGroupHost state(@javax.annotation.Nullable String state) {
    this.state = state;
    return this;
  }

  /**
   * The state of DHCP on the host. This field is set when the _collect_stats_ is set to _true_ in the _GET_ _/dhcp/ha_group_ request.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(@javax.annotation.Nullable String state) {
    this.state = state;
  }


  public IpamsvcHAGroupHost stateV6(@javax.annotation.Nullable String stateV6) {
    this.stateV6 = stateV6;
    return this;
  }

  /**
   * The state of DHCPv6 on the host. This field is set when the _collect_stats_ is set to _true_ in the _GET_ _/dhcp/ha_group_ request.
   * @return stateV6
   */
  @javax.annotation.Nullable
  public String getStateV6() {
    return stateV6;
  }

  public void setStateV6(@javax.annotation.Nullable String stateV6) {
    this.stateV6 = stateV6;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcHAGroupHost ipamsvcHAGroupHost = (IpamsvcHAGroupHost) o;
    return Objects.equals(this.address, ipamsvcHAGroupHost.address) &&
        Objects.equals(this.heartbeats, ipamsvcHAGroupHost.heartbeats) &&
        Objects.equals(this.host, ipamsvcHAGroupHost.host) &&
        Objects.equals(this.port, ipamsvcHAGroupHost.port) &&
        Objects.equals(this.portV6, ipamsvcHAGroupHost.portV6) &&
        Objects.equals(this.role, ipamsvcHAGroupHost.role) &&
        Objects.equals(this.state, ipamsvcHAGroupHost.state) &&
        Objects.equals(this.stateV6, ipamsvcHAGroupHost.stateV6);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, heartbeats, host, port, portV6, role, state, stateV6);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcHAGroupHost {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    heartbeats: ").append(toIndentedString(heartbeats)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    portV6: ").append(toIndentedString(portV6)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateV6: ").append(toIndentedString(stateV6)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("heartbeats");
    openapiFields.add("host");
    openapiFields.add("port");
    openapiFields.add("port_v6");
    openapiFields.add("role");
    openapiFields.add("state");
    openapiFields.add("state_v6");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("host");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcHAGroupHost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcHAGroupHost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcHAGroupHost is not found in the empty JSON string", IpamsvcHAGroupHost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcHAGroupHost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcHAGroupHost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IpamsvcHAGroupHost.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if (jsonObj.get("heartbeats") != null && !jsonObj.get("heartbeats").isJsonNull()) {
        JsonArray jsonArrayheartbeats = jsonObj.getAsJsonArray("heartbeats");
        if (jsonArrayheartbeats != null) {
          // ensure the json data is an array
          if (!jsonObj.get("heartbeats").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `heartbeats` to be an array in the JSON string but got `%s`", jsonObj.get("heartbeats").toString()));
          }

          // validate the optional field `heartbeats` (array)
          for (int i = 0; i < jsonArrayheartbeats.size(); i++) {
            IpamsvcHAGroupHeartbeats.validateJsonElement(jsonArrayheartbeats.get(i));
          };
        }
      }
      if (!jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("state_v6") != null && !jsonObj.get("state_v6").isJsonNull()) && !jsonObj.get("state_v6").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_v6` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_v6").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcHAGroupHost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcHAGroupHost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcHAGroupHost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcHAGroupHost.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcHAGroupHost>() {
           @Override
           public void write(JsonWriter out, IpamsvcHAGroupHost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcHAGroupHost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcHAGroupHost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcHAGroupHost
   * @throws IOException if the JSON string is invalid with respect to IpamsvcHAGroupHost
   */
  public static IpamsvcHAGroupHost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcHAGroupHost.class);
  }

  /**
   * Convert an instance of IpamsvcHAGroupHost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

