/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IpamsvcLeaseAddress;
import org.openapitools.client.model.IpamsvcLeaseRange;
import org.openapitools.client.model.IpamsvcLeaseSubnet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The __LeasesCommand__ (_dhcp/leases_command_) is used to perform an action on a lease or a set of leases defined by the list of IP addresses or Subnet or Range. Host(s) owning the lease(s) must be available for this action to succeed. The command is executed asynchronously.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcLeasesCommand {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nullable
  private List<IpamsvcLeaseAddress> address = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMAND = "command";
  @SerializedName(SERIALIZED_NAME_COMMAND)
  @javax.annotation.Nonnull
  private String command;

  public static final String SERIALIZED_NAME_RANGE = "range";
  @SerializedName(SERIALIZED_NAME_RANGE)
  @javax.annotation.Nullable
  private List<IpamsvcLeaseRange> range = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBNET = "subnet";
  @SerializedName(SERIALIZED_NAME_SUBNET)
  @javax.annotation.Nullable
  private List<IpamsvcLeaseSubnet> subnet = new ArrayList<>();

  public IpamsvcLeasesCommand() {
  }

  public IpamsvcLeasesCommand address(@javax.annotation.Nullable List<IpamsvcLeaseAddress> address) {
    this.address = address;
    return this;
  }

  public IpamsvcLeasesCommand addAddressItem(IpamsvcLeaseAddress addressItem) {
    if (this.address == null) {
      this.address = new ArrayList<>();
    }
    this.address.add(addressItem);
    return this;
  }

  /**
   * The list of IP addresses to execute the \&quot;command\&quot; on. It can be 1 or more IP addresses.
   * @return address
   */
  @javax.annotation.Nullable
  public List<IpamsvcLeaseAddress> getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nullable List<IpamsvcLeaseAddress> address) {
    this.address = address;
  }


  public IpamsvcLeasesCommand command(@javax.annotation.Nonnull String command) {
    this.command = command;
    return this;
  }

  /**
   * The command to perform on the lease(s).  Valid values are:  | command       | description | | :------       | ----------- | | _clear_       | Removes selected lease(s) from the DHCP server(s). This will NOT affect the client that issued the lease. | | _resend-ddns_ | Resends a request to kea-dhcp-ddns to update DNS for selected lease(s). |
   * @return command
   */
  @javax.annotation.Nonnull
  public String getCommand() {
    return command;
  }

  public void setCommand(@javax.annotation.Nonnull String command) {
    this.command = command;
  }


  public IpamsvcLeasesCommand range(@javax.annotation.Nullable List<IpamsvcLeaseRange> range) {
    this.range = range;
    return this;
  }

  public IpamsvcLeasesCommand addRangeItem(IpamsvcLeaseRange rangeItem) {
    if (this.range == null) {
      this.range = new ArrayList<>();
    }
    this.range.add(rangeItem);
    return this;
  }

  /**
   * The list of ranges to execute the \&quot;command\&quot; on. For now it is limited to 1 range.
   * @return range
   */
  @javax.annotation.Nullable
  public List<IpamsvcLeaseRange> getRange() {
    return range;
  }

  public void setRange(@javax.annotation.Nullable List<IpamsvcLeaseRange> range) {
    this.range = range;
  }


  public IpamsvcLeasesCommand subnet(@javax.annotation.Nullable List<IpamsvcLeaseSubnet> subnet) {
    this.subnet = subnet;
    return this;
  }

  public IpamsvcLeasesCommand addSubnetItem(IpamsvcLeaseSubnet subnetItem) {
    if (this.subnet == null) {
      this.subnet = new ArrayList<>();
    }
    this.subnet.add(subnetItem);
    return this;
  }

  /**
   * The list of subnets to execute the \&quot;command\&quot; on. For now it is limited to 1 subnet.
   * @return subnet
   */
  @javax.annotation.Nullable
  public List<IpamsvcLeaseSubnet> getSubnet() {
    return subnet;
  }

  public void setSubnet(@javax.annotation.Nullable List<IpamsvcLeaseSubnet> subnet) {
    this.subnet = subnet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcLeasesCommand ipamsvcLeasesCommand = (IpamsvcLeasesCommand) o;
    return Objects.equals(this.address, ipamsvcLeasesCommand.address) &&
        Objects.equals(this.command, ipamsvcLeasesCommand.command) &&
        Objects.equals(this.range, ipamsvcLeasesCommand.range) &&
        Objects.equals(this.subnet, ipamsvcLeasesCommand.subnet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, command, range, subnet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcLeasesCommand {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("    subnet: ").append(toIndentedString(subnet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("command");
    openapiFields.add("range");
    openapiFields.add("subnet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("command");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcLeasesCommand
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcLeasesCommand.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcLeasesCommand is not found in the empty JSON string", IpamsvcLeasesCommand.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcLeasesCommand.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcLeasesCommand` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IpamsvcLeasesCommand.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        JsonArray jsonArrayaddress = jsonObj.getAsJsonArray("address");
        if (jsonArrayaddress != null) {
          // ensure the json data is an array
          if (!jsonObj.get("address").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `address` to be an array in the JSON string but got `%s`", jsonObj.get("address").toString()));
          }

          // validate the optional field `address` (array)
          for (int i = 0; i < jsonArrayaddress.size(); i++) {
            IpamsvcLeaseAddress.validateJsonElement(jsonArrayaddress.get(i));
          };
        }
      }
      if (!jsonObj.get("command").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `command` to be a primitive type in the JSON string but got `%s`", jsonObj.get("command").toString()));
      }
      if (jsonObj.get("range") != null && !jsonObj.get("range").isJsonNull()) {
        JsonArray jsonArrayrange = jsonObj.getAsJsonArray("range");
        if (jsonArrayrange != null) {
          // ensure the json data is an array
          if (!jsonObj.get("range").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `range` to be an array in the JSON string but got `%s`", jsonObj.get("range").toString()));
          }

          // validate the optional field `range` (array)
          for (int i = 0; i < jsonArrayrange.size(); i++) {
            IpamsvcLeaseRange.validateJsonElement(jsonArrayrange.get(i));
          };
        }
      }
      if (jsonObj.get("subnet") != null && !jsonObj.get("subnet").isJsonNull()) {
        JsonArray jsonArraysubnet = jsonObj.getAsJsonArray("subnet");
        if (jsonArraysubnet != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subnet").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subnet` to be an array in the JSON string but got `%s`", jsonObj.get("subnet").toString()));
          }

          // validate the optional field `subnet` (array)
          for (int i = 0; i < jsonArraysubnet.size(); i++) {
            IpamsvcLeaseSubnet.validateJsonElement(jsonArraysubnet.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcLeasesCommand.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcLeasesCommand' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcLeasesCommand> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcLeasesCommand.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcLeasesCommand>() {
           @Override
           public void write(JsonWriter out, IpamsvcLeasesCommand value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcLeasesCommand read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcLeasesCommand given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcLeasesCommand
   * @throws IOException if the JSON string is invalid with respect to IpamsvcLeasesCommand
   */
  public static IpamsvcLeasesCommand fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcLeasesCommand.class);
  }

  /**
   * Convert an instance of IpamsvcLeasesCommand to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

