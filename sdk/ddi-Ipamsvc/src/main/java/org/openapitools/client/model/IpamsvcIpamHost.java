/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IpamsvcHostAddress;
import org.openapitools.client.model.IpamsvcHostName;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The __IpamHost__ object (_ipam/host_) represents any network connected equipment that is assigned one or more IP addresses.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcIpamHost {
  public static final String SERIALIZED_NAME_ADDRESSES = "addresses";
  @SerializedName(SERIALIZED_NAME_ADDRESSES)
  @javax.annotation.Nullable
  private List<IpamsvcHostAddress> addresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTO_GENERATE_RECORDS = "auto_generate_records";
  @SerializedName(SERIALIZED_NAME_AUTO_GENERATE_RECORDS)
  @javax.annotation.Nullable
  private Boolean autoGenerateRecords;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_HOST_NAMES = "host_names";
  @SerializedName(SERIALIZED_NAME_HOST_NAMES)
  @javax.annotation.Nullable
  private List<IpamsvcHostName> hostNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Object tags;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  public IpamsvcIpamHost() {
  }

  public IpamsvcIpamHost(
     OffsetDateTime createdAt, 
     String id, 
     OffsetDateTime updatedAt
  ) {
    this();
    this.createdAt = createdAt;
    this.id = id;
    this.updatedAt = updatedAt;
  }

  public IpamsvcIpamHost addresses(@javax.annotation.Nullable List<IpamsvcHostAddress> addresses) {
    this.addresses = addresses;
    return this;
  }

  public IpamsvcIpamHost addAddressesItem(IpamsvcHostAddress addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

  /**
   * The list of all addresses associated with the IPAM host, which may be in different IP spaces.
   * @return addresses
   */
  @javax.annotation.Nullable
  public List<IpamsvcHostAddress> getAddresses() {
    return addresses;
  }

  public void setAddresses(@javax.annotation.Nullable List<IpamsvcHostAddress> addresses) {
    this.addresses = addresses;
  }


  public IpamsvcIpamHost autoGenerateRecords(@javax.annotation.Nullable Boolean autoGenerateRecords) {
    this.autoGenerateRecords = autoGenerateRecords;
    return this;
  }

  /**
   * This flag specifies if resource records have to be auto generated for the host.
   * @return autoGenerateRecords
   */
  @javax.annotation.Nullable
  public Boolean getAutoGenerateRecords() {
    return autoGenerateRecords;
  }

  public void setAutoGenerateRecords(@javax.annotation.Nullable Boolean autoGenerateRecords) {
    this.autoGenerateRecords = autoGenerateRecords;
  }


  public IpamsvcIpamHost comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * The description for the IPAM host. May contain 0 to 1024 characters. Can include UTF-8.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  /**
   * Time when the object has been created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public IpamsvcIpamHost hostNames(@javax.annotation.Nullable List<IpamsvcHostName> hostNames) {
    this.hostNames = hostNames;
    return this;
  }

  public IpamsvcIpamHost addHostNamesItem(IpamsvcHostName hostNamesItem) {
    if (this.hostNames == null) {
      this.hostNames = new ArrayList<>();
    }
    this.hostNames.add(hostNamesItem);
    return this;
  }

  /**
   * The name records to be generated for the host.  This field is required if _auto_generate_records_ is true.
   * @return hostNames
   */
  @javax.annotation.Nullable
  public List<IpamsvcHostName> getHostNames() {
    return hostNames;
  }

  public void setHostNames(@javax.annotation.Nullable List<IpamsvcHostName> hostNames) {
    this.hostNames = hostNames;
  }


  /**
   * The resource identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public IpamsvcIpamHost name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the IPAM host. Must contain 1 to 256 characters. Can include UTF-8.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public IpamsvcIpamHost tags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
    return this;
  }

  /**
   * The tags for the IPAM host in JSON format.
   * @return tags
   */
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Object tags) {
    this.tags = tags;
  }


  /**
   * Time when the object has been updated. Equals to _created_at_ if not updated after creation.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcIpamHost ipamsvcIpamHost = (IpamsvcIpamHost) o;
    return Objects.equals(this.addresses, ipamsvcIpamHost.addresses) &&
        Objects.equals(this.autoGenerateRecords, ipamsvcIpamHost.autoGenerateRecords) &&
        Objects.equals(this.comment, ipamsvcIpamHost.comment) &&
        Objects.equals(this.createdAt, ipamsvcIpamHost.createdAt) &&
        Objects.equals(this.hostNames, ipamsvcIpamHost.hostNames) &&
        Objects.equals(this.id, ipamsvcIpamHost.id) &&
        Objects.equals(this.name, ipamsvcIpamHost.name) &&
        Objects.equals(this.tags, ipamsvcIpamHost.tags) &&
        Objects.equals(this.updatedAt, ipamsvcIpamHost.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addresses, autoGenerateRecords, comment, createdAt, hostNames, id, name, tags, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcIpamHost {\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    autoGenerateRecords: ").append(toIndentedString(autoGenerateRecords)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    hostNames: ").append(toIndentedString(hostNames)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addresses");
    openapiFields.add("auto_generate_records");
    openapiFields.add("comment");
    openapiFields.add("created_at");
    openapiFields.add("host_names");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("tags");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcIpamHost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcIpamHost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcIpamHost is not found in the empty JSON string", IpamsvcIpamHost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcIpamHost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcIpamHost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IpamsvcIpamHost.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("addresses") != null && !jsonObj.get("addresses").isJsonNull()) {
        JsonArray jsonArrayaddresses = jsonObj.getAsJsonArray("addresses");
        if (jsonArrayaddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addresses` to be an array in the JSON string but got `%s`", jsonObj.get("addresses").toString()));
          }

          // validate the optional field `addresses` (array)
          for (int i = 0; i < jsonArrayaddresses.size(); i++) {
            IpamsvcHostAddress.validateJsonElement(jsonArrayaddresses.get(i));
          };
        }
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if (jsonObj.get("host_names") != null && !jsonObj.get("host_names").isJsonNull()) {
        JsonArray jsonArrayhostNames = jsonObj.getAsJsonArray("host_names");
        if (jsonArrayhostNames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("host_names").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `host_names` to be an array in the JSON string but got `%s`", jsonObj.get("host_names").toString()));
          }

          // validate the optional field `host_names` (array)
          for (int i = 0; i < jsonArrayhostNames.size(); i++) {
            IpamsvcHostName.validateJsonElement(jsonArrayhostNames.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcIpamHost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcIpamHost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcIpamHost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcIpamHost.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcIpamHost>() {
           @Override
           public void write(JsonWriter out, IpamsvcIpamHost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcIpamHost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcIpamHost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcIpamHost
   * @throws IOException if the JSON string is invalid with respect to IpamsvcIpamHost
   */
  public static IpamsvcIpamHost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcIpamHost.class);
  }

  /**
   * Convert an instance of IpamsvcIpamHost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

