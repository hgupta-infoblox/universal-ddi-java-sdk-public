/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IpamsvcCPSubnet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcCPSubnet {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nullable
  private String address;

  public static final String SERIALIZED_NAME_CIDR = "cidr";
  @SerializedName(SERIALIZED_NAME_CIDR)
  @javax.annotation.Nullable
  private Long cidr;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_IP_SPACE_NAME = "ip_space_name";
  @SerializedName(SERIALIZED_NAME_IP_SPACE_NAME)
  @javax.annotation.Nullable
  private String ipSpaceName;

  public static final String SERIALIZED_NAME_IP_SPACE_REF = "ip_space_ref";
  @SerializedName(SERIALIZED_NAME_IP_SPACE_REF)
  @javax.annotation.Nullable
  private String ipSpaceRef;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  @javax.annotation.Nullable
  private String parent;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  @javax.annotation.Nullable
  private String protocol;

  public IpamsvcCPSubnet() {
  }

  public IpamsvcCPSubnet(
     String id
  ) {
    this();
    this.id = id;
  }

  public IpamsvcCPSubnet address(@javax.annotation.Nullable String address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nullable String address) {
    this.address = address;
  }


  public IpamsvcCPSubnet cidr(@javax.annotation.Nullable Long cidr) {
    this.cidr = cidr;
    return this;
  }

  /**
   * Get cidr
   * @return cidr
   */
  @javax.annotation.Nullable
  public Long getCidr() {
    return cidr;
  }

  public void setCidr(@javax.annotation.Nullable Long cidr) {
    this.cidr = cidr;
  }


  public IpamsvcCPSubnet comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  /**
   * The resource identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public IpamsvcCPSubnet ipSpaceName(@javax.annotation.Nullable String ipSpaceName) {
    this.ipSpaceName = ipSpaceName;
    return this;
  }

  /**
   * Get ipSpaceName
   * @return ipSpaceName
   */
  @javax.annotation.Nullable
  public String getIpSpaceName() {
    return ipSpaceName;
  }

  public void setIpSpaceName(@javax.annotation.Nullable String ipSpaceName) {
    this.ipSpaceName = ipSpaceName;
  }


  public IpamsvcCPSubnet ipSpaceRef(@javax.annotation.Nullable String ipSpaceRef) {
    this.ipSpaceRef = ipSpaceRef;
    return this;
  }

  /**
   * The resource identifier.
   * @return ipSpaceRef
   */
  @javax.annotation.Nullable
  public String getIpSpaceRef() {
    return ipSpaceRef;
  }

  public void setIpSpaceRef(@javax.annotation.Nullable String ipSpaceRef) {
    this.ipSpaceRef = ipSpaceRef;
  }


  public IpamsvcCPSubnet name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public IpamsvcCPSubnet parent(@javax.annotation.Nullable String parent) {
    this.parent = parent;
    return this;
  }

  /**
   * The resource identifier.
   * @return parent
   */
  @javax.annotation.Nullable
  public String getParent() {
    return parent;
  }

  public void setParent(@javax.annotation.Nullable String parent) {
    this.parent = parent;
  }


  public IpamsvcCPSubnet protocol(@javax.annotation.Nullable String protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nullable
  public String getProtocol() {
    return protocol;
  }

  public void setProtocol(@javax.annotation.Nullable String protocol) {
    this.protocol = protocol;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcCPSubnet ipamsvcCPSubnet = (IpamsvcCPSubnet) o;
    return Objects.equals(this.address, ipamsvcCPSubnet.address) &&
        Objects.equals(this.cidr, ipamsvcCPSubnet.cidr) &&
        Objects.equals(this.comment, ipamsvcCPSubnet.comment) &&
        Objects.equals(this.id, ipamsvcCPSubnet.id) &&
        Objects.equals(this.ipSpaceName, ipamsvcCPSubnet.ipSpaceName) &&
        Objects.equals(this.ipSpaceRef, ipamsvcCPSubnet.ipSpaceRef) &&
        Objects.equals(this.name, ipamsvcCPSubnet.name) &&
        Objects.equals(this.parent, ipamsvcCPSubnet.parent) &&
        Objects.equals(this.protocol, ipamsvcCPSubnet.protocol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, cidr, comment, id, ipSpaceName, ipSpaceRef, name, parent, protocol);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcCPSubnet {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    cidr: ").append(toIndentedString(cidr)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ipSpaceName: ").append(toIndentedString(ipSpaceName)).append("\n");
    sb.append("    ipSpaceRef: ").append(toIndentedString(ipSpaceRef)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("cidr");
    openapiFields.add("comment");
    openapiFields.add("id");
    openapiFields.add("ip_space_name");
    openapiFields.add("ip_space_ref");
    openapiFields.add("name");
    openapiFields.add("parent");
    openapiFields.add("protocol");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcCPSubnet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcCPSubnet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcCPSubnet is not found in the empty JSON string", IpamsvcCPSubnet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcCPSubnet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcCPSubnet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("ip_space_name") != null && !jsonObj.get("ip_space_name").isJsonNull()) && !jsonObj.get("ip_space_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_space_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_space_name").toString()));
      }
      if ((jsonObj.get("ip_space_ref") != null && !jsonObj.get("ip_space_ref").isJsonNull()) && !jsonObj.get("ip_space_ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_space_ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_space_ref").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) && !jsonObj.get("parent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcCPSubnet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcCPSubnet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcCPSubnet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcCPSubnet.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcCPSubnet>() {
           @Override
           public void write(JsonWriter out, IpamsvcCPSubnet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcCPSubnet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcCPSubnet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcCPSubnet
   * @throws IOException if the JSON string is invalid with respect to IpamsvcCPSubnet
   */
  public static IpamsvcCPSubnet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcCPSubnet.class);
  }

  /**
   * Convert an instance of IpamsvcCPSubnet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

