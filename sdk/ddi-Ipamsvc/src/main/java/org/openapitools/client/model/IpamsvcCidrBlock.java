/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IpamsvcCidrBlock
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcCidrBlock {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nullable
  private String address;

  public static final String SERIALIZED_NAME_CIDR = "cidr";
  @SerializedName(SERIALIZED_NAME_CIDR)
  @javax.annotation.Nullable
  private Long cidr;

  public static final String SERIALIZED_NAME_FEDERATED_REALMS = "federated_realms";
  @SerializedName(SERIALIZED_NAME_FEDERATED_REALMS)
  @javax.annotation.Nullable
  private List<String> federatedRealms = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  @javax.annotation.Nullable
  private String parent;

  public static final String SERIALIZED_NAME_SPACE = "space";
  @SerializedName(SERIALIZED_NAME_SPACE)
  @javax.annotation.Nullable
  private String space;

  public IpamsvcCidrBlock() {
  }

  public IpamsvcCidrBlock(
     String address, 
     Long cidr, 
     List<String> federatedRealms, 
     String id
  ) {
    this();
    this.address = address;
    this.cidr = cidr;
    this.federatedRealms = federatedRealms;
    this.id = id;
  }

  /**
   * The address part of the CidrBlock.
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }



  /**
   * The CIDR part of the CidrBlock.
   * minimum: 1
   * maximum: 128
   * @return cidr
   */
  @javax.annotation.Nullable
  public Long getCidr() {
    return cidr;
  }



  /**
   * The IDs of the federated realms in which the CIDR block participates.
   * @return federatedRealms
   */
  @javax.annotation.Nullable
  public List<String> getFederatedRealms() {
    return federatedRealms;
  }



  /**
   * The resource identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public IpamsvcCidrBlock parent(@javax.annotation.Nullable String parent) {
    this.parent = parent;
    return this;
  }

  /**
   * The resource identifier.
   * @return parent
   */
  @javax.annotation.Nullable
  public String getParent() {
    return parent;
  }

  public void setParent(@javax.annotation.Nullable String parent) {
    this.parent = parent;
  }


  public IpamsvcCidrBlock space(@javax.annotation.Nullable String space) {
    this.space = space;
    return this;
  }

  /**
   * The resource identifier.
   * @return space
   */
  @javax.annotation.Nullable
  public String getSpace() {
    return space;
  }

  public void setSpace(@javax.annotation.Nullable String space) {
    this.space = space;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcCidrBlock ipamsvcCidrBlock = (IpamsvcCidrBlock) o;
    return Objects.equals(this.address, ipamsvcCidrBlock.address) &&
        Objects.equals(this.cidr, ipamsvcCidrBlock.cidr) &&
        Objects.equals(this.federatedRealms, ipamsvcCidrBlock.federatedRealms) &&
        Objects.equals(this.id, ipamsvcCidrBlock.id) &&
        Objects.equals(this.parent, ipamsvcCidrBlock.parent) &&
        Objects.equals(this.space, ipamsvcCidrBlock.space);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, cidr, federatedRealms, id, parent, space);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcCidrBlock {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    cidr: ").append(toIndentedString(cidr)).append("\n");
    sb.append("    federatedRealms: ").append(toIndentedString(federatedRealms)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    space: ").append(toIndentedString(space)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("cidr");
    openapiFields.add("federated_realms");
    openapiFields.add("id");
    openapiFields.add("parent");
    openapiFields.add("space");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcCidrBlock
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcCidrBlock.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcCidrBlock is not found in the empty JSON string", IpamsvcCidrBlock.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcCidrBlock.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcCidrBlock` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("federated_realms") != null && !jsonObj.get("federated_realms").isJsonNull() && !jsonObj.get("federated_realms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `federated_realms` to be an array in the JSON string but got `%s`", jsonObj.get("federated_realms").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) && !jsonObj.get("parent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent").toString()));
      }
      if ((jsonObj.get("space") != null && !jsonObj.get("space").isJsonNull()) && !jsonObj.get("space").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `space` to be a primitive type in the JSON string but got `%s`", jsonObj.get("space").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcCidrBlock.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcCidrBlock' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcCidrBlock> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcCidrBlock.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcCidrBlock>() {
           @Override
           public void write(JsonWriter out, IpamsvcCidrBlock value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcCidrBlock read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcCidrBlock given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcCidrBlock
   * @throws IOException if the JSON string is invalid with respect to IpamsvcCidrBlock
   */
  public static IpamsvcCidrBlock fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcCidrBlock.class);
  }

  /**
   * Convert an instance of IpamsvcCidrBlock to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

