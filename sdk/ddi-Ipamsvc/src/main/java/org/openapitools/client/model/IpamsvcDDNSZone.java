/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IpamsvcNameserver;
import org.openapitools.client.model.IpamsvcTSIGKey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A __DDNSZone__ object (_dhcp/ddns_zone_) represents a DNS zone that can accept dynamic DNS updates from DHCP.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcDDNSZone {
  public static final String SERIALIZED_NAME_FQDN = "fqdn";
  @SerializedName(SERIALIZED_NAME_FQDN)
  @javax.annotation.Nullable
  private String fqdn;

  public static final String SERIALIZED_NAME_GSS_TSIG_ENABLED = "gss_tsig_enabled";
  @SerializedName(SERIALIZED_NAME_GSS_TSIG_ENABLED)
  @javax.annotation.Nullable
  private Boolean gssTsigEnabled;

  public static final String SERIALIZED_NAME_NAMESERVERS = "nameservers";
  @SerializedName(SERIALIZED_NAME_NAMESERVERS)
  @javax.annotation.Nullable
  private List<IpamsvcNameserver> nameservers = new ArrayList<>();

  public static final String SERIALIZED_NAME_TSIG_ENABLED = "tsig_enabled";
  @SerializedName(SERIALIZED_NAME_TSIG_ENABLED)
  @javax.annotation.Nullable
  private Boolean tsigEnabled;

  public static final String SERIALIZED_NAME_TSIG_KEY = "tsig_key";
  @SerializedName(SERIALIZED_NAME_TSIG_KEY)
  @javax.annotation.Nullable
  private IpamsvcTSIGKey tsigKey;

  public static final String SERIALIZED_NAME_VIEW = "view";
  @SerializedName(SERIALIZED_NAME_VIEW)
  @javax.annotation.Nullable
  private String view;

  public static final String SERIALIZED_NAME_VIEW_NAME = "view_name";
  @SerializedName(SERIALIZED_NAME_VIEW_NAME)
  @javax.annotation.Nullable
  private String viewName;

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @SerializedName(SERIALIZED_NAME_ZONE)
  @javax.annotation.Nonnull
  private String zone;

  public IpamsvcDDNSZone() {
  }

  public IpamsvcDDNSZone(
     String viewName
  ) {
    this();
    this.viewName = viewName;
  }

  public IpamsvcDDNSZone fqdn(@javax.annotation.Nullable String fqdn) {
    this.fqdn = fqdn;
    return this;
  }

  /**
   * Zone FQDN.  If _zone_ is defined, the _fqdn_ field must be empty.
   * @return fqdn
   */
  @javax.annotation.Nullable
  public String getFqdn() {
    return fqdn;
  }

  public void setFqdn(@javax.annotation.Nullable String fqdn) {
    this.fqdn = fqdn;
  }


  public IpamsvcDDNSZone gssTsigEnabled(@javax.annotation.Nullable Boolean gssTsigEnabled) {
    this.gssTsigEnabled = gssTsigEnabled;
    return this;
  }

  /**
   * _gss_tsig_enabled_ enables/disables GSS-TSIG signed dynamic updates.  Defaults to _false_.
   * @return gssTsigEnabled
   */
  @javax.annotation.Nullable
  public Boolean getGssTsigEnabled() {
    return gssTsigEnabled;
  }

  public void setGssTsigEnabled(@javax.annotation.Nullable Boolean gssTsigEnabled) {
    this.gssTsigEnabled = gssTsigEnabled;
  }


  public IpamsvcDDNSZone nameservers(@javax.annotation.Nullable List<IpamsvcNameserver> nameservers) {
    this.nameservers = nameservers;
    return this;
  }

  public IpamsvcDDNSZone addNameserversItem(IpamsvcNameserver nameserversItem) {
    if (this.nameservers == null) {
      this.nameservers = new ArrayList<>();
    }
    this.nameservers.add(nameserversItem);
    return this;
  }

  /**
   * The Nameservers in the zone.  Each nameserver IP should be unique across the list of nameservers.
   * @return nameservers
   */
  @javax.annotation.Nullable
  public List<IpamsvcNameserver> getNameservers() {
    return nameservers;
  }

  public void setNameservers(@javax.annotation.Nullable List<IpamsvcNameserver> nameservers) {
    this.nameservers = nameservers;
  }


  public IpamsvcDDNSZone tsigEnabled(@javax.annotation.Nullable Boolean tsigEnabled) {
    this.tsigEnabled = tsigEnabled;
    return this;
  }

  /**
   * Indicates if TSIG key should be used for the update.  Defaults to _false_.
   * @return tsigEnabled
   */
  @javax.annotation.Nullable
  public Boolean getTsigEnabled() {
    return tsigEnabled;
  }

  public void setTsigEnabled(@javax.annotation.Nullable Boolean tsigEnabled) {
    this.tsigEnabled = tsigEnabled;
  }


  public IpamsvcDDNSZone tsigKey(@javax.annotation.Nullable IpamsvcTSIGKey tsigKey) {
    this.tsigKey = tsigKey;
    return this;
  }

  /**
   * Get tsigKey
   * @return tsigKey
   */
  @javax.annotation.Nullable
  public IpamsvcTSIGKey getTsigKey() {
    return tsigKey;
  }

  public void setTsigKey(@javax.annotation.Nullable IpamsvcTSIGKey tsigKey) {
    this.tsigKey = tsigKey;
  }


  public IpamsvcDDNSZone view(@javax.annotation.Nullable String view) {
    this.view = view;
    return this;
  }

  /**
   * The resource identifier.
   * @return view
   */
  @javax.annotation.Nullable
  public String getView() {
    return view;
  }

  public void setView(@javax.annotation.Nullable String view) {
    this.view = view;
  }


  /**
   * The name of the view.
   * @return viewName
   */
  @javax.annotation.Nullable
  public String getViewName() {
    return viewName;
  }



  public IpamsvcDDNSZone zone(@javax.annotation.Nonnull String zone) {
    this.zone = zone;
    return this;
  }

  /**
   * The resource identifier.
   * @return zone
   */
  @javax.annotation.Nonnull
  public String getZone() {
    return zone;
  }

  public void setZone(@javax.annotation.Nonnull String zone) {
    this.zone = zone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcDDNSZone ipamsvcDDNSZone = (IpamsvcDDNSZone) o;
    return Objects.equals(this.fqdn, ipamsvcDDNSZone.fqdn) &&
        Objects.equals(this.gssTsigEnabled, ipamsvcDDNSZone.gssTsigEnabled) &&
        Objects.equals(this.nameservers, ipamsvcDDNSZone.nameservers) &&
        Objects.equals(this.tsigEnabled, ipamsvcDDNSZone.tsigEnabled) &&
        Objects.equals(this.tsigKey, ipamsvcDDNSZone.tsigKey) &&
        Objects.equals(this.view, ipamsvcDDNSZone.view) &&
        Objects.equals(this.viewName, ipamsvcDDNSZone.viewName) &&
        Objects.equals(this.zone, ipamsvcDDNSZone.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fqdn, gssTsigEnabled, nameservers, tsigEnabled, tsigKey, view, viewName, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcDDNSZone {\n");
    sb.append("    fqdn: ").append(toIndentedString(fqdn)).append("\n");
    sb.append("    gssTsigEnabled: ").append(toIndentedString(gssTsigEnabled)).append("\n");
    sb.append("    nameservers: ").append(toIndentedString(nameservers)).append("\n");
    sb.append("    tsigEnabled: ").append(toIndentedString(tsigEnabled)).append("\n");
    sb.append("    tsigKey: ").append(toIndentedString(tsigKey)).append("\n");
    sb.append("    view: ").append(toIndentedString(view)).append("\n");
    sb.append("    viewName: ").append(toIndentedString(viewName)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fqdn");
    openapiFields.add("gss_tsig_enabled");
    openapiFields.add("nameservers");
    openapiFields.add("tsig_enabled");
    openapiFields.add("tsig_key");
    openapiFields.add("view");
    openapiFields.add("view_name");
    openapiFields.add("zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("zone");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcDDNSZone
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcDDNSZone.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcDDNSZone is not found in the empty JSON string", IpamsvcDDNSZone.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcDDNSZone.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcDDNSZone` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IpamsvcDDNSZone.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fqdn") != null && !jsonObj.get("fqdn").isJsonNull()) && !jsonObj.get("fqdn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fqdn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fqdn").toString()));
      }
      if (jsonObj.get("nameservers") != null && !jsonObj.get("nameservers").isJsonNull()) {
        JsonArray jsonArraynameservers = jsonObj.getAsJsonArray("nameservers");
        if (jsonArraynameservers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nameservers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nameservers` to be an array in the JSON string but got `%s`", jsonObj.get("nameservers").toString()));
          }

          // validate the optional field `nameservers` (array)
          for (int i = 0; i < jsonArraynameservers.size(); i++) {
            IpamsvcNameserver.validateJsonElement(jsonArraynameservers.get(i));
          };
        }
      }
      // validate the optional field `tsig_key`
      if (jsonObj.get("tsig_key") != null && !jsonObj.get("tsig_key").isJsonNull()) {
        IpamsvcTSIGKey.validateJsonElement(jsonObj.get("tsig_key"));
      }
      if ((jsonObj.get("view") != null && !jsonObj.get("view").isJsonNull()) && !jsonObj.get("view").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `view` to be a primitive type in the JSON string but got `%s`", jsonObj.get("view").toString()));
      }
      if ((jsonObj.get("view_name") != null && !jsonObj.get("view_name").isJsonNull()) && !jsonObj.get("view_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `view_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("view_name").toString()));
      }
      if (!jsonObj.get("zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcDDNSZone.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcDDNSZone' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcDDNSZone> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcDDNSZone.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcDDNSZone>() {
           @Override
           public void write(JsonWriter out, IpamsvcDDNSZone value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcDDNSZone read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcDDNSZone given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcDDNSZone
   * @throws IOException if the JSON string is invalid with respect to IpamsvcDDNSZone
   */
  public static IpamsvcDDNSZone fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcDDNSZone.class);
  }

  /**
   * Convert an instance of IpamsvcDDNSZone to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

