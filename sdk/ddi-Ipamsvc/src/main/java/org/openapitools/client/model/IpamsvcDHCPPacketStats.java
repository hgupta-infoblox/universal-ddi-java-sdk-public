/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The DHCPPacketStats object represents DHCP packets statistics for a DHCP __Host__.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcDHCPPacketStats {
  public static final String SERIALIZED_NAME_DHCP_PKT_RECEIVED = "dhcp_pkt_received";
  @SerializedName(SERIALIZED_NAME_DHCP_PKT_RECEIVED)
  @javax.annotation.Nullable
  private String dhcpPktReceived;

  public static final String SERIALIZED_NAME_DHCP_PKT_RECEIVED_V6 = "dhcp_pkt_received_v6";
  @SerializedName(SERIALIZED_NAME_DHCP_PKT_RECEIVED_V6)
  @javax.annotation.Nullable
  private String dhcpPktReceivedV6;

  public static final String SERIALIZED_NAME_DHCP_PKT_SENT = "dhcp_pkt_sent";
  @SerializedName(SERIALIZED_NAME_DHCP_PKT_SENT)
  @javax.annotation.Nullable
  private String dhcpPktSent;

  public static final String SERIALIZED_NAME_DHCP_PKT_SENT_V6 = "dhcp_pkt_sent_v6";
  @SerializedName(SERIALIZED_NAME_DHCP_PKT_SENT_V6)
  @javax.annotation.Nullable
  private String dhcpPktSentV6;

  public static final String SERIALIZED_NAME_DHCP_REQ_RECEIVED = "dhcp_req_received";
  @SerializedName(SERIALIZED_NAME_DHCP_REQ_RECEIVED)
  @javax.annotation.Nullable
  private String dhcpReqReceived;

  public static final String SERIALIZED_NAME_DHCP_REQ_RECEIVED_V6 = "dhcp_req_received_v6";
  @SerializedName(SERIALIZED_NAME_DHCP_REQ_RECEIVED_V6)
  @javax.annotation.Nullable
  private String dhcpReqReceivedV6;

  public IpamsvcDHCPPacketStats() {
  }

  public IpamsvcDHCPPacketStats(
     String dhcpPktReceived, 
     String dhcpPktReceivedV6, 
     String dhcpPktSent, 
     String dhcpPktSentV6, 
     String dhcpReqReceived, 
     String dhcpReqReceivedV6
  ) {
    this();
    this.dhcpPktReceived = dhcpPktReceived;
    this.dhcpPktReceivedV6 = dhcpPktReceivedV6;
    this.dhcpPktSent = dhcpPktSent;
    this.dhcpPktSentV6 = dhcpPktSentV6;
    this.dhcpReqReceived = dhcpReqReceived;
    this.dhcpReqReceivedV6 = dhcpReqReceivedV6;
  }

  /**
   * The number of DHCP packets received.
   * @return dhcpPktReceived
   */
  @javax.annotation.Nullable
  public String getDhcpPktReceived() {
    return dhcpPktReceived;
  }



  /**
   * The number of DHCP V6 packets received.
   * @return dhcpPktReceivedV6
   */
  @javax.annotation.Nullable
  public String getDhcpPktReceivedV6() {
    return dhcpPktReceivedV6;
  }



  /**
   * The number of DHCP packets sent.
   * @return dhcpPktSent
   */
  @javax.annotation.Nullable
  public String getDhcpPktSent() {
    return dhcpPktSent;
  }



  /**
   * The number of DHCP V6 packets sent.
   * @return dhcpPktSentV6
   */
  @javax.annotation.Nullable
  public String getDhcpPktSentV6() {
    return dhcpPktSentV6;
  }



  /**
   * The number of DHCP requests received.
   * @return dhcpReqReceived
   */
  @javax.annotation.Nullable
  public String getDhcpReqReceived() {
    return dhcpReqReceived;
  }



  /**
   * The number of DHCP V6 requests received.
   * @return dhcpReqReceivedV6
   */
  @javax.annotation.Nullable
  public String getDhcpReqReceivedV6() {
    return dhcpReqReceivedV6;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcDHCPPacketStats ipamsvcDHCPPacketStats = (IpamsvcDHCPPacketStats) o;
    return Objects.equals(this.dhcpPktReceived, ipamsvcDHCPPacketStats.dhcpPktReceived) &&
        Objects.equals(this.dhcpPktReceivedV6, ipamsvcDHCPPacketStats.dhcpPktReceivedV6) &&
        Objects.equals(this.dhcpPktSent, ipamsvcDHCPPacketStats.dhcpPktSent) &&
        Objects.equals(this.dhcpPktSentV6, ipamsvcDHCPPacketStats.dhcpPktSentV6) &&
        Objects.equals(this.dhcpReqReceived, ipamsvcDHCPPacketStats.dhcpReqReceived) &&
        Objects.equals(this.dhcpReqReceivedV6, ipamsvcDHCPPacketStats.dhcpReqReceivedV6);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dhcpPktReceived, dhcpPktReceivedV6, dhcpPktSent, dhcpPktSentV6, dhcpReqReceived, dhcpReqReceivedV6);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcDHCPPacketStats {\n");
    sb.append("    dhcpPktReceived: ").append(toIndentedString(dhcpPktReceived)).append("\n");
    sb.append("    dhcpPktReceivedV6: ").append(toIndentedString(dhcpPktReceivedV6)).append("\n");
    sb.append("    dhcpPktSent: ").append(toIndentedString(dhcpPktSent)).append("\n");
    sb.append("    dhcpPktSentV6: ").append(toIndentedString(dhcpPktSentV6)).append("\n");
    sb.append("    dhcpReqReceived: ").append(toIndentedString(dhcpReqReceived)).append("\n");
    sb.append("    dhcpReqReceivedV6: ").append(toIndentedString(dhcpReqReceivedV6)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dhcp_pkt_received");
    openapiFields.add("dhcp_pkt_received_v6");
    openapiFields.add("dhcp_pkt_sent");
    openapiFields.add("dhcp_pkt_sent_v6");
    openapiFields.add("dhcp_req_received");
    openapiFields.add("dhcp_req_received_v6");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcDHCPPacketStats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcDHCPPacketStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcDHCPPacketStats is not found in the empty JSON string", IpamsvcDHCPPacketStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcDHCPPacketStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcDHCPPacketStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dhcp_pkt_received") != null && !jsonObj.get("dhcp_pkt_received").isJsonNull()) && !jsonObj.get("dhcp_pkt_received").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dhcp_pkt_received` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dhcp_pkt_received").toString()));
      }
      if ((jsonObj.get("dhcp_pkt_received_v6") != null && !jsonObj.get("dhcp_pkt_received_v6").isJsonNull()) && !jsonObj.get("dhcp_pkt_received_v6").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dhcp_pkt_received_v6` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dhcp_pkt_received_v6").toString()));
      }
      if ((jsonObj.get("dhcp_pkt_sent") != null && !jsonObj.get("dhcp_pkt_sent").isJsonNull()) && !jsonObj.get("dhcp_pkt_sent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dhcp_pkt_sent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dhcp_pkt_sent").toString()));
      }
      if ((jsonObj.get("dhcp_pkt_sent_v6") != null && !jsonObj.get("dhcp_pkt_sent_v6").isJsonNull()) && !jsonObj.get("dhcp_pkt_sent_v6").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dhcp_pkt_sent_v6` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dhcp_pkt_sent_v6").toString()));
      }
      if ((jsonObj.get("dhcp_req_received") != null && !jsonObj.get("dhcp_req_received").isJsonNull()) && !jsonObj.get("dhcp_req_received").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dhcp_req_received` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dhcp_req_received").toString()));
      }
      if ((jsonObj.get("dhcp_req_received_v6") != null && !jsonObj.get("dhcp_req_received_v6").isJsonNull()) && !jsonObj.get("dhcp_req_received_v6").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dhcp_req_received_v6` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dhcp_req_received_v6").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcDHCPPacketStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcDHCPPacketStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcDHCPPacketStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcDHCPPacketStats.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcDHCPPacketStats>() {
           @Override
           public void write(JsonWriter out, IpamsvcDHCPPacketStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcDHCPPacketStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcDHCPPacketStats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcDHCPPacketStats
   * @throws IOException if the JSON string is invalid with respect to IpamsvcDHCPPacketStats
   */
  public static IpamsvcDHCPPacketStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcDHCPPacketStats.class);
  }

  /**
   * Convert an instance of IpamsvcDHCPPacketStats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

