/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IpamsvcRealmsConflict
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcRealmsConflict {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nullable
  private String address;

  public static final String SERIALIZED_NAME_FEDERATED_REALMS = "federated_realms";
  @SerializedName(SERIALIZED_NAME_FEDERATED_REALMS)
  @javax.annotation.Nullable
  private List<String> federatedRealms = new ArrayList<>();

  public static final String SERIALIZED_NAME_IP_SPACE = "ip_space";
  @SerializedName(SERIALIZED_NAME_IP_SPACE)
  @javax.annotation.Nullable
  private String ipSpace;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public IpamsvcRealmsConflict() {
  }

  public IpamsvcRealmsConflict address(@javax.annotation.Nullable String address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nullable String address) {
    this.address = address;
  }


  public IpamsvcRealmsConflict federatedRealms(@javax.annotation.Nullable List<String> federatedRealms) {
    this.federatedRealms = federatedRealms;
    return this;
  }

  public IpamsvcRealmsConflict addFederatedRealmsItem(String federatedRealmsItem) {
    if (this.federatedRealms == null) {
      this.federatedRealms = new ArrayList<>();
    }
    this.federatedRealms.add(federatedRealmsItem);
    return this;
  }

  /**
   * List of __FederatedRealm__ object ids.
   * @return federatedRealms
   */
  @javax.annotation.Nullable
  public List<String> getFederatedRealms() {
    return federatedRealms;
  }

  public void setFederatedRealms(@javax.annotation.Nullable List<String> federatedRealms) {
    this.federatedRealms = federatedRealms;
  }


  public IpamsvcRealmsConflict ipSpace(@javax.annotation.Nullable String ipSpace) {
    this.ipSpace = ipSpace;
    return this;
  }

  /**
   * The resource identifier.
   * @return ipSpace
   */
  @javax.annotation.Nullable
  public String getIpSpace() {
    return ipSpace;
  }

  public void setIpSpace(@javax.annotation.Nullable String ipSpace) {
    this.ipSpace = ipSpace;
  }


  public IpamsvcRealmsConflict type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcRealmsConflict ipamsvcRealmsConflict = (IpamsvcRealmsConflict) o;
    return Objects.equals(this.address, ipamsvcRealmsConflict.address) &&
        Objects.equals(this.federatedRealms, ipamsvcRealmsConflict.federatedRealms) &&
        Objects.equals(this.ipSpace, ipamsvcRealmsConflict.ipSpace) &&
        Objects.equals(this.type, ipamsvcRealmsConflict.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, federatedRealms, ipSpace, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcRealmsConflict {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    federatedRealms: ").append(toIndentedString(federatedRealms)).append("\n");
    sb.append("    ipSpace: ").append(toIndentedString(ipSpace)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("federated_realms");
    openapiFields.add("ip_space");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcRealmsConflict
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcRealmsConflict.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcRealmsConflict is not found in the empty JSON string", IpamsvcRealmsConflict.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcRealmsConflict.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcRealmsConflict` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("federated_realms") != null && !jsonObj.get("federated_realms").isJsonNull() && !jsonObj.get("federated_realms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `federated_realms` to be an array in the JSON string but got `%s`", jsonObj.get("federated_realms").toString()));
      }
      if ((jsonObj.get("ip_space") != null && !jsonObj.get("ip_space").isJsonNull()) && !jsonObj.get("ip_space").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_space` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_space").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcRealmsConflict.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcRealmsConflict' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcRealmsConflict> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcRealmsConflict.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcRealmsConflict>() {
           @Override
           public void write(JsonWriter out, IpamsvcRealmsConflict value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcRealmsConflict read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcRealmsConflict given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcRealmsConflict
   * @throws IOException if the JSON string is invalid with respect to IpamsvcRealmsConflict
   */
  public static IpamsvcRealmsConflict fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcRealmsConflict.class);
  }

  /**
   * Convert an instance of IpamsvcRealmsConflict to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

