/*
 * IP Address Management API
 * The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IpamsvcIgnoreItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A DHCP Config object (_dhcp/dhcp_config_) represents a shared DHCP configuration that controls how leases are issued.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T12:10:31.429972+05:30[Asia/Kolkata]", comments = "Generator version: 7.12.0")
public class IpamsvcDHCPConfig {
  public static final String SERIALIZED_NAME_ABANDONED_RECLAIM_TIME = "abandoned_reclaim_time";
  @SerializedName(SERIALIZED_NAME_ABANDONED_RECLAIM_TIME)
  @javax.annotation.Nullable
  private Long abandonedReclaimTime;

  public static final String SERIALIZED_NAME_ABANDONED_RECLAIM_TIME_V6 = "abandoned_reclaim_time_v6";
  @SerializedName(SERIALIZED_NAME_ABANDONED_RECLAIM_TIME_V6)
  @javax.annotation.Nullable
  private Long abandonedReclaimTimeV6;

  public static final String SERIALIZED_NAME_ALLOW_UNKNOWN = "allow_unknown";
  @SerializedName(SERIALIZED_NAME_ALLOW_UNKNOWN)
  @javax.annotation.Nullable
  private Boolean allowUnknown;

  public static final String SERIALIZED_NAME_ALLOW_UNKNOWN_V6 = "allow_unknown_v6";
  @SerializedName(SERIALIZED_NAME_ALLOW_UNKNOWN_V6)
  @javax.annotation.Nullable
  private Boolean allowUnknownV6;

  public static final String SERIALIZED_NAME_ECHO_CLIENT_ID = "echo_client_id";
  @SerializedName(SERIALIZED_NAME_ECHO_CLIENT_ID)
  @javax.annotation.Nullable
  private Boolean echoClientId;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  @javax.annotation.Nullable
  private List<String> filters = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTERS_LARGE_SELECTION = "filters_large_selection";
  @SerializedName(SERIALIZED_NAME_FILTERS_LARGE_SELECTION)
  @javax.annotation.Nullable
  private List<String> filtersLargeSelection = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTERS_V6 = "filters_v6";
  @SerializedName(SERIALIZED_NAME_FILTERS_V6)
  @javax.annotation.Nullable
  private List<String> filtersV6 = new ArrayList<>();

  public static final String SERIALIZED_NAME_IGNORE_CLIENT_UID = "ignore_client_uid";
  @SerializedName(SERIALIZED_NAME_IGNORE_CLIENT_UID)
  @javax.annotation.Nullable
  private Boolean ignoreClientUid;

  public static final String SERIALIZED_NAME_IGNORE_LIST = "ignore_list";
  @SerializedName(SERIALIZED_NAME_IGNORE_LIST)
  @javax.annotation.Nullable
  private List<IpamsvcIgnoreItem> ignoreList = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEASE_TIME = "lease_time";
  @SerializedName(SERIALIZED_NAME_LEASE_TIME)
  @javax.annotation.Nullable
  private Long leaseTime;

  public static final String SERIALIZED_NAME_LEASE_TIME_V6 = "lease_time_v6";
  @SerializedName(SERIALIZED_NAME_LEASE_TIME_V6)
  @javax.annotation.Nullable
  private Long leaseTimeV6;

  public IpamsvcDHCPConfig() {
  }

  public IpamsvcDHCPConfig abandonedReclaimTime(@javax.annotation.Nullable Long abandonedReclaimTime) {
    this.abandonedReclaimTime = abandonedReclaimTime;
    return this;
  }

  /**
   * The abandoned reclaim time in seconds for IPV4 clients.
   * @return abandonedReclaimTime
   */
  @javax.annotation.Nullable
  public Long getAbandonedReclaimTime() {
    return abandonedReclaimTime;
  }

  public void setAbandonedReclaimTime(@javax.annotation.Nullable Long abandonedReclaimTime) {
    this.abandonedReclaimTime = abandonedReclaimTime;
  }


  public IpamsvcDHCPConfig abandonedReclaimTimeV6(@javax.annotation.Nullable Long abandonedReclaimTimeV6) {
    this.abandonedReclaimTimeV6 = abandonedReclaimTimeV6;
    return this;
  }

  /**
   * The abandoned reclaim time in seconds for IPV6 clients.
   * @return abandonedReclaimTimeV6
   */
  @javax.annotation.Nullable
  public Long getAbandonedReclaimTimeV6() {
    return abandonedReclaimTimeV6;
  }

  public void setAbandonedReclaimTimeV6(@javax.annotation.Nullable Long abandonedReclaimTimeV6) {
    this.abandonedReclaimTimeV6 = abandonedReclaimTimeV6;
  }


  public IpamsvcDHCPConfig allowUnknown(@javax.annotation.Nullable Boolean allowUnknown) {
    this.allowUnknown = allowUnknown;
    return this;
  }

  /**
   * Disable to allow leases only for known IPv4 clients, those for which a fixed address is configured.
   * @return allowUnknown
   */
  @javax.annotation.Nullable
  public Boolean getAllowUnknown() {
    return allowUnknown;
  }

  public void setAllowUnknown(@javax.annotation.Nullable Boolean allowUnknown) {
    this.allowUnknown = allowUnknown;
  }


  public IpamsvcDHCPConfig allowUnknownV6(@javax.annotation.Nullable Boolean allowUnknownV6) {
    this.allowUnknownV6 = allowUnknownV6;
    return this;
  }

  /**
   * Disable to allow leases only for known IPV6 clients, those for which a fixed address is configured.
   * @return allowUnknownV6
   */
  @javax.annotation.Nullable
  public Boolean getAllowUnknownV6() {
    return allowUnknownV6;
  }

  public void setAllowUnknownV6(@javax.annotation.Nullable Boolean allowUnknownV6) {
    this.allowUnknownV6 = allowUnknownV6;
  }


  public IpamsvcDHCPConfig echoClientId(@javax.annotation.Nullable Boolean echoClientId) {
    this.echoClientId = echoClientId;
    return this;
  }

  /**
   * Enable/disable to include/exclude the client id when responding to discover or request.
   * @return echoClientId
   */
  @javax.annotation.Nullable
  public Boolean getEchoClientId() {
    return echoClientId;
  }

  public void setEchoClientId(@javax.annotation.Nullable Boolean echoClientId) {
    this.echoClientId = echoClientId;
  }


  public IpamsvcDHCPConfig filters(@javax.annotation.Nullable List<String> filters) {
    this.filters = filters;
    return this;
  }

  public IpamsvcDHCPConfig addFiltersItem(String filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

  /**
   * The resource identifier.
   * @return filters
   */
  @javax.annotation.Nullable
  public List<String> getFilters() {
    return filters;
  }

  public void setFilters(@javax.annotation.Nullable List<String> filters) {
    this.filters = filters;
  }


  public IpamsvcDHCPConfig filtersLargeSelection(@javax.annotation.Nullable List<String> filtersLargeSelection) {
    this.filtersLargeSelection = filtersLargeSelection;
    return this;
  }

  public IpamsvcDHCPConfig addFiltersLargeSelectionItem(String filtersLargeSelectionItem) {
    if (this.filtersLargeSelection == null) {
      this.filtersLargeSelection = new ArrayList<>();
    }
    this.filtersLargeSelection.add(filtersLargeSelectionItem);
    return this;
  }

  /**
   * The resource identifier.
   * @return filtersLargeSelection
   */
  @javax.annotation.Nullable
  public List<String> getFiltersLargeSelection() {
    return filtersLargeSelection;
  }

  public void setFiltersLargeSelection(@javax.annotation.Nullable List<String> filtersLargeSelection) {
    this.filtersLargeSelection = filtersLargeSelection;
  }


  public IpamsvcDHCPConfig filtersV6(@javax.annotation.Nullable List<String> filtersV6) {
    this.filtersV6 = filtersV6;
    return this;
  }

  public IpamsvcDHCPConfig addFiltersV6Item(String filtersV6Item) {
    if (this.filtersV6 == null) {
      this.filtersV6 = new ArrayList<>();
    }
    this.filtersV6.add(filtersV6Item);
    return this;
  }

  /**
   * The resource identifier.
   * @return filtersV6
   */
  @javax.annotation.Nullable
  public List<String> getFiltersV6() {
    return filtersV6;
  }

  public void setFiltersV6(@javax.annotation.Nullable List<String> filtersV6) {
    this.filtersV6 = filtersV6;
  }


  public IpamsvcDHCPConfig ignoreClientUid(@javax.annotation.Nullable Boolean ignoreClientUid) {
    this.ignoreClientUid = ignoreClientUid;
    return this;
  }

  /**
   * Enable to ignore the client UID when issuing a DHCP lease. Use this option to prevent assigning two IP addresses for a client which does not have a UID during one phase of PXE boot but acquires one for the other phase.
   * @return ignoreClientUid
   */
  @javax.annotation.Nullable
  public Boolean getIgnoreClientUid() {
    return ignoreClientUid;
  }

  public void setIgnoreClientUid(@javax.annotation.Nullable Boolean ignoreClientUid) {
    this.ignoreClientUid = ignoreClientUid;
  }


  public IpamsvcDHCPConfig ignoreList(@javax.annotation.Nullable List<IpamsvcIgnoreItem> ignoreList) {
    this.ignoreList = ignoreList;
    return this;
  }

  public IpamsvcDHCPConfig addIgnoreListItem(IpamsvcIgnoreItem ignoreListItem) {
    if (this.ignoreList == null) {
      this.ignoreList = new ArrayList<>();
    }
    this.ignoreList.add(ignoreListItem);
    return this;
  }

  /**
   * The list of clients to ignore requests from.
   * @return ignoreList
   */
  @javax.annotation.Nullable
  public List<IpamsvcIgnoreItem> getIgnoreList() {
    return ignoreList;
  }

  public void setIgnoreList(@javax.annotation.Nullable List<IpamsvcIgnoreItem> ignoreList) {
    this.ignoreList = ignoreList;
  }


  public IpamsvcDHCPConfig leaseTime(@javax.annotation.Nullable Long leaseTime) {
    this.leaseTime = leaseTime;
    return this;
  }

  /**
   * The lease duration in seconds.
   * @return leaseTime
   */
  @javax.annotation.Nullable
  public Long getLeaseTime() {
    return leaseTime;
  }

  public void setLeaseTime(@javax.annotation.Nullable Long leaseTime) {
    this.leaseTime = leaseTime;
  }


  public IpamsvcDHCPConfig leaseTimeV6(@javax.annotation.Nullable Long leaseTimeV6) {
    this.leaseTimeV6 = leaseTimeV6;
    return this;
  }

  /**
   * The lease duration in seconds for IPV6 clients.
   * @return leaseTimeV6
   */
  @javax.annotation.Nullable
  public Long getLeaseTimeV6() {
    return leaseTimeV6;
  }

  public void setLeaseTimeV6(@javax.annotation.Nullable Long leaseTimeV6) {
    this.leaseTimeV6 = leaseTimeV6;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamsvcDHCPConfig ipamsvcDHCPConfig = (IpamsvcDHCPConfig) o;
    return Objects.equals(this.abandonedReclaimTime, ipamsvcDHCPConfig.abandonedReclaimTime) &&
        Objects.equals(this.abandonedReclaimTimeV6, ipamsvcDHCPConfig.abandonedReclaimTimeV6) &&
        Objects.equals(this.allowUnknown, ipamsvcDHCPConfig.allowUnknown) &&
        Objects.equals(this.allowUnknownV6, ipamsvcDHCPConfig.allowUnknownV6) &&
        Objects.equals(this.echoClientId, ipamsvcDHCPConfig.echoClientId) &&
        Objects.equals(this.filters, ipamsvcDHCPConfig.filters) &&
        Objects.equals(this.filtersLargeSelection, ipamsvcDHCPConfig.filtersLargeSelection) &&
        Objects.equals(this.filtersV6, ipamsvcDHCPConfig.filtersV6) &&
        Objects.equals(this.ignoreClientUid, ipamsvcDHCPConfig.ignoreClientUid) &&
        Objects.equals(this.ignoreList, ipamsvcDHCPConfig.ignoreList) &&
        Objects.equals(this.leaseTime, ipamsvcDHCPConfig.leaseTime) &&
        Objects.equals(this.leaseTimeV6, ipamsvcDHCPConfig.leaseTimeV6);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abandonedReclaimTime, abandonedReclaimTimeV6, allowUnknown, allowUnknownV6, echoClientId, filters, filtersLargeSelection, filtersV6, ignoreClientUid, ignoreList, leaseTime, leaseTimeV6);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamsvcDHCPConfig {\n");
    sb.append("    abandonedReclaimTime: ").append(toIndentedString(abandonedReclaimTime)).append("\n");
    sb.append("    abandonedReclaimTimeV6: ").append(toIndentedString(abandonedReclaimTimeV6)).append("\n");
    sb.append("    allowUnknown: ").append(toIndentedString(allowUnknown)).append("\n");
    sb.append("    allowUnknownV6: ").append(toIndentedString(allowUnknownV6)).append("\n");
    sb.append("    echoClientId: ").append(toIndentedString(echoClientId)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    filtersLargeSelection: ").append(toIndentedString(filtersLargeSelection)).append("\n");
    sb.append("    filtersV6: ").append(toIndentedString(filtersV6)).append("\n");
    sb.append("    ignoreClientUid: ").append(toIndentedString(ignoreClientUid)).append("\n");
    sb.append("    ignoreList: ").append(toIndentedString(ignoreList)).append("\n");
    sb.append("    leaseTime: ").append(toIndentedString(leaseTime)).append("\n");
    sb.append("    leaseTimeV6: ").append(toIndentedString(leaseTimeV6)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abandoned_reclaim_time");
    openapiFields.add("abandoned_reclaim_time_v6");
    openapiFields.add("allow_unknown");
    openapiFields.add("allow_unknown_v6");
    openapiFields.add("echo_client_id");
    openapiFields.add("filters");
    openapiFields.add("filters_large_selection");
    openapiFields.add("filters_v6");
    openapiFields.add("ignore_client_uid");
    openapiFields.add("ignore_list");
    openapiFields.add("lease_time");
    openapiFields.add("lease_time_v6");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpamsvcDHCPConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpamsvcDHCPConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpamsvcDHCPConfig is not found in the empty JSON string", IpamsvcDHCPConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpamsvcDHCPConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpamsvcDHCPConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull() && !jsonObj.get("filters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("filters_large_selection") != null && !jsonObj.get("filters_large_selection").isJsonNull() && !jsonObj.get("filters_large_selection").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `filters_large_selection` to be an array in the JSON string but got `%s`", jsonObj.get("filters_large_selection").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("filters_v6") != null && !jsonObj.get("filters_v6").isJsonNull() && !jsonObj.get("filters_v6").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `filters_v6` to be an array in the JSON string but got `%s`", jsonObj.get("filters_v6").toString()));
      }
      if (jsonObj.get("ignore_list") != null && !jsonObj.get("ignore_list").isJsonNull()) {
        JsonArray jsonArrayignoreList = jsonObj.getAsJsonArray("ignore_list");
        if (jsonArrayignoreList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ignore_list").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ignore_list` to be an array in the JSON string but got `%s`", jsonObj.get("ignore_list").toString()));
          }

          // validate the optional field `ignore_list` (array)
          for (int i = 0; i < jsonArrayignoreList.size(); i++) {
            IpamsvcIgnoreItem.validateJsonElement(jsonArrayignoreList.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpamsvcDHCPConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpamsvcDHCPConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpamsvcDHCPConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpamsvcDHCPConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<IpamsvcDHCPConfig>() {
           @Override
           public void write(JsonWriter out, IpamsvcDHCPConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpamsvcDHCPConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpamsvcDHCPConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpamsvcDHCPConfig
   * @throws IOException if the JSON string is invalid with respect to IpamsvcDHCPConfig
   */
  public static IpamsvcDHCPConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpamsvcDHCPConfig.class);
  }

  /**
   * Convert an instance of IpamsvcDHCPConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

